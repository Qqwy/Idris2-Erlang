-module('Idris.Idris2.TTImp.Elab.Binders').
-compile('no_auto_import').
-compile('inline').
-compile({'inline_size',24}).
-export([
  'case--case block in checkLet-11965'/22,
  'case--case block in checkLet-11924'/20,
  'case--case block in case block in checkLet-11843'/28,
  'case--case block in checkLet-11750'/21,
  'case--checkLet-11644'/18,
  'case--checkLet-11555'/17,
  'case--case block in case block in checkLambda-11277'/38,
  'case--case block in checkLambda-11146'/30,
  'case--checkLambda-11079'/22,
  'case--checkLambda-10973'/18,
  'case--checkLambda-10898'/17,
  'case--checkLambda-10809'/16,
  'case--case block in inferLambda-10633'/25,
  'case--inferLambda-10543'/19,
  'case--findLamRig-10464'/4,
  'case--case block in checkPi-10381'/24,
  'case--checkPi-10291'/18,
  'case--checkPiInfo-10217'/12,
  'case--dropName-10157'/3,
  'case--dropName,drop-10108'/8,
  'nested--10943-11510--in--un--linearErr'/17,
  'nested--9464-10265--in--un--getRig'/17,
  'nested--9268-10085--in--un--drop'/5,
  'un--weakenExp'/4,
  'un--inferLambda'/17,
  'un--getTyNF'/4,
  'un--findLamRig'/3,
  'un--dropName'/3,
  'un--checkPiInfo'/11,
  'un--checkPi'/16,
  'un--checkLet'/16,
  'un--checkLambda'/16
]).
'case--case block in checkLet-11965'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21) -> case V21 of {'Idris.Prelude.Types.Just', E2} -> (fun (V22) -> ('Idris.Idris2.Algebra.Semiring':'un--branchOne'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V23) -> fun (V24) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring__ZeroOneOmega'(V23, V24)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring__ZeroOneOmega'()), fun (V25) -> fun (V26) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring__ZeroOneOmega'(V25, V26)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring__ZeroOneOmega'())}, {'Idris.Prelude.EqOrd.dn--un--__mkEq', fun (V27) -> fun (V28) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--==_Eq__ZeroOneOmega'(V27, V28)) end end, fun (V29) -> fun (V30) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--/=_Eq__ZeroOneOmega'(V29, V30)) end end}}, fun () -> fun (V31) -> begin (V36 = ('Idris.Idris2.TTImp.Elab.Delayed':'un--runDelays'('erased', V0, V15, V14, V13, V12, 0, ('Idris.Idris2.TTImp.Elab.Check':'un--check'(V0, V15, V14, V13, V12, ('Idris.Idris2.Algebra.Semiring':'un--linear'('erased', {'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V32) -> fun (V33) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring__ZeroOneOmega'(V32, V33)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring__ZeroOneOmega'()), fun (V34) -> fun (V35) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring__ZeroOneOmega'(V34, V35)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring__ZeroOneOmega'())})), V10, V9, V8, V3, {'Idris.Prelude.Types.Just', ('Idris.Idris2.Core.Normalise':'un--gnf'(V0, V8, V17))})), V31))), case V36 of {'Idris.Prelude.Types.Left', E3} -> (fun (V37) -> {'Idris.Prelude.Types.Left', V37} end(E3)); {'Idris.Prelude.Types.Right', E4} -> (fun (V38) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', ('Idris.Idris2.Builtin':'un--fst'('erased', 'erased', V38)), {'Idris.Builtin.MkPair', ('Idris.Idris2.Builtin':'un--snd'('erased', 'erased', V38)), ('Idris.Idris2.Algebra.Semiring':'un--linear'('erased', {'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V39) -> fun (V40) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring__ZeroOneOmega'(V39, V40)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring__ZeroOneOmega'()), fun (V41) -> fun (V42) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring__ZeroOneOmega'(V41, V42)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring__ZeroOneOmega'())}))}}} end(E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end, fun () -> fun (V43) -> begin (V44 = (('Idris.Idris2.TTImp.Elab.Check':'un--check'(V0, V15, V14, V13, V12, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring__ZeroOneOmega'(V6, V16)), V10, V9, V8, V3, {'Idris.Prelude.Types.Just', ('Idris.Idris2.Core.Normalise':'un--gnf'(V0, V8, V17))}))(V43))), case V44 of {'Idris.Prelude.Types.Left', E5} -> (fun (V45) -> {'Idris.Prelude.Types.Left', V45} end(E5)); {'Idris.Prelude.Types.Right', E6} -> (fun (V46) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', ('Idris.Idris2.Builtin':'un--fst'('erased', 'erased', V46)), {'Idris.Builtin.MkPair', ('Idris.Idris2.Builtin':'un--snd'('erased', 'erased', V46)), ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigMult'(V6, V16))}}} end(E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end, V22)) end(E2)); _ -> fun (V47) -> begin (V48 = (('Idris.Idris2.TTImp.Elab.Check':'un--check'(V0, V15, V14, V13, V12, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring__ZeroOneOmega'(V6, V16)), V10, V9, V8, V3, {'Idris.Prelude.Types.Just', ('Idris.Idris2.Core.Normalise':'un--gnf'(V0, V8, V17))}))(V47))), case V48 of {'Idris.Prelude.Types.Left', E0} -> (fun (V49) -> {'Idris.Prelude.Types.Left', V49} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V50) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', ('Idris.Idris2.Builtin':'un--fst'('erased', 'erased', V50)), {'Idris.Builtin.MkPair', ('Idris.Idris2.Builtin':'un--snd'('erased', 'erased', V50)), ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring__ZeroOneOmega'(V6, V16))}}} end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end.
'case--case block in checkLet-11924'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19) -> case V10 of {'Idris.TTImp.Elab.Check.MkElabInfo', E0, E1, E2, E3, E4, E5} -> (fun (V20, V21, V22, V23, V24, V25) -> {'Idris.TTImp.Elab.Check.MkElabInfo', V20, V21, V22, V23, 0, V25} end(E0, E1, E2, E3, E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in case block in checkLet-11843'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27) -> case V27 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V28, V29) -> fun (V30) -> begin (V31 = (('Idris.Idris2.Core.Normalise':'un--getTerm'('erased', V29))(V30))), case V31 of {'Idris.Prelude.Types.Left', E2} -> (fun (V32) -> {'Idris.Prelude.Types.Left', V32} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V33) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', {'Idris.Core.TT.Bind', V7, V5, {'Idris.Core.TT.Let', V7, V22, V20, V17}, V28}, ('Idris.Idris2.Core.Normalise':'un--gnf'(V0, V8, {'Idris.Core.TT.Bind', V7, V5, {'Idris.Core.TT.Let', V7, V22, V20, V17}, V33}))}} end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in checkLet-11750'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20) -> case V20 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V21, V22) -> case V22 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V23, V24) -> begin (V25 = {'Idris.Core.Env.::', {'Idris.Core.TT.Lam', V7, V24, {'Idris.Core.TT.Explicit'}, V17}, V8}), begin (V26 = ('Idris.Idris2.TTImp.TTImp':'dn--un--weaken_Weaken__NestedNames'('erased', 'erased', ('un--dropName'('erased', V5, V9))))), fun (V27) -> begin (V28 = (('un--weakenExp'(V5, V0, V25, V1))(V27))), case V28 of {'Idris.Prelude.Types.Left', E4} -> (fun (V29) -> {'Idris.Prelude.Types.Left', V29} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V30) -> begin (V32 = ('Idris.Idris2.TTImp.Elab.Check':'un--inScope'('erased', V5, V0, V15, V12, V7, V25, fun (V31) -> ('Idris.Idris2.TTImp.Elab.Check':'un--check'([V5 | V0], V15, V14, V13, V31, V16, V10, V26, V25, V2, V30)) end, V27))), case V32 of {'Idris.Prelude.Types.Left', E6} -> (fun (V33) -> {'Idris.Prelude.Types.Left', V33} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V34) -> case V34 of {'Idris.Builtin.MkPair', E8, E9} -> (fun (V35, V36) -> begin (V37 = (('Idris.Idris2.Core.Normalise':'un--getTerm'('erased', V36))(V27))), case V37 of {'Idris.Prelude.Types.Left', E10} -> (fun (V38) -> {'Idris.Prelude.Types.Left', V38} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V39) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', {'Idris.Core.TT.Bind', V7, V5, {'Idris.Core.TT.Let', V7, V24, V21, V17}, V35}, ('Idris.Idris2.Core.Normalise':'un--gnf'(V0, V8, {'Idris.Core.TT.Bind', V7, V5, {'Idris.Core.TT.Let', V7, V24, V21, V17}, V39}))}} end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E8, E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--checkLet-11644'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17) -> case V17 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V18, V19) -> fun (V20) -> begin (V33 = ('Idris.Idris2.TTImp.Elab.Check':'un--handle'('erased', V0, V15, V14, V13, V12, fun (V21) -> begin (V28 = ('Idris.Idris2.TTImp.Elab.Delayed':'un--runDelays'('erased', V0, V15, V14, V13, V12, 0, ('Idris.Idris2.TTImp.Elab.Check':'un--check'(V0, V15, V14, V13, V12, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring__ZeroOneOmega'(V6, V16)), case V10 of {'Idris.TTImp.Elab.Check.MkElabInfo', E2, E3, E4, E5, E6, E7} -> (fun (V22, V23, V24, V25, V26, V27) -> {'Idris.TTImp.Elab.Check.MkElabInfo', V22, V23, V24, V25, 0, V27} end(E2, E3, E4, E5, E6, E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V9, V8, V3, {'Idris.Prelude.Types.Just', ('Idris.Idris2.Core.Normalise':'un--gnf'(V0, V8, V18))})), V21))), case V28 of {'Idris.Prelude.Types.Left', E8} -> (fun (V29) -> {'Idris.Prelude.Types.Left', V29} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V30) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', ('Idris.Idris2.Builtin':'un--fst'('erased', 'erased', V30)), {'Idris.Builtin.MkPair', ('Idris.Idris2.Builtin':'un--snd'('erased', 'erased', V30)), ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring__ZeroOneOmega'(V6, V16))}}} end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end, fun (V31) -> begin (V32 = {'Idris.Builtin.MkPair', V18, V19}), ('case--case block in checkLet-11965'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V18, V19, V32, V31, ('nested--10943-11510--in--un--linearErr'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V31)))) end end, V20))), case V33 of {'Idris.Prelude.Types.Left', E10} -> (fun (V34) -> {'Idris.Prelude.Types.Left', V34} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V35) -> case V35 of {'Idris.Builtin.MkPair', E12, E13} -> (fun (V36, V37) -> case V37 of {'Idris.Builtin.MkPair', E14, E15} -> (fun (V38, V39) -> begin (V40 = {'Idris.Core.Env.::', {'Idris.Core.TT.Lam', V7, V39, {'Idris.Core.TT.Explicit'}, V18}, V8}), begin (V41 = ('Idris.Idris2.TTImp.TTImp':'dn--un--weaken_Weaken__NestedNames'('erased', 'erased', ('un--dropName'('erased', V5, V9))))), begin (V42 = (('un--weakenExp'(V5, V0, V40, V1))(V20))), case V42 of {'Idris.Prelude.Types.Left', E16} -> (fun (V43) -> {'Idris.Prelude.Types.Left', V43} end(E16)); {'Idris.Prelude.Types.Right', E17} -> (fun (V44) -> begin (V46 = ('Idris.Idris2.TTImp.Elab.Check':'un--inScope'('erased', V5, V0, V15, V12, V7, V40, fun (V45) -> ('Idris.Idris2.TTImp.Elab.Check':'un--check'([V5 | V0], V15, V14, V13, V45, V16, V10, V41, V40, V2, V44)) end, V20))), case V46 of {'Idris.Prelude.Types.Left', E18} -> (fun (V47) -> {'Idris.Prelude.Types.Left', V47} end(E18)); {'Idris.Prelude.Types.Right', E19} -> (fun (V48) -> case V48 of {'Idris.Builtin.MkPair', E20, E21} -> (fun (V49, V50) -> begin (V51 = (('Idris.Idris2.Core.Normalise':'un--getTerm'('erased', V50))(V20))), case V51 of {'Idris.Prelude.Types.Left', E22} -> (fun (V52) -> {'Idris.Prelude.Types.Left', V52} end(E22)); {'Idris.Prelude.Types.Right', E23} -> (fun (V53) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', {'Idris.Core.TT.Bind', V7, V5, {'Idris.Core.TT.Let', V7, V39, V36, V18}, V49}, ('Idris.Idris2.Core.Normalise':'un--gnf'(V0, V8, {'Idris.Core.TT.Bind', V7, V5, {'Idris.Core.TT.Let', V7, V39, V36, V18}, V53}))}} end(E23)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E20, E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E19)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E17)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end(E14, E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E12, E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--checkLet-11555'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16) -> case V16 of 0 -> ('Idris.Idris2.Algebra.Semiring':'un--erased'('erased', {'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V17) -> fun (V18) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring__ZeroOneOmega'(V17, V18)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring__ZeroOneOmega'()), fun (V19) -> fun (V20) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring__ZeroOneOmega'(V19, V20)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring__ZeroOneOmega'())})); 1 -> ('Idris.Idris2.Algebra.Semiring':'un--linear'('erased', {'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V21) -> fun (V22) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring__ZeroOneOmega'(V21, V22)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring__ZeroOneOmega'()), fun (V23) -> fun (V24) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring__ZeroOneOmega'(V23, V24)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring__ZeroOneOmega'())})); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in case block in checkLambda-11277'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37) -> case V37 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V38, V39) -> fun (V40) -> begin (V41 = (('Idris.Idris2.Core.Normalise':'un--logTermNF'(V0, V15, <<"elab.binder"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> <<"Lambda type"/utf8>> end, V8, V28))(V40))), case V41 of {'Idris.Prelude.Types.Left', E2} -> (fun (V42) -> {'Idris.Prelude.Types.Left', V42} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V43) -> begin (V44 = ('Idris.Idris2.Core.Normalise':'un--logGlueNF'([V4 | V0], V15, <<"elab.binder"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> <<"Got scope type"/utf8>> end, V34, V39, V40))), case V44 of {'Idris.Prelude.Types.Left', E4} -> (fun (V45) -> {'Idris.Prelude.Types.Left', V45} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V46) -> begin (V47 = (('Idris.Idris2.Core.Normalise':'un--getTerm'('erased', V39))(V40))), case V47 of {'Idris.Prelude.Types.Left', E6} -> (fun (V48) -> {'Idris.Prelude.Types.Left', V48} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V49) -> (('Idris.Idris2.TTImp.Elab.Check':'un--checkExpP'(V0, V15, V13, V12, V16, 0, V10, V8, V7, {'Idris.Core.TT.Bind', V7, V4, {'Idris.Core.TT.Lam', V24, V33, V32, V29}, V38}, ('Idris.Idris2.Core.Normalise':'un--gnf'(V0, V8, {'Idris.Core.TT.Bind', V7, V4, {'Idris.Core.TT.Pi', V24, V33, V32, V29}, V49})), {'Idris.Prelude.Types.Just', ('Idris.Idris2.Core.Normalise':'un--gnf'(V0, V8, {'Idris.Core.TT.Bind', V7, V25, {'Idris.Core.TT.Pi', V24, V23, V32, V22}, V26}))}))(V40)) end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in checkLambda-11146'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29) -> case V29 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V30, V31) -> fun (V32) -> begin (V33 = (('un--checkPiInfo'(V0, V15, V14, V13, V12, V6, V10, V9, V8, V5, {'Idris.Prelude.Types.Just', ('Idris.Idris2.Core.Normalise':'un--gnf'(V0, V8, V30))}))(V32))), case V33 of {'Idris.Prelude.Types.Left', E2} -> (fun (V34) -> {'Idris.Prelude.Types.Left', V34} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V35) -> begin (V44 = ('Idris.Idris2.Algebra.Preorder':'un--glb'('erased', {'Idris.Algebra.Preorder.dn--un--__mkPreorder', fun (V36) -> fun (V37) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--<=_Preorder__ZeroOneOmega'(V36, V37)) end end, fun (V38) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--preorderRefl_Preorder__ZeroOneOmega'(V38)) end, fun (V39) -> fun (V40) -> fun (V41) -> fun (V42) -> fun (V43) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--preorderTrans_Preorder__ZeroOneOmega'(V39, V40, V41, V42, V43)) end end end end end}, V6, V23))), begin (V45 = {'Idris.Core.Env.::', {'Idris.Core.TT.Lam', V7, V44, V35, V30}, V8}), begin (V46 = (('Idris.Idris2.TTImp.Elab.Check':'un--convertP'(V0, V15, V13, V12, 0, V7, V10, V8, ('Idris.Idris2.Core.Normalise':'un--gnf'(V0, V8, V30)), ('Idris.Idris2.Core.Normalise':'un--gnf'(V0, V8, V22))))(V32))), case V46 of {'Idris.Prelude.Types.Left', E4} -> (fun (V47) -> {'Idris.Prelude.Types.Left', V47} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V48) -> begin (V49 = ('Idris.Idris2.TTImp.TTImp':'dn--un--weaken_Weaken__NestedNames'('erased', 'erased', ('un--dropName'('erased', V4, V9))))), begin (V51 = ('Idris.Idris2.TTImp.Elab.Check':'un--inScope'('erased', V4, V0, V15, V12, V7, V45, fun (V50) -> ('Idris.Idris2.TTImp.Elab.Check':'un--check'([V4 | V0], V15, V14, V13, V50, V16, V10, V49, V45, V2, {'Idris.Prelude.Types.Just', ('Idris.Idris2.Core.Normalise':'un--gnf'([V4 | V0], V45, ('Idris.Idris2.Core.TT':'un--renameTop'('erased', 'erased', V4, V26))))})) end, V32))), case V51 of {'Idris.Prelude.Types.Left', E6} -> (fun (V52) -> {'Idris.Prelude.Types.Left', V52} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V53) -> case V53 of {'Idris.Builtin.MkPair', E8, E9} -> (fun (V54, V55) -> begin (V56 = (('Idris.Idris2.Core.Normalise':'un--logTermNF'(V0, V15, <<"elab.binder"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> <<"Lambda type"/utf8>> end, V8, V28))(V32))), case V56 of {'Idris.Prelude.Types.Left', E10} -> (fun (V57) -> {'Idris.Prelude.Types.Left', V57} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V58) -> begin (V59 = ('Idris.Idris2.Core.Normalise':'un--logGlueNF'([V4 | V0], V15, <<"elab.binder"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> <<"Got scope type"/utf8>> end, V45, V55, V32))), case V59 of {'Idris.Prelude.Types.Left', E12} -> (fun (V60) -> {'Idris.Prelude.Types.Left', V60} end(E12)); {'Idris.Prelude.Types.Right', E13} -> (fun (V61) -> begin (V62 = (('Idris.Idris2.Core.Normalise':'un--getTerm'('erased', V55))(V32))), case V62 of {'Idris.Prelude.Types.Left', E14} -> (fun (V63) -> {'Idris.Prelude.Types.Left', V63} end(E14)); {'Idris.Prelude.Types.Right', E15} -> (fun (V64) -> (('Idris.Idris2.TTImp.Elab.Check':'un--checkExpP'(V0, V15, V13, V12, V16, 0, V10, V8, V7, {'Idris.Core.TT.Bind', V7, V4, {'Idris.Core.TT.Lam', V24, V44, V35, V30}, V54}, ('Idris.Idris2.Core.Normalise':'un--gnf'(V0, V8, {'Idris.Core.TT.Bind', V7, V4, {'Idris.Core.TT.Pi', V24, V44, V35, V30}, V64})), {'Idris.Prelude.Types.Just', ('Idris.Idris2.Core.Normalise':'un--gnf'(V0, V8, {'Idris.Core.TT.Bind', V7, V25, {'Idris.Core.TT.Pi', V24, V23, V35, V22}, V26}))}))(V32)) end(E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E8, E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--checkLambda-11079'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21) -> case V20 of {'Idris.Core.TT.Bind', E0, E1, E2, E3} -> (fun (V22, V23, V24, V25) -> case V24 of {'Idris.Core.TT.Pi', E4, E5, E6, E7} -> (fun (V26, V27, V28, V29) -> fun (V30) -> begin (V35 = (('Idris.Idris2.TTImp.Elab.Check':'un--check'(V0, V15, V14, V13, V12, ('Idris.Idris2.Algebra.Semiring':'un--erased'('erased', {'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V31) -> fun (V32) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring__ZeroOneOmega'(V31, V32)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring__ZeroOneOmega'()), fun (V33) -> fun (V34) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring__ZeroOneOmega'(V33, V34)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring__ZeroOneOmega'())})), V10, V9, V8, V3, {'Idris.Prelude.Types.Just', ('Idris.Idris2.Core.Normalise':'un--gType'('erased', V7))}))(V30))), case V35 of {'Idris.Prelude.Types.Left', E8} -> (fun (V36) -> {'Idris.Prelude.Types.Left', V36} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V37) -> begin (V38 = {'Idris.Core.TT.Bind', V22, V23, {'Idris.Core.TT.Pi', V26, V27, V28, V29}, V25}), case V37 of {'Idris.Builtin.MkPair', E10, E11} -> (fun (V39, V40) -> begin (V41 = (('un--checkPiInfo'(V0, V15, V14, V13, V12, V6, V10, V9, V8, V5, {'Idris.Prelude.Types.Just', ('Idris.Idris2.Core.Normalise':'un--gnf'(V0, V8, V39))}))(V30))), case V41 of {'Idris.Prelude.Types.Left', E12} -> (fun (V42) -> {'Idris.Prelude.Types.Left', V42} end(E12)); {'Idris.Prelude.Types.Right', E13} -> (fun (V43) -> begin (V52 = ('Idris.Idris2.Algebra.Preorder':'un--glb'('erased', {'Idris.Algebra.Preorder.dn--un--__mkPreorder', fun (V44) -> fun (V45) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--<=_Preorder__ZeroOneOmega'(V44, V45)) end end, fun (V46) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--preorderRefl_Preorder__ZeroOneOmega'(V46)) end, fun (V47) -> fun (V48) -> fun (V49) -> fun (V50) -> fun (V51) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--preorderTrans_Preorder__ZeroOneOmega'(V47, V48, V49, V50, V51)) end end end end end}, V6, V27))), begin (V53 = {'Idris.Core.Env.::', {'Idris.Core.TT.Lam', V7, V52, V43, V39}, V8}), begin (V54 = (('Idris.Idris2.TTImp.Elab.Check':'un--convertP'(V0, V15, V13, V12, 0, V7, V10, V8, ('Idris.Idris2.Core.Normalise':'un--gnf'(V0, V8, V39)), ('Idris.Idris2.Core.Normalise':'un--gnf'(V0, V8, V29))))(V30))), case V54 of {'Idris.Prelude.Types.Left', E14} -> (fun (V55) -> {'Idris.Prelude.Types.Left', V55} end(E14)); {'Idris.Prelude.Types.Right', E15} -> (fun (V56) -> begin (V57 = ('Idris.Idris2.TTImp.TTImp':'dn--un--weaken_Weaken__NestedNames'('erased', 'erased', ('un--dropName'('erased', V4, V9))))), begin (V59 = ('Idris.Idris2.TTImp.Elab.Check':'un--inScope'('erased', V4, V0, V15, V12, V7, V53, fun (V58) -> ('Idris.Idris2.TTImp.Elab.Check':'un--check'([V4 | V0], V15, V14, V13, V58, V16, V10, V57, V53, V2, {'Idris.Prelude.Types.Just', ('Idris.Idris2.Core.Normalise':'un--gnf'([V4 | V0], V53, ('Idris.Idris2.Core.TT':'un--renameTop'('erased', 'erased', V4, V25))))})) end, V30))), case V59 of {'Idris.Prelude.Types.Left', E16} -> (fun (V60) -> {'Idris.Prelude.Types.Left', V60} end(E16)); {'Idris.Prelude.Types.Right', E17} -> (fun (V61) -> case V61 of {'Idris.Builtin.MkPair', E18, E19} -> (fun (V62, V63) -> begin (V64 = (('Idris.Idris2.Core.Normalise':'un--logTermNF'(V0, V15, <<"elab.binder"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> <<"Lambda type"/utf8>> end, V8, V38))(V30))), case V64 of {'Idris.Prelude.Types.Left', E20} -> (fun (V65) -> {'Idris.Prelude.Types.Left', V65} end(E20)); {'Idris.Prelude.Types.Right', E21} -> (fun (V66) -> begin (V67 = ('Idris.Idris2.Core.Normalise':'un--logGlueNF'([V4 | V0], V15, <<"elab.binder"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> <<"Got scope type"/utf8>> end, V53, V63, V30))), case V67 of {'Idris.Prelude.Types.Left', E22} -> (fun (V68) -> {'Idris.Prelude.Types.Left', V68} end(E22)); {'Idris.Prelude.Types.Right', E23} -> (fun (V69) -> begin (V70 = (('Idris.Idris2.Core.Normalise':'un--getTerm'('erased', V63))(V30))), case V70 of {'Idris.Prelude.Types.Left', E24} -> (fun (V71) -> {'Idris.Prelude.Types.Left', V71} end(E24)); {'Idris.Prelude.Types.Right', E25} -> (fun (V72) -> (('Idris.Idris2.TTImp.Elab.Check':'un--checkExpP'(V0, V15, V13, V12, V16, 0, V10, V8, V7, {'Idris.Core.TT.Bind', V7, V4, {'Idris.Core.TT.Lam', V26, V52, V43, V39}, V62}, ('Idris.Idris2.Core.Normalise':'un--gnf'(V0, V8, {'Idris.Core.TT.Bind', V7, V4, {'Idris.Core.TT.Pi', V26, V52, V43, V39}, V72})), {'Idris.Prelude.Types.Just', ('Idris.Idris2.Core.Normalise':'un--gnf'(V0, V8, {'Idris.Core.TT.Bind', V7, V23, {'Idris.Core.TT.Pi', V26, V27, V43, V29}, V25}))}))(V30)) end(E25)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E23)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E18, E19)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E17)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end(E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E10, E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E4, E5, E6, E7)); _ -> fun (V73) -> ('un--inferLambda'(V0, V15, V14, V13, V12, V16, V10, V9, V8, V7, V6, V5, V4, V3, V2, {'Idris.Prelude.Types.Just', V1}, V73)) end end end(E0, E1, E2, E3)); _ -> fun (V74) -> ('un--inferLambda'(V0, V15, V14, V13, V12, V16, V10, V9, V8, V7, V6, V5, V4, V3, V2, {'Idris.Prelude.Types.Just', V1}, V74)) end end.
'case--checkLambda-10973'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17) -> case V17 of {'Idris.TTImp.Elab.Check.InLHS', E0} -> (fun (V18) -> ('Idris.Idris2.Core.Unify':'un--inLHS'()) end(E0)); _ -> ('Idris.Idris2.Core.Unify':'un--inTermP'(1)) end.
'case--checkLambda-10898'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16) -> case V16 of 0 -> ('Idris.Idris2.Algebra.Semiring':'un--erased'('erased', {'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V17) -> fun (V18) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring__ZeroOneOmega'(V17, V18)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring__ZeroOneOmega'()), fun (V19) -> fun (V20) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring__ZeroOneOmega'(V19, V20)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring__ZeroOneOmega'())})); 1 -> ('Idris.Idris2.Algebra.Semiring':'un--linear'('erased', {'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V21) -> fun (V22) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring__ZeroOneOmega'(V21, V22)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring__ZeroOneOmega'()), fun (V23) -> fun (V24) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring__ZeroOneOmega'(V23, V24)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring__ZeroOneOmega'())})); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--checkLambda-10809'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15) -> case V15 of 0 -> ('Idris.Idris2.Algebra.Semiring':'un--erased'('erased', {'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V16) -> fun (V17) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring__ZeroOneOmega'(V16, V17)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring__ZeroOneOmega'()), fun (V18) -> fun (V19) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring__ZeroOneOmega'(V18, V19)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring__ZeroOneOmega'())})); 1 -> ('Idris.Idris2.Algebra.Semiring':'un--linear'('erased', {'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V20) -> fun (V21) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring__ZeroOneOmega'(V20, V21)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring__ZeroOneOmega'()), fun (V22) -> fun (V23) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring__ZeroOneOmega'(V22, V23)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring__ZeroOneOmega'())})); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in inferLambda-10633'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24) -> case V24 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V25, V26) -> fun (V27) -> begin (V28 = (('Idris.Idris2.Core.Normalise':'un--getTerm'('erased', V26))(V27))), case V28 of {'Idris.Prelude.Types.Left', E2} -> (fun (V29) -> {'Idris.Prelude.Types.Left', V29} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V30) -> begin (V31 = ('Idris.Idris2.Core.Normalise':'un--gnf'(V0, V8, {'Idris.Core.TT.Bind', V7, V4, {'Idris.Core.TT.Pi', V7, V17, V21, V18}, V30}))), begin (V32 = ('Idris.Idris2.Core.Normalise':'un--logGlue'(V0, V15, <<"elab.binder"/utf8>>, (1 + (1 + (1 + (1 + (1 + 0))))), fun () -> <<"Inferred lambda type"/utf8>> end, V8, V31, V27))), case V32 of {'Idris.Prelude.Types.Left', E4} -> (fun (V33) -> {'Idris.Prelude.Types.Left', V33} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V34) -> begin (V38 = (('Idris.Idris2.Prelude.Types':'un--maybe'('erased', 'erased', fun () -> fun (V35) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end end, fun () -> fun (V36) -> fun (V37) -> ('Idris.Idris2.Core.Normalise':'un--logGlueNF'(V0, V15, <<"elab.binder"/utf8>>, (1 + (1 + (1 + (1 + (1 + 0))))), fun () -> <<"Expected lambda type"/utf8>> end, V8, V36, V37)) end end end, V1))(V27))), case V38 of {'Idris.Prelude.Types.Left', E6} -> (fun (V39) -> {'Idris.Prelude.Types.Left', V39} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V40) -> (('Idris.Idris2.TTImp.Elab.Check':'un--checkExpP'(V0, V15, V13, V12, V11, 0, V10, V8, V7, {'Idris.Core.TT.Bind', V7, V4, {'Idris.Core.TT.Lam', V7, V17, V21, V18}, V25}, V31, V1))(V27)) end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--inferLambda-10543'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18) -> case V18 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V19, V20) -> fun (V21) -> begin (V22 = (('un--checkPiInfo'(V0, V15, V14, V13, V12, V6, V10, V9, V8, V5, {'Idris.Prelude.Types.Just', ('Idris.Idris2.Core.Normalise':'un--gnf'(V0, V8, V19))}))(V21))), case V22 of {'Idris.Prelude.Types.Left', E2} -> (fun (V23) -> {'Idris.Prelude.Types.Left', V23} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V24) -> begin (V25 = {'Idris.Core.Env.::', {'Idris.Core.TT.Lam', V7, V17, V24, V19}, V8}), begin (V26 = ('Idris.Idris2.TTImp.TTImp':'dn--un--weaken_Weaken__NestedNames'('erased', 'erased', ('un--dropName'('erased', V4, V9))))), begin (V28 = ('Idris.Idris2.TTImp.Elab.Check':'un--inScope'('erased', V4, V0, V15, V12, V7, V25, fun (V27) -> ('Idris.Idris2.TTImp.Elab.Check':'un--check'([V4 | V0], V15, V14, V13, V27, V11, V10, V26, V25, V2, {'Idris.Prelude.Types.Nothing'})) end, V21))), case V28 of {'Idris.Prelude.Types.Left', E4} -> (fun (V29) -> {'Idris.Prelude.Types.Left', V29} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V30) -> case V30 of {'Idris.Builtin.MkPair', E6, E7} -> (fun (V31, V32) -> begin (V33 = (('Idris.Idris2.Core.Normalise':'un--getTerm'('erased', V32))(V21))), case V33 of {'Idris.Prelude.Types.Left', E8} -> (fun (V34) -> {'Idris.Prelude.Types.Left', V34} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V35) -> begin (V36 = ('Idris.Idris2.Core.Normalise':'un--gnf'(V0, V8, {'Idris.Core.TT.Bind', V7, V4, {'Idris.Core.TT.Pi', V7, V17, V24, V19}, V35}))), begin (V37 = ('Idris.Idris2.Core.Normalise':'un--logGlue'(V0, V15, <<"elab.binder"/utf8>>, (1 + (1 + (1 + (1 + (1 + 0))))), fun () -> <<"Inferred lambda type"/utf8>> end, V8, V36, V21))), case V37 of {'Idris.Prelude.Types.Left', E10} -> (fun (V38) -> {'Idris.Prelude.Types.Left', V38} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V39) -> begin (V43 = (('Idris.Idris2.Prelude.Types':'un--maybe'('erased', 'erased', fun () -> fun (V40) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end end, fun () -> fun (V41) -> fun (V42) -> ('Idris.Idris2.Core.Normalise':'un--logGlueNF'(V0, V15, <<"elab.binder"/utf8>>, (1 + (1 + (1 + (1 + (1 + 0))))), fun () -> <<"Expected lambda type"/utf8>> end, V8, V41, V42)) end end end, V1))(V21))), case V43 of {'Idris.Prelude.Types.Left', E12} -> (fun (V44) -> {'Idris.Prelude.Types.Left', V44} end(E12)); {'Idris.Prelude.Types.Right', E13} -> (fun (V45) -> (('Idris.Idris2.TTImp.Elab.Check':'un--checkExpP'(V0, V15, V13, V12, V11, 0, V10, V8, V7, {'Idris.Core.TT.Bind', V7, V4, {'Idris.Core.TT.Lam', V7, V17, V24, V19}, V31}, V36, V1))(V21)) end(E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E6, E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--findLamRig-10464'(V0, V1, V2, V3) -> case V3 of {'Idris.Core.Value.NBind', E0, E1, E2, E3} -> (fun (V4, V5, V6, V7) -> case V6 of {'Idris.Core.TT.Pi', E4, E5, E6, E7} -> (fun (V8, V9, V10, V11) -> fun (V12) -> {'Idris.Prelude.Types.Right', V9} end end(E4, E5, E6, E7)); _ -> fun (V13) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--top_Top__ZeroOneOmega'())} end end end(E0, E1, E2, E3)); _ -> fun (V14) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--top_Top__ZeroOneOmega'())} end end.
'case--case block in checkPi-10381'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23) -> case V23 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V24, V25) -> ('Idris.Idris2.TTImp.Elab.Check':'un--checkExp'(V0, V15, V13, V12, V11, V10, V8, V7, {'Idris.Core.TT.Bind', V7, V4, {'Idris.Core.TT.Pi', ('Idris.Idris2.TTImp.TTImp':'un--getFC'(V3)), V6, V20, V17}, V24}, ('Idris.Idris2.Core.Normalise':'un--gType'('erased', V7)), V1)) end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--checkPi-10291'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17) -> case V17 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V18, V19) -> fun (V20) -> begin (V21 = (('un--checkPiInfo'(V0, V15, V14, V13, V12, V6, V10, V9, V8, V5, {'Idris.Prelude.Types.Just', ('Idris.Idris2.Core.Normalise':'un--gnf'(V0, V8, V18))}))(V20))), case V21 of {'Idris.Prelude.Types.Left', E2} -> (fun (V22) -> {'Idris.Prelude.Types.Left', V22} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V23) -> begin (V24 = {'Idris.Core.Env.::', {'Idris.Core.TT.Pi', V7, V6, V23, V18}, V8}), begin (V25 = ('Idris.Idris2.TTImp.TTImp':'dn--un--weaken_Weaken__NestedNames'('erased', 'erased', ('un--dropName'('erased', V4, V9))))), begin (V27 = ('Idris.Idris2.TTImp.Elab.Check':'un--inScope'('erased', V4, V0, V15, V12, V7, V24, fun (V26) -> ('Idris.Idris2.TTImp.Elab.Check':'un--check'([V4 | V0], V15, V14, V13, V26, V16, V10, V25, V24, V2, {'Idris.Prelude.Types.Just', ('Idris.Idris2.Core.Normalise':'un--gType'('erased', V7))})) end, V20))), case V27 of {'Idris.Prelude.Types.Left', E4} -> (fun (V28) -> {'Idris.Prelude.Types.Left', V28} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V29) -> case V29 of {'Idris.Builtin.MkPair', E6, E7} -> (fun (V30, V31) -> (('Idris.Idris2.TTImp.Elab.Check':'un--checkExp'(V0, V15, V13, V12, V11, V10, V8, V7, {'Idris.Core.TT.Bind', V7, V4, {'Idris.Core.TT.Pi', ('Idris.Idris2.TTImp.TTImp':'un--getFC'(V3)), V6, V23, V18}, V30}, ('Idris.Idris2.Core.Normalise':'un--gType'('erased', V7)), V1))(V20)) end(E6, E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--checkPiInfo-10217'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11) -> case V11 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V12, V13) -> fun (V14) -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.DefImplicit', V12}} end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--dropName-10157'(V0, V1, V2) -> ('nested--9268-10085--in--un--drop'('erased', V1, V2, 'erased', V1)).
'case--dropName,drop-10108'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V7 of 0 -> ('nested--9268-10085--in--un--drop'('erased', V1, V2, 'erased', V6)); 1 -> [{'Idris.Builtin.MkPair', V4, V5} | ('nested--9268-10085--in--un--drop'('erased', V1, V2, 'erased', V6))]; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--10943-11510--in--un--linearErr'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16) -> case V16 of {'Idris.Core.Core.LinearMisuse', E0, E1, E2, E3} -> (fun (V17, V18, V19, V20) -> {'Idris.Prelude.Types.Just', V19} end(E0, E1, E2, E3)); {'Idris.Core.Core.InType', E4, E5, E6} -> (fun (V21, V22, V23) -> ('nested--10943-11510--in--un--linearErr'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V23)) end(E4, E5, E6)); {'Idris.Core.Core.InCon', E7, E8, E9} -> (fun (V24, V25, V26) -> ('nested--10943-11510--in--un--linearErr'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V26)) end(E7, E8, E9)); {'Idris.Core.Core.InLHS', E10, E11, E12} -> (fun (V27, V28, V29) -> ('nested--10943-11510--in--un--linearErr'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V29)) end(E10, E11, E12)); {'Idris.Core.Core.InRHS', E13, E14, E15} -> (fun (V30, V31, V32) -> ('nested--10943-11510--in--un--linearErr'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V32)) end(E13, E14, E15)); _ -> {'Idris.Prelude.Types.Nothing'} end.
'nested--9464-10265--in--un--getRig'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16) -> case V16 of {'Idris.TTImp.Elab.Check.InLHS', E0} -> (fun (V17) -> V11 end(E0)); _ -> ('Idris.Idris2.Algebra.Semiring':'un--erased'('erased', {'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V18) -> fun (V19) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring__ZeroOneOmega'(V18, V19)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring__ZeroOneOmega'()), fun (V20) -> fun (V21) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring__ZeroOneOmega'(V20, V21)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring__ZeroOneOmega'())})) end.
'nested--9268-10085--in--un--drop'(V0, V1, V2, V3, V4) -> case V4 of [] -> []; [E0 | E1] -> (fun (V5, V6) -> case V5 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V7, V8) -> ('case--dropName,drop-10108'('erased', V1, V2, 'erased', V7, V8, V6, ('Idris.Idris2.Core.Name':'dn--un--==_Eq__Name'(V7, V2)))) end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--weakenExp'(V0, V1, V2, V3) -> case V3 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V4) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}} end end()); {'Idris.Prelude.Types.Just', E0} -> (fun (V5) -> fun (V6) -> begin (V7 = (('Idris.Idris2.Core.Normalise':'un--getTerm'('erased', V5))(V6))), case V7 of {'Idris.Prelude.Types.Left', E1} -> (fun (V8) -> {'Idris.Prelude.Types.Left', V8} end(E1)); {'Idris.Prelude.Types.Right', E2} -> (fun (V9) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Just', ('Idris.Idris2.Core.Normalise':'un--gnf'([V0 | V1], V2, ('Idris.Idris2.Core.TT':'dn--un--weaken_Weaken__Term'('erased', 'erased', V9))))}} end(E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--inferLambda'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16) -> begin (V17 = (('un--findLamRig'('erased', V1, V15))(V16))), case V17 of {'Idris.Prelude.Types.Left', E0} -> (fun (V18) -> {'Idris.Prelude.Types.Left', V18} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V19) -> begin (V28 = ('Idris.Idris2.Algebra.Preorder':'un--glb'('erased', {'Idris.Algebra.Preorder.dn--un--__mkPreorder', fun (V20) -> fun (V21) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--<=_Preorder__ZeroOneOmega'(V20, V21)) end end, fun (V22) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--preorderRefl_Preorder__ZeroOneOmega'(V22)) end, fun (V23) -> fun (V24) -> fun (V25) -> fun (V26) -> fun (V27) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--preorderTrans_Preorder__ZeroOneOmega'(V23, V24, V25, V26, V27)) end end end end end}, V19, V10))), begin (V33 = (('Idris.Idris2.TTImp.Elab.Check':'un--check'(V0, V1, V2, V3, V4, ('Idris.Idris2.Algebra.Semiring':'un--erased'('erased', {'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V29) -> fun (V30) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring__ZeroOneOmega'(V29, V30)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring__ZeroOneOmega'()), fun (V31) -> fun (V32) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring__ZeroOneOmega'(V31, V32)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring__ZeroOneOmega'())})), V6, V7, V8, V13, {'Idris.Prelude.Types.Just', ('Idris.Idris2.Core.Normalise':'un--gType'('erased', V9))}))(V16))), case V33 of {'Idris.Prelude.Types.Left', E2} -> (fun (V34) -> {'Idris.Prelude.Types.Left', V34} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V35) -> case V35 of {'Idris.Builtin.MkPair', E4, E5} -> (fun (V36, V37) -> begin (V38 = (('un--checkPiInfo'(V0, V1, V2, V3, V4, V10, V6, V7, V8, V11, {'Idris.Prelude.Types.Just', ('Idris.Idris2.Core.Normalise':'un--gnf'(V0, V8, V36))}))(V16))), case V38 of {'Idris.Prelude.Types.Left', E6} -> (fun (V39) -> {'Idris.Prelude.Types.Left', V39} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V40) -> begin (V41 = {'Idris.Core.Env.::', {'Idris.Core.TT.Lam', V9, V28, V40, V36}, V8}), begin (V42 = ('Idris.Idris2.TTImp.TTImp':'dn--un--weaken_Weaken__NestedNames'('erased', 'erased', ('un--dropName'('erased', V12, V7))))), begin (V44 = ('Idris.Idris2.TTImp.Elab.Check':'un--inScope'('erased', V12, V0, V1, V4, V9, V41, fun (V43) -> ('Idris.Idris2.TTImp.Elab.Check':'un--check'([V12 | V0], V1, V2, V3, V43, V5, V6, V42, V41, V14, {'Idris.Prelude.Types.Nothing'})) end, V16))), case V44 of {'Idris.Prelude.Types.Left', E8} -> (fun (V45) -> {'Idris.Prelude.Types.Left', V45} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V46) -> case V46 of {'Idris.Builtin.MkPair', E10, E11} -> (fun (V47, V48) -> begin (V49 = (('Idris.Idris2.Core.Normalise':'un--getTerm'('erased', V48))(V16))), case V49 of {'Idris.Prelude.Types.Left', E12} -> (fun (V50) -> {'Idris.Prelude.Types.Left', V50} end(E12)); {'Idris.Prelude.Types.Right', E13} -> (fun (V51) -> begin (V52 = ('Idris.Idris2.Core.Normalise':'un--gnf'(V0, V8, {'Idris.Core.TT.Bind', V9, V12, {'Idris.Core.TT.Pi', V9, V28, V40, V36}, V51}))), begin (V53 = ('Idris.Idris2.Core.Normalise':'un--logGlue'(V0, V1, <<"elab.binder"/utf8>>, (1 + (1 + (1 + (1 + (1 + 0))))), fun () -> <<"Inferred lambda type"/utf8>> end, V8, V52, V16))), case V53 of {'Idris.Prelude.Types.Left', E14} -> (fun (V54) -> {'Idris.Prelude.Types.Left', V54} end(E14)); {'Idris.Prelude.Types.Right', E15} -> (fun (V55) -> begin (V59 = (('Idris.Idris2.Prelude.Types':'un--maybe'('erased', 'erased', fun () -> fun (V56) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end end, fun () -> fun (V57) -> fun (V58) -> ('Idris.Idris2.Core.Normalise':'un--logGlueNF'(V0, V1, <<"elab.binder"/utf8>>, (1 + (1 + (1 + (1 + (1 + 0))))), fun () -> <<"Expected lambda type"/utf8>> end, V8, V57, V58)) end end end, V15))(V16))), case V59 of {'Idris.Prelude.Types.Left', E16} -> (fun (V60) -> {'Idris.Prelude.Types.Left', V60} end(E16)); {'Idris.Prelude.Types.Right', E17} -> (fun (V61) -> (('Idris.Idris2.TTImp.Elab.Check':'un--checkExpP'(V0, V1, V3, V4, V5, 0, V6, V8, V9, {'Idris.Core.TT.Bind', V9, V12, {'Idris.Core.TT.Lam', V9, V28, V40, V36}, V47}, V52, V15))(V16)) end(E17)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E10, E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--getTyNF'(V0, V1, V2, V3) -> case V3 of {'Idris.Core.TT.Bind', E6, E7, E8, E9} -> (fun (V4, V5, V6, V7) -> fun (V8) -> {'Idris.Prelude.Types.Right', V3} end end(E6, E7, E8, E9)); _ -> fun (V9) -> begin (V38 = begin (V37 = (('Idris.Idris2.Erlang.Data.IORef':'un--readIORef'('erased', 'erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V10) -> fun (V11) -> fun (V12) -> fun (V13) -> fun (V14) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor__IO'('erased', 'erased', V12, V13, V14)) end end end end end, fun (V15) -> fun (V16) -> fun (V17) -> V16 end end end, fun (V18) -> fun (V19) -> fun (V20) -> fun (V21) -> fun (V22) -> begin (V23 = (V20(V22))), begin (V24 = (V21(V22))), (V23(V24)) end end end end end end end}, fun (V25) -> fun (V26) -> fun (V27) -> fun (V28) -> fun (V29) -> begin (V30 = (V27(V29))), ((V28(V30))(V29)) end end end end end end, fun (V31) -> fun (V32) -> fun (V33) -> begin (V34 = (V32(V33))), (V34(V33)) end end end end}, fun (V35) -> fun (V36) -> V36 end end}, V1))(V9))), {'Idris.Prelude.Types.Right', V37} end), case V38 of {'Idris.Prelude.Types.Left', E0} -> (fun (V39) -> {'Idris.Prelude.Types.Left', V39} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V40) -> begin (V41 = (('Idris.Idris2.Core.Normalise':'un--nf'(V1, V0, V40, V2, V3))(V9))), case V41 of {'Idris.Prelude.Types.Left', E2} -> (fun (V42) -> {'Idris.Prelude.Types.Left', V42} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V43) -> begin (V44 = ('Idris.Idris2.Core.Context':'un--clearDefs'(V40, V9))), case V44 of {'Idris.Prelude.Types.Left', E4} -> (fun (V45) -> {'Idris.Prelude.Types.Left', V45} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V46) -> ('Idris.Idris2.Core.Normalise':'dn--un--quote_Quote__NF'(V1, V0, V46, V2, V43, V9)) end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end.
'un--findLamRig'(V0, V1, V2) -> case V2 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V3) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--top_Top__ZeroOneOmega'())} end end()); {'Idris.Prelude.Types.Just', E0} -> (fun (V4) -> fun (V5) -> begin (V6 = (('Idris.Idris2.Core.Normalise':'un--getNF'('erased', V1, V4))(V5))), case V6 of {'Idris.Prelude.Types.Left', E1} -> (fun (V7) -> {'Idris.Prelude.Types.Left', V7} end(E1)); {'Idris.Prelude.Types.Right', E2} -> (fun (V8) -> case V8 of {'Idris.Core.Value.NBind', E3, E4, E5, E6} -> (fun (V9, V10, V11, V12) -> case V11 of {'Idris.Core.TT.Pi', E7, E8, E9, E10} -> (fun (V13, V14, V15, V16) -> {'Idris.Prelude.Types.Right', V14} end(E7, E8, E9, E10)); _ -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--top_Top__ZeroOneOmega'())} end end(E3, E4, E5, E6)); _ -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--top_Top__ZeroOneOmega'())} end end(E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--dropName'(V0, V1, V2) -> ('nested--9268-10085--in--un--drop'('erased', V2, V1, 'erased', V2)).
'un--checkPiInfo'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10) -> case V9 of {'Idris.Core.TT.Explicit'} -> (fun () -> fun (V11) -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.Explicit'}} end end()); {'Idris.Core.TT.Implicit'} -> (fun () -> fun (V12) -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.Implicit'}} end end()); {'Idris.Core.TT.AutoImplicit'} -> (fun () -> fun (V13) -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.AutoImplicit'}} end end()); {'Idris.Core.TT.DefImplicit', E0} -> (fun (V14) -> fun (V15) -> begin (V16 = (('Idris.Idris2.TTImp.Elab.Check':'un--check'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V14, V10))(V15))), case V16 of {'Idris.Prelude.Types.Left', E1} -> (fun (V17) -> {'Idris.Prelude.Types.Left', V17} end(E1)); {'Idris.Prelude.Types.Right', E2} -> (fun (V18) -> case V18 of {'Idris.Builtin.MkPair', E3, E4} -> (fun (V19, V20) -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.DefImplicit', V19}} end(E3, E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--checkPi'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15) -> begin (V22 = ('nested--9464-10265--in--un--getRig'(V0, V15, V14, V13, V12, V11, V10, V9, V8, V7, V6, V5, V4, V3, V2, V1, case V6 of {'Idris.TTImp.Elab.Check.MkElabInfo', E0, E1, E2, E3, E4, E5} -> (fun (V16, V17, V18, V19, V20, V21) -> V16 end(E0, E1, E2, E3, E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), fun (V23) -> begin (V24 = (('Idris.Idris2.TTImp.Elab.Check':'un--check'(V0, V1, V2, V3, V4, V22, V6, V7, V8, V13, {'Idris.Prelude.Types.Just', ('Idris.Idris2.Core.Normalise':'un--gType'('erased', V9))}))(V23))), case V24 of {'Idris.Prelude.Types.Left', E6} -> (fun (V25) -> {'Idris.Prelude.Types.Left', V25} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V26) -> case V26 of {'Idris.Builtin.MkPair', E8, E9} -> (fun (V27, V28) -> begin (V29 = (('un--checkPiInfo'(V0, V1, V2, V3, V4, V10, V6, V7, V8, V11, {'Idris.Prelude.Types.Just', ('Idris.Idris2.Core.Normalise':'un--gnf'(V0, V8, V27))}))(V23))), case V29 of {'Idris.Prelude.Types.Left', E10} -> (fun (V30) -> {'Idris.Prelude.Types.Left', V30} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V31) -> begin (V32 = {'Idris.Core.Env.::', {'Idris.Core.TT.Pi', V9, V10, V31, V27}, V8}), begin (V33 = ('Idris.Idris2.TTImp.TTImp':'dn--un--weaken_Weaken__NestedNames'('erased', 'erased', ('un--dropName'('erased', V12, V7))))), begin (V35 = ('Idris.Idris2.TTImp.Elab.Check':'un--inScope'('erased', V12, V0, V1, V4, V9, V32, fun (V34) -> ('Idris.Idris2.TTImp.Elab.Check':'un--check'([V12 | V0], V1, V2, V3, V34, V22, V6, V33, V32, V14, {'Idris.Prelude.Types.Just', ('Idris.Idris2.Core.Normalise':'un--gType'('erased', V9))})) end, V23))), case V35 of {'Idris.Prelude.Types.Left', E12} -> (fun (V36) -> {'Idris.Prelude.Types.Left', V36} end(E12)); {'Idris.Prelude.Types.Right', E13} -> (fun (V37) -> case V37 of {'Idris.Builtin.MkPair', E14, E15} -> (fun (V38, V39) -> (('Idris.Idris2.TTImp.Elab.Check':'un--checkExp'(V0, V1, V3, V4, V5, V6, V8, V9, {'Idris.Core.TT.Bind', V9, V12, {'Idris.Core.TT.Pi', ('Idris.Idris2.TTImp.TTImp':'un--getFC'(V13)), V10, V31, V27}, V38}, ('Idris.Idris2.Core.Normalise':'un--gType'('erased', V9)), V15))(V23)) end(E14, E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E8, E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end.
'un--checkLet'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15) -> begin (V24 = ('case--checkLet-11555'(V0, V15, V14, V13, V12, V11, V10, V9, V8, V7, V6, V5, V4, V3, V2, V1, ('Idris.Idris2.Algebra.Semiring':'un--isErased'('erased', {'Idris.Builtin.MkPair', {'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V16) -> fun (V17) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring__ZeroOneOmega'(V16, V17)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring__ZeroOneOmega'()), fun (V18) -> fun (V19) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring__ZeroOneOmega'(V18, V19)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring__ZeroOneOmega'())}, {'Idris.Prelude.EqOrd.dn--un--__mkEq', fun (V20) -> fun (V21) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--==_Eq__ZeroOneOmega'(V20, V21)) end end, fun (V22) -> fun (V23) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--/=_Eq__ZeroOneOmega'(V22, V23)) end end}}, V5))))), fun (V25) -> begin (V30 = (('Idris.Idris2.TTImp.Elab.Check':'un--check'(V0, V1, V2, V3, V4, ('Idris.Idris2.Algebra.Semiring':'un--erased'('erased', {'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V26) -> fun (V27) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring__ZeroOneOmega'(V26, V27)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring__ZeroOneOmega'()), fun (V28) -> fun (V29) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring__ZeroOneOmega'(V28, V29)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring__ZeroOneOmega'())})), V6, V7, V8, V12, {'Idris.Prelude.Types.Just', ('Idris.Idris2.Core.Normalise':'un--gType'('erased', V9))}))(V25))), case V30 of {'Idris.Prelude.Types.Left', E0} -> (fun (V31) -> {'Idris.Prelude.Types.Left', V31} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V32) -> case V32 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V33, V34) -> begin (V47 = ('Idris.Idris2.TTImp.Elab.Check':'un--handle'('erased', V0, V1, V2, V3, V4, fun (V35) -> begin (V42 = ('Idris.Idris2.TTImp.Elab.Delayed':'un--runDelays'('erased', V0, V1, V2, V3, V4, 0, ('Idris.Idris2.TTImp.Elab.Check':'un--check'(V0, V1, V2, V3, V4, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring__ZeroOneOmega'(V10, V24)), case V6 of {'Idris.TTImp.Elab.Check.MkElabInfo', E4, E5, E6, E7, E8, E9} -> (fun (V36, V37, V38, V39, V40, V41) -> {'Idris.TTImp.Elab.Check.MkElabInfo', V36, V37, V38, V39, 0, V41} end(E4, E5, E6, E7, E8, E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V7, V8, V13, {'Idris.Prelude.Types.Just', ('Idris.Idris2.Core.Normalise':'un--gnf'(V0, V8, V33))})), V35))), case V42 of {'Idris.Prelude.Types.Left', E10} -> (fun (V43) -> {'Idris.Prelude.Types.Left', V43} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V44) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', ('Idris.Idris2.Builtin':'un--fst'('erased', 'erased', V44)), {'Idris.Builtin.MkPair', ('Idris.Idris2.Builtin':'un--snd'('erased', 'erased', V44)), ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring__ZeroOneOmega'(V10, V24))}}} end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end, fun (V45) -> begin (V46 = {'Idris.Builtin.MkPair', V33, V34}), ('case--case block in checkLet-11965'(V0, V15, V14, V13, V12, V11, V10, V9, V8, V7, V6, V5, V4, V3, V2, V1, V24, V33, V34, V46, V45, ('nested--10943-11510--in--un--linearErr'(V0, V15, V14, V13, V12, V11, V10, V9, V8, V7, V6, V5, V4, V3, V2, V1, V45)))) end end, V25))), case V47 of {'Idris.Prelude.Types.Left', E12} -> (fun (V48) -> {'Idris.Prelude.Types.Left', V48} end(E12)); {'Idris.Prelude.Types.Right', E13} -> (fun (V49) -> case V49 of {'Idris.Builtin.MkPair', E14, E15} -> (fun (V50, V51) -> case V51 of {'Idris.Builtin.MkPair', E16, E17} -> (fun (V52, V53) -> begin (V54 = {'Idris.Core.Env.::', {'Idris.Core.TT.Lam', V9, V53, {'Idris.Core.TT.Explicit'}, V33}, V8}), begin (V55 = ('Idris.Idris2.TTImp.TTImp':'dn--un--weaken_Weaken__NestedNames'('erased', 'erased', ('un--dropName'('erased', V11, V7))))), begin (V56 = (('un--weakenExp'(V11, V0, V54, V15))(V25))), case V56 of {'Idris.Prelude.Types.Left', E18} -> (fun (V57) -> {'Idris.Prelude.Types.Left', V57} end(E18)); {'Idris.Prelude.Types.Right', E19} -> (fun (V58) -> begin (V60 = ('Idris.Idris2.TTImp.Elab.Check':'un--inScope'('erased', V11, V0, V1, V4, V9, V54, fun (V59) -> ('Idris.Idris2.TTImp.Elab.Check':'un--check'([V11 | V0], V1, V2, V3, V59, V24, V6, V55, V54, V14, V58)) end, V25))), case V60 of {'Idris.Prelude.Types.Left', E20} -> (fun (V61) -> {'Idris.Prelude.Types.Left', V61} end(E20)); {'Idris.Prelude.Types.Right', E21} -> (fun (V62) -> case V62 of {'Idris.Builtin.MkPair', E22, E23} -> (fun (V63, V64) -> begin (V65 = (('Idris.Idris2.Core.Normalise':'un--getTerm'('erased', V64))(V25))), case V65 of {'Idris.Prelude.Types.Left', E24} -> (fun (V66) -> {'Idris.Prelude.Types.Left', V66} end(E24)); {'Idris.Prelude.Types.Right', E25} -> (fun (V67) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', {'Idris.Core.TT.Bind', V9, V11, {'Idris.Core.TT.Let', V9, V53, V50, V33}, V63}, ('Idris.Idris2.Core.Normalise':'un--gnf'(V0, V8, {'Idris.Core.TT.Bind', V9, V11, {'Idris.Core.TT.Let', V9, V53, V50, V33}, V67}))}} end(E25)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E22, E23)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E19)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end(E16, E17)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E14, E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end.
'un--checkLambda'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15) -> case V15 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> begin (V24 = ('case--checkLambda-10809'(V0, V14, V13, V12, V11, V10, V9, V8, V7, V6, V5, V4, V3, V2, V1, ('Idris.Idris2.Algebra.Semiring':'un--isErased'('erased', {'Idris.Builtin.MkPair', {'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V16) -> fun (V17) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring__ZeroOneOmega'(V16, V17)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring__ZeroOneOmega'()), fun (V18) -> fun (V19) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring__ZeroOneOmega'(V18, V19)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring__ZeroOneOmega'())}, {'Idris.Prelude.EqOrd.dn--un--__mkEq', fun (V20) -> fun (V21) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--==_Eq__ZeroOneOmega'(V20, V21)) end end, fun (V22) -> fun (V23) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--/=_Eq__ZeroOneOmega'(V22, V23)) end end}}, V5))))), fun (V25) -> ('un--inferLambda'(V0, V1, V2, V3, V4, V24, V6, V7, V8, V9, V10, V11, V12, V13, V14, {'Idris.Prelude.Types.Nothing'}, V25)) end end end()); {'Idris.Prelude.Types.Just', E0} -> (fun (V26) -> begin (V35 = ('case--checkLambda-10898'(V0, V26, V14, V13, V12, V11, V10, V9, V8, V7, V6, V5, V4, V3, V2, V1, ('Idris.Idris2.Algebra.Semiring':'un--isErased'('erased', {'Idris.Builtin.MkPair', {'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V27) -> fun (V28) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring__ZeroOneOmega'(V27, V28)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring__ZeroOneOmega'()), fun (V29) -> fun (V30) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring__ZeroOneOmega'(V29, V30)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring__ZeroOneOmega'())}, {'Idris.Prelude.EqOrd.dn--un--__mkEq', fun (V31) -> fun (V32) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--==_Eq__ZeroOneOmega'(V31, V32)) end end, fun (V33) -> fun (V34) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--/=_Eq__ZeroOneOmega'(V33, V34)) end end}}, V5))))), begin (V42 = ('case--checkLambda-10973'(V0, V26, V14, V13, V12, V11, V10, V9, V8, V7, V6, V5, V4, V3, V2, V1, V35, case V6 of {'Idris.TTImp.Elab.Check.MkElabInfo', E1, E2, E3, E4, E5, E6} -> (fun (V36, V37, V38, V39, V40, V41) -> V36 end(E1, E2, E3, E4, E5, E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), fun (V43) -> begin (V44 = ('Idris.Idris2.Core.Unify':'un--solveConstraints'(V1, V3, V42, {'Idris.Core.Unify.Normal'}, V43))), case V44 of {'Idris.Prelude.Types.Left', E7} -> (fun (V45) -> {'Idris.Prelude.Types.Left', V45} end(E7)); {'Idris.Prelude.Types.Right', E8} -> (fun (V46) -> begin (V47 = (('Idris.Idris2.Core.Normalise':'un--getTerm'('erased', V26))(V43))), case V47 of {'Idris.Prelude.Types.Left', E9} -> (fun (V48) -> {'Idris.Prelude.Types.Left', V48} end(E9)); {'Idris.Prelude.Types.Right', E10} -> (fun (V49) -> begin (V50 = (('un--getTyNF'(V0, V1, V8, V49))(V43))), case V50 of {'Idris.Prelude.Types.Left', E11} -> (fun (V51) -> {'Idris.Prelude.Types.Left', V51} end(E11)); {'Idris.Prelude.Types.Right', E12} -> (fun (V52) -> begin (V81 = begin (V80 = (('Idris.Idris2.Erlang.Data.IORef':'un--readIORef'('erased', 'erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V53) -> fun (V54) -> fun (V55) -> fun (V56) -> fun (V57) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor__IO'('erased', 'erased', V55, V56, V57)) end end end end end, fun (V58) -> fun (V59) -> fun (V60) -> V59 end end end, fun (V61) -> fun (V62) -> fun (V63) -> fun (V64) -> fun (V65) -> begin (V66 = (V63(V65))), begin (V67 = (V64(V65))), (V66(V67)) end end end end end end end}, fun (V68) -> fun (V69) -> fun (V70) -> fun (V71) -> fun (V72) -> begin (V73 = (V70(V72))), ((V71(V73))(V72)) end end end end end end, fun (V74) -> fun (V75) -> fun (V76) -> begin (V77 = (V75(V76))), (V77(V76)) end end end end}, fun (V78) -> fun (V79) -> V79 end end}, V1))(V43))), {'Idris.Prelude.Types.Right', V80} end), case V81 of {'Idris.Prelude.Types.Left', E13} -> (fun (V82) -> {'Idris.Prelude.Types.Left', V82} end(E13)); {'Idris.Prelude.Types.Right', E14} -> (fun (V83) -> case V52 of {'Idris.Core.TT.Bind', E15, E16, E17, E18} -> (fun (V84, V85, V86, V87) -> case V86 of {'Idris.Core.TT.Pi', E19, E20, E21, E22} -> (fun (V88, V89, V90, V91) -> begin (V96 = (('Idris.Idris2.TTImp.Elab.Check':'un--check'(V0, V1, V2, V3, V4, ('Idris.Idris2.Algebra.Semiring':'un--erased'('erased', {'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V92) -> fun (V93) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring__ZeroOneOmega'(V92, V93)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring__ZeroOneOmega'()), fun (V94) -> fun (V95) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring__ZeroOneOmega'(V94, V95)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring__ZeroOneOmega'())})), V6, V7, V8, V13, {'Idris.Prelude.Types.Just', ('Idris.Idris2.Core.Normalise':'un--gType'('erased', V9))}))(V43))), case V96 of {'Idris.Prelude.Types.Left', E23} -> (fun (V97) -> {'Idris.Prelude.Types.Left', V97} end(E23)); {'Idris.Prelude.Types.Right', E24} -> (fun (V98) -> begin (V99 = {'Idris.Core.TT.Bind', V84, V85, {'Idris.Core.TT.Pi', V88, V89, V90, V91}, V87}), case V98 of {'Idris.Builtin.MkPair', E25, E26} -> (fun (V100, V101) -> begin (V102 = (('un--checkPiInfo'(V0, V1, V2, V3, V4, V10, V6, V7, V8, V11, {'Idris.Prelude.Types.Just', ('Idris.Idris2.Core.Normalise':'un--gnf'(V0, V8, V100))}))(V43))), case V102 of {'Idris.Prelude.Types.Left', E27} -> (fun (V103) -> {'Idris.Prelude.Types.Left', V103} end(E27)); {'Idris.Prelude.Types.Right', E28} -> (fun (V104) -> begin (V113 = ('Idris.Idris2.Algebra.Preorder':'un--glb'('erased', {'Idris.Algebra.Preorder.dn--un--__mkPreorder', fun (V105) -> fun (V106) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--<=_Preorder__ZeroOneOmega'(V105, V106)) end end, fun (V107) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--preorderRefl_Preorder__ZeroOneOmega'(V107)) end, fun (V108) -> fun (V109) -> fun (V110) -> fun (V111) -> fun (V112) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--preorderTrans_Preorder__ZeroOneOmega'(V108, V109, V110, V111, V112)) end end end end end}, V10, V89))), begin (V114 = {'Idris.Core.Env.::', {'Idris.Core.TT.Lam', V9, V113, V104, V100}, V8}), begin (V115 = (('Idris.Idris2.TTImp.Elab.Check':'un--convertP'(V0, V1, V3, V4, 0, V9, V6, V8, ('Idris.Idris2.Core.Normalise':'un--gnf'(V0, V8, V100)), ('Idris.Idris2.Core.Normalise':'un--gnf'(V0, V8, V91))))(V43))), case V115 of {'Idris.Prelude.Types.Left', E29} -> (fun (V116) -> {'Idris.Prelude.Types.Left', V116} end(E29)); {'Idris.Prelude.Types.Right', E30} -> (fun (V117) -> begin (V118 = ('Idris.Idris2.TTImp.TTImp':'dn--un--weaken_Weaken__NestedNames'('erased', 'erased', ('un--dropName'('erased', V12, V7))))), begin (V120 = ('Idris.Idris2.TTImp.Elab.Check':'un--inScope'('erased', V12, V0, V1, V4, V9, V114, fun (V119) -> ('Idris.Idris2.TTImp.Elab.Check':'un--check'([V12 | V0], V1, V2, V3, V119, V35, V6, V118, V114, V14, {'Idris.Prelude.Types.Just', ('Idris.Idris2.Core.Normalise':'un--gnf'([V12 | V0], V114, ('Idris.Idris2.Core.TT':'un--renameTop'('erased', 'erased', V12, V87))))})) end, V43))), case V120 of {'Idris.Prelude.Types.Left', E31} -> (fun (V121) -> {'Idris.Prelude.Types.Left', V121} end(E31)); {'Idris.Prelude.Types.Right', E32} -> (fun (V122) -> case V122 of {'Idris.Builtin.MkPair', E33, E34} -> (fun (V123, V124) -> begin (V125 = (('Idris.Idris2.Core.Normalise':'un--logTermNF'(V0, V1, <<"elab.binder"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> <<"Lambda type"/utf8>> end, V8, V99))(V43))), case V125 of {'Idris.Prelude.Types.Left', E35} -> (fun (V126) -> {'Idris.Prelude.Types.Left', V126} end(E35)); {'Idris.Prelude.Types.Right', E36} -> (fun (V127) -> begin (V128 = ('Idris.Idris2.Core.Normalise':'un--logGlueNF'([V12 | V0], V1, <<"elab.binder"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> <<"Got scope type"/utf8>> end, V114, V124, V43))), case V128 of {'Idris.Prelude.Types.Left', E37} -> (fun (V129) -> {'Idris.Prelude.Types.Left', V129} end(E37)); {'Idris.Prelude.Types.Right', E38} -> (fun (V130) -> begin (V131 = (('Idris.Idris2.Core.Normalise':'un--getTerm'('erased', V124))(V43))), case V131 of {'Idris.Prelude.Types.Left', E39} -> (fun (V132) -> {'Idris.Prelude.Types.Left', V132} end(E39)); {'Idris.Prelude.Types.Right', E40} -> (fun (V133) -> (('Idris.Idris2.TTImp.Elab.Check':'un--checkExpP'(V0, V1, V3, V4, V35, 0, V6, V8, V9, {'Idris.Core.TT.Bind', V9, V12, {'Idris.Core.TT.Lam', V88, V113, V104, V100}, V123}, ('Idris.Idris2.Core.Normalise':'un--gnf'(V0, V8, {'Idris.Core.TT.Bind', V9, V12, {'Idris.Core.TT.Pi', V88, V113, V104, V100}, V133})), {'Idris.Prelude.Types.Just', ('Idris.Idris2.Core.Normalise':'un--gnf'(V0, V8, {'Idris.Core.TT.Bind', V9, V85, {'Idris.Core.TT.Pi', V88, V89, V104, V91}, V87}))}))(V43)) end(E40)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E38)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E36)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E33, E34)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E32)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E30)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end(E28)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E25, E26)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E24)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E19, E20, E21, E22)); _ -> ('un--inferLambda'(V0, V1, V2, V3, V4, V35, V6, V7, V8, V9, V10, V11, V12, V13, V14, {'Idris.Prelude.Types.Just', V26}, V43)) end end(E15, E16, E17, E18)); _ -> ('un--inferLambda'(V0, V1, V2, V3, V4, V35, V6, V7, V8, V9, V10, V11, V12, V13, V14, {'Idris.Prelude.Types.Just', V26}, V43)) end end(E14)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E12)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end end(E0)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
