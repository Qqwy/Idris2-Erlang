-module('Idris.Idris2.Core.GetType').
-compile('no_auto_import').
-compile('inline').
-compile({'inline_size',24}).
-export([
  'case--chk-4034'/8,
  'case--chk-3885'/8,
  'case--chk-3771'/9,
  'case--chk-3709'/8,
  'un--getType'/4,
  'un--discharge'/6,
  'un--chkMeta'/6,
  'un--chkConstant'/3,
  'un--chkBinder'/4,
  'un--chk'/4
]).
'case--chk-4034'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V7 of {'Idris.Core.Value.NDelayed', E0, E1, E2} -> (fun (V8, V9, V10) -> fun (V11) -> begin (V40 = begin (V39 = (('Idris.Idris2.Erlang.Data.IORef':'un--readIORef'('erased', 'erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V12) -> fun (V13) -> fun (V14) -> fun (V15) -> fun (V16) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor__IO'('erased', 'erased', V14, V15, V16)) end end end end end, fun (V17) -> fun (V18) -> fun (V19) -> V18 end end end, fun (V20) -> fun (V21) -> fun (V22) -> fun (V23) -> fun (V24) -> begin (V25 = (V22(V24))), begin (V26 = (V23(V24))), (V25(V26)) end end end end end end end}, fun (V27) -> fun (V28) -> fun (V29) -> fun (V30) -> fun (V31) -> begin (V32 = (V29(V31))), ((V30(V32))(V31)) end end end end end end, fun (V33) -> fun (V34) -> fun (V35) -> begin (V36 = (V34(V35))), (V36(V35)) end end end end}, fun (V37) -> fun (V38) -> V38 end end}, V5))(V11))), {'Idris.Prelude.Types.Right', V39} end), case V40 of {'Idris.Prelude.Types.Left', E3} -> (fun (V41) -> {'Idris.Prelude.Types.Left', V41} end(E3)); {'Idris.Prelude.Types.Right', E4} -> (fun (V42) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Core.Normalise':'un--glueBack'(V5, V0, V42, V4, V10))} end(E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0, E1, E2)); _ -> fun (V43) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable__Core_Error'('erased', {'Idris.Core.Core.GenericMsg', V3, <<"Not a delayed type"/utf8>>}, V43)) end end.
'case--chk-3885'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V7 of {'Idris.Core.Value.NBind', E2, E3, E4, E5} -> (fun (V8, V9, V10, V11) -> case V10 of {'Idris.Core.TT.Pi', E8, E9, E10, E11} -> (fun (V12, V13, V14, V15) -> fun (V16) -> begin (V45 = begin (V44 = (('Idris.Idris2.Erlang.Data.IORef':'un--readIORef'('erased', 'erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V17) -> fun (V18) -> fun (V19) -> fun (V20) -> fun (V21) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor__IO'('erased', 'erased', V19, V20, V21)) end end end end end, fun (V22) -> fun (V23) -> fun (V24) -> V23 end end end, fun (V25) -> fun (V26) -> fun (V27) -> fun (V28) -> fun (V29) -> begin (V30 = (V27(V29))), begin (V31 = (V28(V29))), (V30(V31)) end end end end end end end}, fun (V32) -> fun (V33) -> fun (V34) -> fun (V35) -> fun (V36) -> begin (V37 = (V34(V36))), ((V35(V37))(V36)) end end end end end end, fun (V38) -> fun (V39) -> fun (V40) -> begin (V41 = (V39(V40))), (V41(V40)) end end end end}, fun (V42) -> fun (V43) -> V43 end end}, V5))(V16))), {'Idris.Prelude.Types.Right', V44} end), case V45 of {'Idris.Prelude.Types.Left', E12} -> (fun (V46) -> {'Idris.Prelude.Types.Left', V46} end(E12)); {'Idris.Prelude.Types.Right', E13} -> (fun (V47) -> begin (V48 = (('un--chk'(V0, V5, V4, V1))(V16))), case V48 of {'Idris.Prelude.Types.Left', E14} -> (fun (V49) -> {'Idris.Prelude.Types.Left', V49} end(E14)); {'Idris.Prelude.Types.Right', E15} -> (fun (V50) -> begin (V51 = (((V11(V47))(('Idris.Idris2.Core.Normalise':'un--toClosure'('erased', ('Idris.Idris2.Core.Value':'un--defaultOpts'()), V4, V1))))(V16))), case V51 of {'Idris.Prelude.Types.Left', E16} -> (fun (V52) -> {'Idris.Prelude.Types.Left', V52} end(E16)); {'Idris.Prelude.Types.Right', E17} -> (fun (V53) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Core.Normalise':'un--glueBack'(V5, V0, V47, V4, V53))} end(E17)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E8, E9, E10, E11)); _ -> fun (V54) -> begin (V55 = (('Idris.Idris2.Core.Normalise':'un--getTerm'('erased', V6))(V54))), case V55 of {'Idris.Prelude.Types.Left', E6} -> (fun (V56) -> {'Idris.Prelude.Types.Left', V56} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V57) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable__Core_Error'('erased', {'Idris.Core.Core.NotFunctionType', V0, V3, V4, V57}, V54)) end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end(E2, E3, E4, E5)); _ -> fun (V58) -> begin (V59 = (('Idris.Idris2.Core.Normalise':'un--getTerm'('erased', V6))(V58))), case V59 of {'Idris.Prelude.Types.Left', E0} -> (fun (V60) -> {'Idris.Prelude.Types.Left', V60} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V61) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable__Core_Error'('erased', {'Idris.Core.Core.NotFunctionType', V0, V3, V4, V61}, V58)) end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end.
'case--chk-3771'(V0, V1, V2, V3, V4, V5, V6, V7, V8) -> case V8 of {'Idris.Prelude.Types.Just', E0} -> (fun (V9) -> fun (V10) -> begin (V11 = (('Idris.Idris2.Core.Normalise':'un--nf'(V6, V0, V7, V5, ('Idris.Idris2.Core.TT':'un--embed'('erased', 'erased', V9))))(V10))), case V11 of {'Idris.Prelude.Types.Left', E1} -> (fun (V12) -> {'Idris.Prelude.Types.Left', V12} end(E1)); {'Idris.Prelude.Types.Right', E2} -> (fun (V13) -> (('un--chkMeta'(V0, V6, V4, V5, V13, V1))(V10)) end(E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V14) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable__Core_Error'('erased', {'Idris.Core.Core.UndefinedName', V4, V3}, V14)) end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--chk-3709'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V7 of {'Idris.Prelude.Types.Just', E0} -> (fun (V8) -> fun (V9) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Core.Normalise':'un--gnf'(V0, V4, ('Idris.Idris2.Core.TT':'un--embed'('erased', 'erased', V8))))} end end(E0)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V10) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable__Core_Error'('erased', {'Idris.Core.Core.UndefinedName', V3, V1}, V10)) end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--getType'(V0, V1, V2, V3) -> ('un--chk'(V0, V1, V2, V3)).
'un--discharge'(V0, V1, V2, V3, V4, V5) -> case V3 of {'Idris.Core.TT.Lam', E0, E1, E2, E3} -> (fun (V6, V7, V8, V9) -> {'Idris.Core.TT.Bind', V1, V2, {'Idris.Core.TT.Pi', V6, V7, V8, V9}, V5} end(E0, E1, E2, E3)); {'Idris.Core.TT.Let', E4, E5, E6, E7} -> (fun (V10, V11, V12, V13) -> {'Idris.Core.TT.Bind', V1, V2, {'Idris.Core.TT.Let', V10, V11, V12, V13}, V5} end(E4, E5, E6, E7)); {'Idris.Core.TT.Pi', E8, E9, E10, E11} -> (fun (V14, V15, V16, V17) -> V4 end(E8, E9, E10, E11)); {'Idris.Core.TT.PVar', E12, E13, E14, E15} -> (fun (V18, V19, V20, V21) -> {'Idris.Core.TT.Bind', V1, V2, {'Idris.Core.TT.PVTy', V18, V19, V21}, V5} end(E12, E13, E14, E15)); {'Idris.Core.TT.PLet', E16, E17, E18, E19} -> (fun (V22, V23, V24, V25) -> {'Idris.Core.TT.Bind', V1, V2, {'Idris.Core.TT.PLet', V22, V23, V24, V25}, V5} end(E16, E17, E18, E19)); {'Idris.Core.TT.PVTy', E20, E21, E22} -> (fun (V26, V27, V28) -> V4 end(E20, E21, E22)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--chkMeta'(V0, V1, V2, V3, V4, V5) -> case V5 of [] -> fun (V6) -> begin (V35 = begin (V34 = (('Idris.Idris2.Erlang.Data.IORef':'un--readIORef'('erased', 'erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V7) -> fun (V8) -> fun (V9) -> fun (V10) -> fun (V11) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor__IO'('erased', 'erased', V9, V10, V11)) end end end end end, fun (V12) -> fun (V13) -> fun (V14) -> V13 end end end, fun (V15) -> fun (V16) -> fun (V17) -> fun (V18) -> fun (V19) -> begin (V20 = (V17(V19))), begin (V21 = (V18(V19))), (V20(V21)) end end end end end end end}, fun (V22) -> fun (V23) -> fun (V24) -> fun (V25) -> fun (V26) -> begin (V27 = (V24(V26))), ((V25(V27))(V26)) end end end end end end, fun (V28) -> fun (V29) -> fun (V30) -> begin (V31 = (V29(V30))), (V31(V30)) end end end end}, fun (V32) -> fun (V33) -> V33 end end}, V1))(V6))), {'Idris.Prelude.Types.Right', V34} end), case V35 of {'Idris.Prelude.Types.Left', E28} -> (fun (V36) -> {'Idris.Prelude.Types.Left', V36} end(E28)); {'Idris.Prelude.Types.Right', E29} -> (fun (V37) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Core.Normalise':'un--glueBack'(V1, V0, V37, V3, V4))} end(E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end; _ -> case V4 of {'Idris.Core.Value.NBind', E4, E5, E6, E7} -> (fun (V38, V39, V40, V41) -> case V40 of {'Idris.Core.TT.Pi', E12, E13, E14, E15} -> (fun (V42, V43, V44, V45) -> case V5 of [E20 | E21] -> (fun (V46, V47) -> fun (V48) -> begin (V77 = begin (V76 = (('Idris.Idris2.Erlang.Data.IORef':'un--readIORef'('erased', 'erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V49) -> fun (V50) -> fun (V51) -> fun (V52) -> fun (V53) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor__IO'('erased', 'erased', V51, V52, V53)) end end end end end, fun (V54) -> fun (V55) -> fun (V56) -> V55 end end end, fun (V57) -> fun (V58) -> fun (V59) -> fun (V60) -> fun (V61) -> begin (V62 = (V59(V61))), begin (V63 = (V60(V61))), (V62(V63)) end end end end end end end}, fun (V64) -> fun (V65) -> fun (V66) -> fun (V67) -> fun (V68) -> begin (V69 = (V66(V68))), ((V67(V69))(V68)) end end end end end end, fun (V70) -> fun (V71) -> fun (V72) -> begin (V73 = (V71(V72))), (V73(V72)) end end end end}, fun (V74) -> fun (V75) -> V75 end end}, V1))(V48))), {'Idris.Prelude.Types.Right', V76} end), case V77 of {'Idris.Prelude.Types.Left', E22} -> (fun (V78) -> {'Idris.Prelude.Types.Left', V78} end(E22)); {'Idris.Prelude.Types.Right', E23} -> (fun (V79) -> begin (V80 = (('un--chk'(V0, V1, V3, V46))(V48))), case V80 of {'Idris.Prelude.Types.Left', E24} -> (fun (V81) -> {'Idris.Prelude.Types.Left', V81} end(E24)); {'Idris.Prelude.Types.Right', E25} -> (fun (V82) -> begin (V83 = (((V41(V79))(('Idris.Idris2.Core.Normalise':'un--toClosure'('erased', ('Idris.Idris2.Core.Value':'un--defaultOpts'()), V3, V46))))(V48))), case V83 of {'Idris.Prelude.Types.Left', E26} -> (fun (V84) -> {'Idris.Prelude.Types.Left', V84} end(E26)); {'Idris.Prelude.Types.Right', E27} -> (fun (V85) -> (('un--chkMeta'(V0, V1, V2, V3, V85, V47))(V48)) end(E27)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E25)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E23)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E20, E21)); _ -> fun (V86) -> begin (V115 = begin (V114 = (('Idris.Idris2.Erlang.Data.IORef':'un--readIORef'('erased', 'erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V87) -> fun (V88) -> fun (V89) -> fun (V90) -> fun (V91) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor__IO'('erased', 'erased', V89, V90, V91)) end end end end end, fun (V92) -> fun (V93) -> fun (V94) -> V93 end end end, fun (V95) -> fun (V96) -> fun (V97) -> fun (V98) -> fun (V99) -> begin (V100 = (V97(V99))), begin (V101 = (V98(V99))), (V100(V101)) end end end end end end end}, fun (V102) -> fun (V103) -> fun (V104) -> fun (V105) -> fun (V106) -> begin (V107 = (V104(V106))), ((V105(V107))(V106)) end end end end end end, fun (V108) -> fun (V109) -> fun (V110) -> begin (V111 = (V109(V110))), (V111(V110)) end end end end}, fun (V112) -> fun (V113) -> V113 end end}, V1))(V86))), {'Idris.Prelude.Types.Right', V114} end), case V115 of {'Idris.Prelude.Types.Left', E16} -> (fun (V116) -> {'Idris.Prelude.Types.Left', V116} end(E16)); {'Idris.Prelude.Types.Right', E17} -> (fun (V117) -> begin (V118 = ('Idris.Idris2.Core.Normalise':'dn--un--quote_Quote__NF'(V1, V0, V117, V3, V4, V86))), case V118 of {'Idris.Prelude.Types.Left', E18} -> (fun (V119) -> {'Idris.Prelude.Types.Left', V119} end(E18)); {'Idris.Prelude.Types.Right', E19} -> (fun (V120) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable__Core_Error'('erased', {'Idris.Core.Core.NotFunctionType', V0, V2, V3, V120}, V86)) end(E19)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E17)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end(E12, E13, E14, E15)); _ -> fun (V121) -> begin (V150 = begin (V149 = (('Idris.Idris2.Erlang.Data.IORef':'un--readIORef'('erased', 'erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V122) -> fun (V123) -> fun (V124) -> fun (V125) -> fun (V126) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor__IO'('erased', 'erased', V124, V125, V126)) end end end end end, fun (V127) -> fun (V128) -> fun (V129) -> V128 end end end, fun (V130) -> fun (V131) -> fun (V132) -> fun (V133) -> fun (V134) -> begin (V135 = (V132(V134))), begin (V136 = (V133(V134))), (V135(V136)) end end end end end end end}, fun (V137) -> fun (V138) -> fun (V139) -> fun (V140) -> fun (V141) -> begin (V142 = (V139(V141))), ((V140(V142))(V141)) end end end end end end, fun (V143) -> fun (V144) -> fun (V145) -> begin (V146 = (V144(V145))), (V146(V145)) end end end end}, fun (V147) -> fun (V148) -> V148 end end}, V1))(V121))), {'Idris.Prelude.Types.Right', V149} end), case V150 of {'Idris.Prelude.Types.Left', E8} -> (fun (V151) -> {'Idris.Prelude.Types.Left', V151} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V152) -> begin (V153 = ('Idris.Idris2.Core.Normalise':'dn--un--quote_Quote__NF'(V1, V0, V152, V3, V4, V121))), case V153 of {'Idris.Prelude.Types.Left', E10} -> (fun (V154) -> {'Idris.Prelude.Types.Left', V154} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V155) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable__Core_Error'('erased', {'Idris.Core.Core.NotFunctionType', V0, V2, V3, V155}, V121)) end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end(E4, E5, E6, E7)); _ -> fun (V156) -> begin (V185 = begin (V184 = (('Idris.Idris2.Erlang.Data.IORef':'un--readIORef'('erased', 'erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V157) -> fun (V158) -> fun (V159) -> fun (V160) -> fun (V161) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor__IO'('erased', 'erased', V159, V160, V161)) end end end end end, fun (V162) -> fun (V163) -> fun (V164) -> V163 end end end, fun (V165) -> fun (V166) -> fun (V167) -> fun (V168) -> fun (V169) -> begin (V170 = (V167(V169))), begin (V171 = (V168(V169))), (V170(V171)) end end end end end end end}, fun (V172) -> fun (V173) -> fun (V174) -> fun (V175) -> fun (V176) -> begin (V177 = (V174(V176))), ((V175(V177))(V176)) end end end end end end, fun (V178) -> fun (V179) -> fun (V180) -> begin (V181 = (V179(V180))), (V181(V180)) end end end end}, fun (V182) -> fun (V183) -> V183 end end}, V1))(V156))), {'Idris.Prelude.Types.Right', V184} end), case V185 of {'Idris.Prelude.Types.Left', E0} -> (fun (V186) -> {'Idris.Prelude.Types.Left', V186} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V187) -> begin (V188 = ('Idris.Idris2.Core.Normalise':'dn--un--quote_Quote__NF'(V1, V0, V187, V3, V4, V156))), case V188 of {'Idris.Prelude.Types.Left', E2} -> (fun (V189) -> {'Idris.Prelude.Types.Left', V189} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V190) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable__Core_Error'('erased', {'Idris.Core.Core.NotFunctionType', V0, V2, V3, V190}, V156)) end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end.
'un--chkConstant'(V0, V1, V2) -> case V2 of {'Idris.Core.TT.I', E0} -> (fun (V3) -> {'Idris.Core.TT.PrimVal', V1, {'Idris.Core.TT.IntType'}} end(E0)); {'Idris.Core.TT.BI', E1} -> (fun (V4) -> {'Idris.Core.TT.PrimVal', V1, {'Idris.Core.TT.IntegerType'}} end(E1)); {'Idris.Core.TT.B8', E2} -> (fun (V5) -> {'Idris.Core.TT.PrimVal', V1, {'Idris.Core.TT.Bits8Type'}} end(E2)); {'Idris.Core.TT.B16', E3} -> (fun (V6) -> {'Idris.Core.TT.PrimVal', V1, {'Idris.Core.TT.Bits16Type'}} end(E3)); {'Idris.Core.TT.B32', E4} -> (fun (V7) -> {'Idris.Core.TT.PrimVal', V1, {'Idris.Core.TT.Bits32Type'}} end(E4)); {'Idris.Core.TT.B64', E5} -> (fun (V8) -> {'Idris.Core.TT.PrimVal', V1, {'Idris.Core.TT.Bits64Type'}} end(E5)); {'Idris.Core.TT.Str', E6} -> (fun (V9) -> {'Idris.Core.TT.PrimVal', V1, {'Idris.Core.TT.StringType'}} end(E6)); {'Idris.Core.TT.Ch', E7} -> (fun (V10) -> {'Idris.Core.TT.PrimVal', V1, {'Idris.Core.TT.CharType'}} end(E7)); {'Idris.Core.TT.Db', E8} -> (fun (V11) -> {'Idris.Core.TT.PrimVal', V1, {'Idris.Core.TT.DoubleType'}} end(E8)); {'Idris.Core.TT.WorldVal'} -> (fun () -> {'Idris.Core.TT.PrimVal', V1, {'Idris.Core.TT.WorldType'}} end()); _ -> {'Idris.Core.TT.TType', V1} end.
'un--chkBinder'(V0, V1, V2, V3) -> ('un--chk'(V0, V1, V2, ('Idris.Idris2.Core.TT':'un--binderType'('erased', V3)))).
'un--chk'(V0, V1, V2, V3) -> case V3 of {'Idris.Core.TT.Local', E0, E1, E2} -> (fun (V4, V5, V6) -> fun (V7) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Core.Normalise':'un--gnf'(V0, V2, ('Idris.Idris2.Core.TT':'un--binderType'('erased', ('Idris.Idris2.Core.Env':'un--getBinder'('erased', 'erased', {'Idris.Core.TT.dn--un--__mkWeaken', fun (V8) -> fun (V9) -> fun (V10) -> ('Idris.Idris2.Core.TT':'dn--un--weaken_Weaken__Term'('erased', 'erased', V10)) end end end, fun (V11) -> fun (V12) -> fun (V13) -> fun (V14) -> ('Idris.Idris2.Core.TT':'dn--un--weakenNs_Weaken__Term'('erased', 'erased', V13, V14)) end end end end}, V0, V6, 'erased', V2))))))} end end(E0, E1, E2)); {'Idris.Core.TT.Ref', E3, E4, E5} -> (fun (V15, V16, V17) -> fun (V18) -> begin (V47 = begin (V46 = (('Idris.Idris2.Erlang.Data.IORef':'un--readIORef'('erased', 'erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V19) -> fun (V20) -> fun (V21) -> fun (V22) -> fun (V23) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor__IO'('erased', 'erased', V21, V22, V23)) end end end end end, fun (V24) -> fun (V25) -> fun (V26) -> V25 end end end, fun (V27) -> fun (V28) -> fun (V29) -> fun (V30) -> fun (V31) -> begin (V32 = (V29(V31))), begin (V33 = (V30(V31))), (V32(V33)) end end end end end end end}, fun (V34) -> fun (V35) -> fun (V36) -> fun (V37) -> fun (V38) -> begin (V39 = (V36(V38))), ((V37(V39))(V38)) end end end end end end, fun (V40) -> fun (V41) -> fun (V42) -> begin (V43 = (V41(V42))), (V43(V42)) end end end end}, fun (V44) -> fun (V45) -> V45 end end}, V1))(V18))), {'Idris.Prelude.Types.Right', V46} end), case V47 of {'Idris.Prelude.Types.Left', E6} -> (fun (V48) -> {'Idris.Prelude.Types.Left', V48} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V49) -> begin (V76 = ('Idris.Idris2.Core.Context':'un--lookupTyExact'(V17, case V49 of {'Idris.Core.Context.MkDefs', E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33} -> (fun (V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62, V63, V64, V65, V66, V67, V68, V69, V70, V71, V72, V73, V74, V75) -> V50 end(E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V18))), case V76 of {'Idris.Prelude.Types.Left', E34} -> (fun (V77) -> {'Idris.Prelude.Types.Left', V77} end(E34)); {'Idris.Prelude.Types.Right', E35} -> (fun (V78) -> case V78 of {'Idris.Prelude.Types.Just', E36} -> (fun (V79) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Core.Normalise':'un--gnf'(V0, V2, ('Idris.Idris2.Core.TT':'un--embed'('erased', 'erased', V79))))} end(E36)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable__Core_Error'('erased', {'Idris.Core.Core.UndefinedName', V15, V17}, V18)) end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E35)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E3, E4, E5)); {'Idris.Core.TT.Meta', E37, E38, E39, E40} -> (fun (V80, V81, V82, V83) -> fun (V84) -> begin (V113 = begin (V112 = (('Idris.Idris2.Erlang.Data.IORef':'un--readIORef'('erased', 'erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V85) -> fun (V86) -> fun (V87) -> fun (V88) -> fun (V89) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor__IO'('erased', 'erased', V87, V88, V89)) end end end end end, fun (V90) -> fun (V91) -> fun (V92) -> V91 end end end, fun (V93) -> fun (V94) -> fun (V95) -> fun (V96) -> fun (V97) -> begin (V98 = (V95(V97))), begin (V99 = (V96(V97))), (V98(V99)) end end end end end end end}, fun (V100) -> fun (V101) -> fun (V102) -> fun (V103) -> fun (V104) -> begin (V105 = (V102(V104))), ((V103(V105))(V104)) end end end end end end, fun (V106) -> fun (V107) -> fun (V108) -> begin (V109 = (V107(V108))), (V109(V108)) end end end end}, fun (V110) -> fun (V111) -> V111 end end}, V1))(V84))), {'Idris.Prelude.Types.Right', V112} end), case V113 of {'Idris.Prelude.Types.Left', E41} -> (fun (V114) -> {'Idris.Prelude.Types.Left', V114} end(E41)); {'Idris.Prelude.Types.Right', E42} -> (fun (V115) -> begin (V142 = ('Idris.Idris2.Core.Context':'un--lookupTyExact'({'Idris.Core.Name.Resolved', V82}, case V115 of {'Idris.Core.Context.MkDefs', E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57, E58, E59, E60, E61, E62, E63, E64, E65, E66, E67, E68} -> (fun (V116, V117, V118, V119, V120, V121, V122, V123, V124, V125, V126, V127, V128, V129, V130, V131, V132, V133, V134, V135, V136, V137, V138, V139, V140, V141) -> V116 end(E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57, E58, E59, E60, E61, E62, E63, E64, E65, E66, E67, E68)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V84))), case V142 of {'Idris.Prelude.Types.Left', E69} -> (fun (V143) -> {'Idris.Prelude.Types.Left', V143} end(E69)); {'Idris.Prelude.Types.Right', E70} -> (fun (V144) -> case V144 of {'Idris.Prelude.Types.Just', E71} -> (fun (V145) -> begin (V146 = (('Idris.Idris2.Core.Normalise':'un--nf'(V1, V0, V115, V2, ('Idris.Idris2.Core.TT':'un--embed'('erased', 'erased', V145))))(V84))), case V146 of {'Idris.Prelude.Types.Left', E72} -> (fun (V147) -> {'Idris.Prelude.Types.Left', V147} end(E72)); {'Idris.Prelude.Types.Right', E73} -> (fun (V148) -> (('un--chkMeta'(V0, V1, V80, V2, V148, V83))(V84)) end(E73)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E71)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable__Core_Error'('erased', {'Idris.Core.Core.UndefinedName', V80, V81}, V84)) end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E70)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E42)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E37, E38, E39, E40)); {'Idris.Core.TT.Bind', E74, E75, E76, E77} -> (fun (V149, V150, V151, V152) -> fun (V153) -> begin (V154 = (('un--chkBinder'(V0, V1, V2, V151))(V153))), case V154 of {'Idris.Prelude.Types.Left', E78} -> (fun (V155) -> {'Idris.Prelude.Types.Left', V155} end(E78)); {'Idris.Prelude.Types.Right', E79} -> (fun (V156) -> begin (V157 = (('un--chk'([V150 | V0], V1, {'Idris.Core.Env.::', V151, V2}, V152))(V153))), case V157 of {'Idris.Prelude.Types.Left', E80} -> (fun (V158) -> {'Idris.Prelude.Types.Left', V158} end(E80)); {'Idris.Prelude.Types.Right', E81} -> (fun (V159) -> begin (V160 = (('Idris.Idris2.Core.Normalise':'un--getTerm'('erased', V156))(V153))), case V160 of {'Idris.Prelude.Types.Left', E82} -> (fun (V161) -> {'Idris.Prelude.Types.Left', V161} end(E82)); {'Idris.Prelude.Types.Right', E83} -> (fun (V162) -> begin (V163 = (('Idris.Idris2.Core.Normalise':'un--getTerm'('erased', V159))(V153))), case V163 of {'Idris.Prelude.Types.Left', E84} -> (fun (V164) -> {'Idris.Prelude.Types.Left', V164} end(E84)); {'Idris.Prelude.Types.Right', E85} -> (fun (V165) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Core.Normalise':'un--gnf'(V0, V2, ('un--discharge'('erased', V149, V150, V151, V162, V165))))} end(E85)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E83)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E81)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E79)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E74, E75, E76, E77)); {'Idris.Core.TT.App', E86, E87, E88} -> (fun (V166, V167, V168) -> fun (V169) -> begin (V170 = (('un--chk'(V0, V1, V2, V167))(V169))), case V170 of {'Idris.Prelude.Types.Left', E89} -> (fun (V171) -> {'Idris.Prelude.Types.Left', V171} end(E89)); {'Idris.Prelude.Types.Right', E90} -> (fun (V172) -> begin (V173 = (('Idris.Idris2.Core.Normalise':'un--getNF'('erased', V1, V172))(V169))), case V173 of {'Idris.Prelude.Types.Left', E91} -> (fun (V174) -> {'Idris.Prelude.Types.Left', V174} end(E91)); {'Idris.Prelude.Types.Right', E92} -> (fun (V175) -> case V175 of {'Idris.Core.Value.NBind', E95, E96, E97, E98} -> (fun (V176, V177, V178, V179) -> case V178 of {'Idris.Core.TT.Pi', E101, E102, E103, E104} -> (fun (V180, V181, V182, V183) -> begin (V212 = begin (V211 = (('Idris.Idris2.Erlang.Data.IORef':'un--readIORef'('erased', 'erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V184) -> fun (V185) -> fun (V186) -> fun (V187) -> fun (V188) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor__IO'('erased', 'erased', V186, V187, V188)) end end end end end, fun (V189) -> fun (V190) -> fun (V191) -> V190 end end end, fun (V192) -> fun (V193) -> fun (V194) -> fun (V195) -> fun (V196) -> begin (V197 = (V194(V196))), begin (V198 = (V195(V196))), (V197(V198)) end end end end end end end}, fun (V199) -> fun (V200) -> fun (V201) -> fun (V202) -> fun (V203) -> begin (V204 = (V201(V203))), ((V202(V204))(V203)) end end end end end end, fun (V205) -> fun (V206) -> fun (V207) -> begin (V208 = (V206(V207))), (V208(V207)) end end end end}, fun (V209) -> fun (V210) -> V210 end end}, V1))(V169))), {'Idris.Prelude.Types.Right', V211} end), case V212 of {'Idris.Prelude.Types.Left', E105} -> (fun (V213) -> {'Idris.Prelude.Types.Left', V213} end(E105)); {'Idris.Prelude.Types.Right', E106} -> (fun (V214) -> begin (V215 = (('un--chk'(V0, V1, V2, V168))(V169))), case V215 of {'Idris.Prelude.Types.Left', E107} -> (fun (V216) -> {'Idris.Prelude.Types.Left', V216} end(E107)); {'Idris.Prelude.Types.Right', E108} -> (fun (V217) -> begin (V218 = (((V179(V214))(('Idris.Idris2.Core.Normalise':'un--toClosure'('erased', ('Idris.Idris2.Core.Value':'un--defaultOpts'()), V2, V168))))(V169))), case V218 of {'Idris.Prelude.Types.Left', E109} -> (fun (V219) -> {'Idris.Prelude.Types.Left', V219} end(E109)); {'Idris.Prelude.Types.Right', E110} -> (fun (V220) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Core.Normalise':'un--glueBack'(V1, V0, V214, V2, V220))} end(E110)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E108)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E106)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E101, E102, E103, E104)); _ -> begin (V221 = (('Idris.Idris2.Core.Normalise':'un--getTerm'('erased', V172))(V169))), case V221 of {'Idris.Prelude.Types.Left', E99} -> (fun (V222) -> {'Idris.Prelude.Types.Left', V222} end(E99)); {'Idris.Prelude.Types.Right', E100} -> (fun (V223) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable__Core_Error'('erased', {'Idris.Core.Core.NotFunctionType', V0, V166, V2, V223}, V169)) end(E100)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E95, E96, E97, E98)); _ -> begin (V224 = (('Idris.Idris2.Core.Normalise':'un--getTerm'('erased', V172))(V169))), case V224 of {'Idris.Prelude.Types.Left', E93} -> (fun (V225) -> {'Idris.Prelude.Types.Left', V225} end(E93)); {'Idris.Prelude.Types.Right', E94} -> (fun (V226) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable__Core_Error'('erased', {'Idris.Core.Core.NotFunctionType', V0, V166, V2, V226}, V169)) end(E94)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E92)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E90)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E86, E87, E88)); {'Idris.Core.TT.As', E111, E112, E113, E114} -> (fun (V227, V228, V229, V230) -> ('un--chk'(V0, V1, V2, V230)) end(E111, E112, E113, E114)); {'Idris.Core.TT.TDelayed', E115, E116, E117} -> (fun (V231, V232, V233) -> fun (V234) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Core.Normalise':'un--gType'('erased', V231))} end end(E115, E116, E117)); {'Idris.Core.TT.TDelay', E118, E119, E120, E121} -> (fun (V235, V236, V237, V238) -> fun (V239) -> begin (V240 = (('un--chk'(V0, V1, V2, V238))(V239))), case V240 of {'Idris.Prelude.Types.Left', E122} -> (fun (V241) -> {'Idris.Prelude.Types.Left', V241} end(E122)); {'Idris.Prelude.Types.Right', E123} -> (fun (V242) -> begin (V243 = (('Idris.Idris2.Core.Normalise':'un--getNF'('erased', V1, V242))(V239))), case V243 of {'Idris.Prelude.Types.Left', E124} -> (fun (V244) -> {'Idris.Prelude.Types.Left', V244} end(E124)); {'Idris.Prelude.Types.Right', E125} -> (fun (V245) -> begin (V274 = begin (V273 = (('Idris.Idris2.Erlang.Data.IORef':'un--readIORef'('erased', 'erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V246) -> fun (V247) -> fun (V248) -> fun (V249) -> fun (V250) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor__IO'('erased', 'erased', V248, V249, V250)) end end end end end, fun (V251) -> fun (V252) -> fun (V253) -> V252 end end end, fun (V254) -> fun (V255) -> fun (V256) -> fun (V257) -> fun (V258) -> begin (V259 = (V256(V258))), begin (V260 = (V257(V258))), (V259(V260)) end end end end end end end}, fun (V261) -> fun (V262) -> fun (V263) -> fun (V264) -> fun (V265) -> begin (V266 = (V263(V265))), ((V264(V266))(V265)) end end end end end end, fun (V267) -> fun (V268) -> fun (V269) -> begin (V270 = (V268(V269))), (V270(V269)) end end end end}, fun (V271) -> fun (V272) -> V272 end end}, V1))(V239))), {'Idris.Prelude.Types.Right', V273} end), case V274 of {'Idris.Prelude.Types.Left', E126} -> (fun (V275) -> {'Idris.Prelude.Types.Left', V275} end(E126)); {'Idris.Prelude.Types.Right', E127} -> (fun (V276) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Core.Normalise':'un--glueBack'(V1, V0, V276, V2, {'Idris.Core.Value.NDelayed', V235, V236, V245}))} end(E127)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E125)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E123)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E118, E119, E120, E121)); {'Idris.Core.TT.TForce', E128, E129, E130} -> (fun (V277, V278, V279) -> fun (V280) -> begin (V281 = (('un--chk'(V0, V1, V2, V279))(V280))), case V281 of {'Idris.Prelude.Types.Left', E131} -> (fun (V282) -> {'Idris.Prelude.Types.Left', V282} end(E131)); {'Idris.Prelude.Types.Right', E132} -> (fun (V283) -> begin (V284 = (('Idris.Idris2.Core.Normalise':'un--getNF'('erased', V1, V283))(V280))), case V284 of {'Idris.Prelude.Types.Left', E133} -> (fun (V285) -> {'Idris.Prelude.Types.Left', V285} end(E133)); {'Idris.Prelude.Types.Right', E134} -> (fun (V286) -> case V286 of {'Idris.Core.Value.NDelayed', E135, E136, E137} -> (fun (V287, V288, V289) -> begin (V318 = begin (V317 = (('Idris.Idris2.Erlang.Data.IORef':'un--readIORef'('erased', 'erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V290) -> fun (V291) -> fun (V292) -> fun (V293) -> fun (V294) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor__IO'('erased', 'erased', V292, V293, V294)) end end end end end, fun (V295) -> fun (V296) -> fun (V297) -> V296 end end end, fun (V298) -> fun (V299) -> fun (V300) -> fun (V301) -> fun (V302) -> begin (V303 = (V300(V302))), begin (V304 = (V301(V302))), (V303(V304)) end end end end end end end}, fun (V305) -> fun (V306) -> fun (V307) -> fun (V308) -> fun (V309) -> begin (V310 = (V307(V309))), ((V308(V310))(V309)) end end end end end end, fun (V311) -> fun (V312) -> fun (V313) -> begin (V314 = (V312(V313))), (V314(V313)) end end end end}, fun (V315) -> fun (V316) -> V316 end end}, V1))(V280))), {'Idris.Prelude.Types.Right', V317} end), case V318 of {'Idris.Prelude.Types.Left', E138} -> (fun (V319) -> {'Idris.Prelude.Types.Left', V319} end(E138)); {'Idris.Prelude.Types.Right', E139} -> (fun (V320) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Core.Normalise':'un--glueBack'(V1, V0, V320, V2, V289))} end(E139)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E135, E136, E137)); _ -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable__Core_Error'('erased', {'Idris.Core.Core.GenericMsg', V277, <<"Not a delayed type"/utf8>>}, V280)) end end(E134)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E132)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E128, E129, E130)); {'Idris.Core.TT.PrimVal', E140, E141} -> (fun (V321, V322) -> fun (V323) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Core.Normalise':'un--gnf'(V0, V2, ('un--chkConstant'('erased', V321, V322))))} end end(E140, E141)); {'Idris.Core.TT.TType', E142} -> (fun (V324) -> fun (V325) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Core.Normalise':'un--gType'('erased', V324))} end end(E142)); {'Idris.Core.TT.Erased', E143, E144} -> (fun (V326, V327) -> fun (V328) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Core.Normalise':'un--gErased'('erased', V326))} end end(E143, E144)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
