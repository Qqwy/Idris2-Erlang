-module('Idris.Idris2.TTImp.Elab.App').
-compile('no_auto_import').
-compile('inline').
-compile({'inline_size',24}).
-export([
  'case--checkApp-11894'/15,
  'case--case block in checkApp-11702'/27,
  'case--checkApp-11516'/16,
  'case--case block in checkApp,updateElabInfo-11404'/22,
  'case--checkApp,updateElabInfo-11347'/23,
  'case--case block in case block in checkApp,normalisePrims-11116'/24,
  'case--case block in checkApp,normalisePrims-11066'/21,
  'case--checkApp,normalisePrims-11020'/21,
  'case--case block in checkAppWith-10748'/38,
  'case--checkAppWith-10595'/27,
  'case--checkAppWith-10408'/17,
  'case--checkAppWith-10227'/25,
  'case--checkAppWith,useImp-10084'/28,
  'case--checkAppWith-9934'/24,
  'case--checkAppWith,useImp-9793'/27,
  'case--checkAppWith-9644'/24,
  'case--checkAppWith,useAutoImp-9503'/27,
  'case--case block in checkAppWith-9237'/33,
  'case--checkAppWith-9164'/25,
  'case--checkAppWith-9000'/24,
  'case--case block in checkAppWith-8819'/25,
  'case--checkAppWith-8703'/24,
  'case--case block in checkRestApp-8477'/30,
  'case--case block in case block in case block in case block in checkRestApp-8105'/51,
  'case--case block in case block in case block in case block in case block in checkRestApp-7785'/51,
  'case--case block in case block in case block in case block in checkRestApp-7670'/50,
  'case--case block in case block in case block in checkRestApp-7501'/43,
  'case--case block in case block in checkRestApp-7365'/37,
  'case--case block in checkRestApp-7232'/30,
  'case--checkRestApp-7144'/27,
  'case--checkRestApp-7036'/24,
  'case--case block in case block in case block in dotErased-6884'/13,
  'case--case block in case block in dotErased-6856'/11,
  'case--case block in dotErased-6794'/10,
  'case--dotErased-6749'/9,
  'case--dotErased,dotTerm-6582'/9,
  'case--case block in case block in dotErased,countConstructors-6422'/17,
  'case--case block in dotErased,countConstructors-6389'/15,
  'case--dotErased,countConstructors-6344'/14,
  'case--case block in case block in checkPatTyValid-6189'/16,
  'case--case block in checkPatTyValid-6145'/15,
  'case--checkPatTyValid-6109'/13,
  'case--needsDelayExpr-5898'/5,
  'case--makeDefImplicit-5651'/23,
  'case--makeAutoImplicit-5388'/22,
  'case--case block in case block in getVarType-4826'/18,
  'case--case block in getVarType-4753'/16,
  'case--case block in getVarType-4664'/10,
  'case--getVarType-4631'/10,
  'case--case block in case block in getNameType-4316'/16,
  'case--case block in getNameType-4270'/10,
  'case--case block in getNameType-4189'/16,
  'case--getNameType-4079'/9,
  'case--case block in checkVisibleNS-3972'/10,
  'case--checkVisibleNS-3940'/6,
  'nested--10299-4560--in--un--useVars'/12,
  'nested--11008-10063--in--un--useImp'/25,
  'nested--11008-9772--in--un--useImp'/24,
  'nested--11008-9465--in--un--useAutoImp'/24,
  'nested--17517-10971--in--un--updateElabInfo'/20,
  'nested--9751-4053--in--un--rigSafe'/11,
  'nested--11008-10372--in--un--notInfer'/17,
  'nested--17517-10970--in--un--normalisePrims'/20,
  'nested--10983-5641--in--un--metavarImp'/23,
  'nested--10977-5378--in--un--metavarImp'/22,
  'nested--17517-10968--in--un--isPrimName'/17,
  'nested--10999-6329--in--un--dotTerm'/9,
  'nested--10999-6328--in--un--countConstructors'/9,
  'nested--17517-10969--in--un--boundSafe'/17,
  'un--onLHS'/1,
  'un--needsDelayLHS'/2,
  'un--needsDelayExpr'/3,
  'un--needsDelay'/4,
  'un--makeImplicit'/20,
  'un--makeDefImplicit'/21,
  'un--makeAutoImplicit'/20,
  'un--isHole'/2,
  'un--getVarType'/9,
  'un--getNameType'/8,
  'un--dotErased'/8,
  'un--concrete'/4,
  'un--checkVisibleNS'/4,
  'un--checkRestApp'/21,
  'un--checkPatTyValid'/8,
  'un--checkAppWith'/17,
  'un--checkApp'/14
]).
'case--checkApp-11894'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14) -> case V14 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V15, V16) -> fun (V17) -> begin (V18 = (('Idris.Idris2.Core.Normalise':'un--getNF'('erased', V13, V16))(V17))), case V18 of {'Idris.Prelude.Types.Left', E2} -> (fun (V19) -> {'Idris.Prelude.Types.Left', V19} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V20) -> (('un--checkAppWith'(V0, V13, V12, V11, V10, V9, V8, V7, V6, V5, V15, V20, {'Idris.Builtin.MkPair', {'Idris.Prelude.Types.Nothing'}, 0}, V3, V2, 1, V1))(V17)) end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in checkApp-11702'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26) -> case V26 of {'Idris.Prelude.Types.Just', E0} -> (fun (V27) -> case V27 of {'Idris.Builtin.MkPair', E1, E2} -> (fun (V28, V29) -> case V28 of {'Idris.Prelude.Types.Just', E3} -> (fun (V30) -> V30 end(E3)); _ -> V1 end end(E1, E2)); _ -> V1 end end(E0)); _ -> V1 end.
'case--checkApp-11516'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15) -> case V15 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V16, V17) -> case V17 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V18, V19) -> fun (V20) -> begin (V21 = (('Idris.Idris2.Core.Normalise':'un--getNF'('erased', V14, V19))(V20))), case V21 of {'Idris.Prelude.Types.Left', E4} -> (fun (V22) -> {'Idris.Prelude.Types.Left', V22} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V23) -> begin (V24 = ('Idris.Idris2.Core.Context':'un--fromIntegerName'(V14, V20))), case V24 of {'Idris.Prelude.Types.Left', E6} -> (fun (V25) -> {'Idris.Prelude.Types.Left', V25} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V26) -> begin (V27 = ('Idris.Idris2.Core.Context':'un--fromStringName'(V14, V20))), case V27 of {'Idris.Prelude.Types.Left', E8} -> (fun (V28) -> {'Idris.Prelude.Types.Left', V28} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V29) -> begin (V30 = ('Idris.Idris2.Core.Context':'un--fromCharName'(V14, V20))), case V30 of {'Idris.Prelude.Types.Left', E10} -> (fun (V31) -> {'Idris.Prelude.Types.Left', V31} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V32) -> begin (V34 = ('Idris.Idris2.Data.List':'un--mapMaybe'('erased', 'erased', fun (V33) -> V33 end, [V26 | [V29 | [V32 | []]]]))), begin (V41 = (('nested--17517-10971--in--un--updateElabInfo'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V34, case V9 of {'Idris.TTImp.Elab.Check.MkElabInfo', E12, E13, E14, E15, E16, E17} -> (fun (V35, V36, V37, V38, V39, V40) -> V35 end(E12, E13, E14, E15, E16, E17)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V1, V5, V9))(V20))), case V41 of {'Idris.Prelude.Types.Left', E18} -> (fun (V42) -> {'Idris.Prelude.Types.Left', V42} end(E18)); {'Idris.Prelude.Types.Right', E19} -> (fun (V43) -> begin (V114 = ('Idris.Idris2.Core.Context.Log':'un--logC'(V14, <<"elab"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun (V44) -> begin (V73 = begin (V72 = (('Idris.Idris2.Erlang.Data.IORef':'un--readIORef'('erased', 'erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V45) -> fun (V46) -> fun (V47) -> fun (V48) -> fun (V49) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor__IO'('erased', 'erased', V47, V48, V49)) end end end end end, fun (V50) -> fun (V51) -> fun (V52) -> V51 end end end, fun (V53) -> fun (V54) -> fun (V55) -> fun (V56) -> fun (V57) -> begin (V58 = (V55(V57))), begin (V59 = (V56(V57))), (V58(V59)) end end end end end end end}, fun (V60) -> fun (V61) -> fun (V62) -> fun (V63) -> fun (V64) -> begin (V65 = (V62(V64))), ((V63(V65))(V64)) end end end end end end, fun (V66) -> fun (V67) -> fun (V68) -> begin (V69 = (V67(V68))), (V69(V68)) end end end end}, fun (V70) -> fun (V71) -> V71 end end}, V14))(V44))), {'Idris.Prelude.Types.Right', V72} end), case V73 of {'Idris.Prelude.Types.Left', E20} -> (fun (V74) -> {'Idris.Prelude.Types.Left', V74} end(E20)); {'Idris.Prelude.Types.Right', E21} -> (fun (V75) -> begin (V76 = ('Idris.Idris2.Core.Normalise':'dn--un--quote_Quote__NF'(V14, V0, V75, V7, V23, V44))), case V76 of {'Idris.Prelude.Types.Left', E22} -> (fun (V77) -> {'Idris.Prelude.Types.Left', V77} end(E22)); {'Idris.Prelude.Types.Right', E23} -> (fun (V78) -> begin (V95 = (('Idris.Idris2.Prelude.Types':'un--maybe'('erased', 'erased', fun () -> fun (V79) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}} end end, fun () -> fun (V80) -> fun (V81) -> begin (V82 = (('Idris.Idris2.Core.Normalise':'un--getTerm'('erased', V80))(V81))), case V82 of {'Idris.Prelude.Types.Left', E24} -> (fun (V83) -> {'Idris.Prelude.Types.Left', V83} end(E24)); {'Idris.Prelude.Types.Right', E25} -> (fun (V84) -> begin (V85 = ('Idris.Idris2.Core.Normalise':'un--normaliseHoles'(V14, V0, V75, V7, V84, V81))), case V85 of {'Idris.Prelude.Types.Left', E26} -> (fun (V86) -> {'Idris.Prelude.Types.Left', V86} end(E26)); {'Idris.Prelude.Types.Right', E27} -> (fun (V87) -> begin (V92 = ('Idris.Idris2.Core.Context':'un--toFullNames'('erased', V14, {'Idris.Core.Context.dn--un--__mkHasNames', fun (V88) -> fun (V89) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames__(Term $vars)'('erased', V88, V89)) end end, fun (V90) -> fun (V91) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames__(Term $vars)'('erased', V90, V91)) end end}, V87, V81))), case V92 of {'Idris.Prelude.Types.Left', E28} -> (fun (V93) -> {'Idris.Prelude.Types.Left', V93} end(E28)); {'Idris.Prelude.Types.Right', E29} -> (fun (V94) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Just', V94}} end(E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E27)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E25)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end, V3))(V44))), case V95 of {'Idris.Prelude.Types.Left', E30} -> (fun (V96) -> {'Idris.Prelude.Types.Left', V96} end(E30)); {'Idris.Prelude.Types.Right', E31} -> (fun (V97) -> begin (V98 = (('Idris.Idris2.Core.Context':'un--getFullName'(V14, V1))(V44))), case V98 of {'Idris.Prelude.Types.Left', E32} -> (fun (V99) -> {'Idris.Prelude.Types.Left', V99} end(E32)); {'Idris.Prelude.Types.Right', E33} -> (fun (V100) -> begin (V105 = ('Idris.Idris2.Core.Context':'un--toFullNames'('erased', V14, {'Idris.Core.Context.dn--un--__mkHasNames', fun (V101) -> fun (V102) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames__(Term $vars)'('erased', V101, V102)) end end, fun (V103) -> fun (V104) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames__(Term $vars)'('erased', V103, V104)) end end}, V78, V44))), case V105 of {'Idris.Prelude.Types.Left', E34} -> (fun (V106) -> {'Idris.Prelude.Types.Left', V106} end(E34)); {'Idris.Prelude.Types.Right', E35} -> (fun (V107) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"Checking application of "/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show__Name'(V100)), ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<" ("/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show__Name'(V1)), ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<")"/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<" to "/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show__(List $a)'('erased', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V108) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--show_Show__RawImp'(V108)) end, fun (V109) -> fun (V110) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--showPrec_Show__RawImp'(V109, V110)) end end}, V5)), ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"\x{a}\x{9}Function type "/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('Idris.Idris2.Core.TT':'dn--un--show_Show__(Term $vars)'(V0, V107)), ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"\x{a}\x{9}Expected app type "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show__(Maybe $a)'('erased', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V111) -> ('Idris.Idris2.Core.TT':'dn--un--show_Show__(Term $vars)'(V0, V111)) end, fun (V112) -> fun (V113) -> ('Idris.Idris2.Core.TT':'dn--un--showPrec_Show__(Term $vars)'(V0, V112, V113)) end end}, V97))))))))))))))))))))))} end(E35)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E33)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E23)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end, V20))), case V114 of {'Idris.Prelude.Types.Left', E36} -> (fun (V115) -> {'Idris.Prelude.Types.Left', V115} end(E36)); {'Idris.Prelude.Types.Right', E37} -> (fun (V116) -> begin (V122 = begin (V117 = {'Idris.Builtin.MkPair', V16, {'Idris.Builtin.MkPair', V18, V19}}), ('case--case block in checkApp-11702'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V16, V18, V19, V117, V23, V26, V29, V32, V34, V43, V116, ('Idris.Idris2.Data.List':'un--lookup'('erased', 'erased', {'Idris.Prelude.EqOrd.dn--un--__mkEq', fun (V118) -> fun (V119) -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq__Name'(V118, V119)) end end, fun (V120) -> fun (V121) -> ('Idris.Idris2.Core.Name':'dn--un--/=_Eq__Name'(V120, V121)) end end}, V1, V8)))) end), begin (V123 = (('un--checkAppWith'(V0, V14, V13, V12, V11, V10, V43, V8, V7, V6, V16, V23, {'Idris.Builtin.MkPair', {'Idris.Prelude.Types.Just', V122}, V18}, V5, V4, 1, V3))(V20))), case V123 of {'Idris.Prelude.Types.Left', E38} -> (fun (V124) -> {'Idris.Prelude.Types.Left', V124} end(E38)); {'Idris.Prelude.Types.Right', E39} -> (fun (V125) -> ('nested--17517-10970--in--un--normalisePrims'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V0, V34, V7, V125, V20)) end(E39)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E37)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E19)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in checkApp,updateElabInfo-11404'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21) -> case V18 of {'Idris.TTImp.Elab.Check.MkElabInfo', E0, E1, E2, E3, E4, E5} -> (fun (V22, V23, V24, V25, V26, V27) -> {'Idris.TTImp.Elab.Check.MkElabInfo', {'Idris.TTImp.Elab.Check.InExpr'}, V23, V24, V25, V26, V27} end(E0, E1, E2, E3, E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--checkApp,updateElabInfo-11347'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22) -> case V22 of 0 -> fun (V23) -> {'Idris.Prelude.Types.Right', case V18 of {'Idris.TTImp.Elab.Check.MkElabInfo', E0, E1, E2, E3, E4, E5} -> (fun (V24, V25, V26, V27, V28, V29) -> {'Idris.TTImp.Elab.Check.MkElabInfo', {'Idris.TTImp.Elab.Check.InExpr'}, V25, V26, V27, V28, V29} end(E0, E1, E2, E3, E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end} end; 1 -> fun (V30) -> {'Idris.Prelude.Types.Right', V18} end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in case block in checkApp,normalisePrims-11116'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23) -> case V23 of 0 -> fun (V24) -> begin (V53 = begin (V52 = (('Idris.Idris2.Erlang.Data.IORef':'un--readIORef'('erased', 'erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V25) -> fun (V26) -> fun (V27) -> fun (V28) -> fun (V29) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor__IO'('erased', 'erased', V27, V28, V29)) end end end end end, fun (V30) -> fun (V31) -> fun (V32) -> V31 end end end, fun (V33) -> fun (V34) -> fun (V35) -> fun (V36) -> fun (V37) -> begin (V38 = (V35(V37))), begin (V39 = (V36(V37))), (V38(V39)) end end end end end end end}, fun (V40) -> fun (V41) -> fun (V42) -> fun (V43) -> fun (V44) -> begin (V45 = (V42(V44))), ((V43(V45))(V44)) end end end end end end, fun (V46) -> fun (V47) -> fun (V48) -> begin (V49 = (V47(V48))), (V49(V48)) end end end end}, fun (V50) -> fun (V51) -> V51 end end}, V14))(V24))), {'Idris.Prelude.Types.Right', V52} end), case V53 of {'Idris.Prelude.Types.Left', E0} -> (fun (V54) -> {'Idris.Prelude.Types.Left', V54} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V55) -> begin (V56 = ('Idris.Idris2.Core.Normalise':'un--normalise'(V14, V15, V55, V17, ('Idris.Idris2.Builtin':'un--fst'('erased', 'erased', V16)), V24))), case V56 of {'Idris.Prelude.Types.Left', E2} -> (fun (V57) -> {'Idris.Prelude.Types.Left', V57} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V58) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V58, ('Idris.Idris2.Builtin':'un--snd'('erased', 'erased', V16))}} end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end; 1 -> fun (V59) -> {'Idris.Prelude.Types.Right', V16} end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in checkApp,normalisePrims-11066'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20) -> case V20 of [E0 | E1] -> (fun (V21, V22) -> case V21 of {'Idris.TTImp.TTImp.IPrimVal', E2, E3} -> (fun (V23, V24) -> ('case--case block in case block in checkApp,normalisePrims-11116'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V22, V23, V24, ('nested--17517-10969--in--un--boundSafe'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V24, case V9 of {'Idris.TTImp.Elab.Check.MkElabInfo', E4, E5, E6, E7, E8, E9} -> (fun (V25, V26, V27, V28, V29, V30) -> V25 end(E4, E5, E6, E7, E8, E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)))) end(E2, E3)); _ -> fun (V31) -> {'Idris.Prelude.Types.Right', V16} end end end(E0, E1)); _ -> fun (V32) -> {'Idris.Prelude.Types.Right', V16} end end.
'case--checkApp,normalisePrims-11020'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20) -> case V20 of 0 -> ('case--case block in checkApp,normalisePrims-11066'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, ('Idris.Idris2.Data.List':'un--reverse'('erased', V5)))); 1 -> fun (V21) -> {'Idris.Prelude.Types.Right', V16} end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in checkAppWith-10748'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37) -> case V37 of [] -> fun (V38) -> {'Idris.Prelude.Types.Right', V35} end; _ -> fun (V39) -> begin (V40 = (('Idris.Idris2.Core.Normalise':'un--getTerm'('erased', V32))(V39))), case V40 of {'Idris.Prelude.Types.Left', E0} -> (fun (V41) -> {'Idris.Prelude.Types.Left', V41} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V42) -> begin (V43 = (('Idris.Idris2.Core.UnifyState':'un--newConstant'(V4, V16, V18, V10, V14, V11, ('Idris.Idris2.Builtin':'un--fst'('erased', 'erased', V35)), V42, V37))(V39))), case V43 of {'Idris.Prelude.Types.Left', E2} -> (fun (V44) -> {'Idris.Prelude.Types.Left', V44} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V45) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V45, ('Idris.Idris2.Core.Normalise':'un--gnf'(V4, V11, V25))}} end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end.
'case--checkAppWith-10595'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26) -> case V26 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V27, V28) -> begin (V29 = {'Idris.Core.TT.App', V10, V9, V27}), fun (V30) -> begin (V59 = begin (V58 = (('Idris.Idris2.Erlang.Data.IORef':'un--readIORef'('erased', 'erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V31) -> fun (V32) -> fun (V33) -> fun (V34) -> fun (V35) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor__IO'('erased', 'erased', V33, V34, V35)) end end end end end, fun (V36) -> fun (V37) -> fun (V38) -> V37 end end end, fun (V39) -> fun (V40) -> fun (V41) -> fun (V42) -> fun (V43) -> begin (V44 = (V41(V43))), begin (V45 = (V42(V43))), (V44(V45)) end end end end end end end}, fun (V46) -> fun (V47) -> fun (V48) -> fun (V49) -> fun (V50) -> begin (V51 = (V48(V50))), ((V49(V51))(V50)) end end end end end end, fun (V52) -> fun (V53) -> fun (V54) -> begin (V55 = (V53(V54))), (V55(V54)) end end end end}, fun (V56) -> fun (V57) -> V57 end end}, V18))(V30))), {'Idris.Prelude.Types.Right', V58} end), case V59 of {'Idris.Prelude.Types.Left', E2} -> (fun (V60) -> {'Idris.Prelude.Types.Left', V60} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V61) -> begin (V62 = (('Idris.Idris2.Core.Normalise':'un--nf'(V18, V4, V61, V11, V25))(V30))), case V62 of {'Idris.Prelude.Types.Left', E4} -> (fun (V63) -> {'Idris.Prelude.Types.Left', V63} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V64) -> begin (V65 = ('Idris.Idris2.Core.Normalise':'un--gnf'(V4, V11, {'Idris.Core.TT.Bind', V10, V21, {'Idris.Core.TT.Pi', V10, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--top_Top__ZeroOneOmega'()), {'Idris.Core.TT.Explicit'}, V23}, ('Idris.Idris2.Core.TT':'dn--un--weaken_Weaken__Term'('erased', 'erased', V25))}))), begin (V66 = ('Idris.Idris2.Core.Normalise':'un--logGlue'(V4, V18, <<"elab.with"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> <<"Expected function type"/utf8>> end, V11, V65, V30))), case V66 of {'Idris.Prelude.Types.Left', E6} -> (fun (V67) -> {'Idris.Prelude.Types.Left', V67} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V68) -> begin (V72 = (('Idris.Idris2.Prelude.Types':'un--maybe'('erased', 'erased', fun () -> fun (V69) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end end, fun () -> fun (V70) -> fun (V71) -> ('Idris.Idris2.Core.Normalise':'un--logGlue'(V4, V18, <<"elab.with"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> <<"Expected result type"/utf8>> end, V11, V70, V71)) end end end, V5))(V30))), case V72 of {'Idris.Prelude.Types.Left', E8} -> (fun (V73) -> {'Idris.Prelude.Types.Left', V73} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V74) -> begin (V75 = (('un--checkAppWith'(V4, V18, V17, V16, V15, V14, V13, V12, V11, V10, V29, V64, {'Idris.Builtin.MkPair', V0, ('Idris.Idris2.Prelude.Types':'dn--un--+_Num__Nat'(('Idris.Idris2.Prelude.Types':'dn--un--fromInteger_Num__Nat'(1)), V1))}, V3, V7, V6, V5))(V30))), case V75 of {'Idris.Prelude.Types.Left', E10} -> (fun (V76) -> {'Idris.Prelude.Types.Left', V76} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V77) -> begin (V78 = (('Idris.Idris2.TTImp.Elab.Check':'un--convert'(V4, V18, V16, V15, V10, V13, V11, ('Idris.Idris2.Core.Normalise':'un--glueBack'(V18, V4, V61, V11, V8)), V65))(V30))), case V78 of {'Idris.Prelude.Types.Left', E12} -> (fun (V79) -> {'Idris.Prelude.Types.Left', V79} end(E12)); {'Idris.Prelude.Types.Right', E13} -> (fun (V80) -> begin (V81 = {'Idris.Builtin.MkPair', V27, V28}), (('case--case block in checkAppWith-10748'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V27, V28, V81, V29, V61, V64, V65, V68, V74, V77, V80, case V80 of {'Idris.Core.Unify.MkUnifyResult', E14, E15, E16, E17} -> (fun (V82, V83, V84, V85) -> V82 end(E14, E15, E16, E17)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V30)) end end(E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--checkAppWith-10408'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16) -> case V16 of [] -> ('un--checkAppWith'(V0, V15, V14, V13, V12, V11, V10, V9, V8, V7, V6, V5, V4, [], [], V2, V1)); _ -> fun (V17) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable__Core_Error'('erased', {'Idris.Core.Core.InvalidImplicits', V0, V7, V8, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', fun (V18) -> ('Idris.Idris2.Builtin':'un--fst'('erased', 'erased', V18)) end, V16)), V6}, V17)) end end.
'case--checkAppWith-10227'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24) -> case V24 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> ('un--makeDefImplicit'(V0, V22, V21, V20, V19, V18, V23, V17, V16, V15, V14, V13, V6, V2, V3, V5, V12, V11, V10, V9, V8)) end()); {'Idris.Prelude.Types.Just', E0} -> (fun (V25) -> case V25 of {'Idris.Builtin.MkPair', E1, E2} -> (fun (V26, V27) -> ('un--checkRestApp'(V0, V22, V21, V20, V19, V18, V23, V17, V16, V15, V14, V13, V6, V3, V5, V12, V26, V11, V27, V9, V8)) end(E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--checkAppWith,useImp-10084'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27) -> case V27 of 0 -> {'Idris.Prelude.Types.Just', {'Idris.Builtin.MkPair', V24, ('Idris.Idris2.Prelude.Types.List':'un--++'('erased', ('Idris.Idris2.Data.List':'un--reverse'('erased', V26)), V25))}}; 1 -> ('nested--11008-10063--in--un--useImp'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, [{'Idris.Builtin.MkPair', {'Idris.Prelude.Types.Just', V23}, V24} | V26], V25)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--checkAppWith-9934'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23) -> case V23 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> ('un--makeImplicit'(V0, V21, V20, V19, V18, V17, V22, V16, V15, V14, V13, V12, V5, V2, V4, V11, V10, V9, V8, V7)) end()); {'Idris.Prelude.Types.Just', E0} -> (fun (V24) -> case V24 of {'Idris.Builtin.MkPair', E1, E2} -> (fun (V25, V26) -> ('un--checkRestApp'(V0, V21, V20, V19, V18, V17, V22, V16, V15, V14, V13, V12, V5, V2, V4, V11, V25, V10, V26, V8, V7)) end(E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--checkAppWith,useImp-9793'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26) -> case V26 of 0 -> {'Idris.Prelude.Types.Just', {'Idris.Builtin.MkPair', V23, ('Idris.Idris2.Prelude.Types.List':'un--++'('erased', ('Idris.Idris2.Data.List':'un--reverse'('erased', V25)), V24))}}; 1 -> ('nested--11008-9772--in--un--useImp'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, [{'Idris.Builtin.MkPair', {'Idris.Prelude.Types.Just', V22}, V23} | V25], V24)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--checkAppWith-9644'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23) -> case V23 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> ('un--makeAutoImplicit'(V0, V21, V20, V19, V18, V17, V22, V16, V15, V14, V13, V12, V5, V2, V4, V11, V10, V9, V8, V7)) end()); {'Idris.Prelude.Types.Just', E0} -> (fun (V24) -> case V24 of {'Idris.Builtin.MkPair', E1, E2} -> (fun (V25, V26) -> ('un--checkRestApp'(V0, V21, V20, V19, V18, V17, V22, V16, V15, V14, V13, V12, V5, V2, V4, V11, V25, V10, V26, V8, V7)) end(E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--checkAppWith,useAutoImp-9503'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26) -> case V26 of 0 -> {'Idris.Prelude.Types.Just', {'Idris.Builtin.MkPair', V23, ('Idris.Idris2.Prelude.Types.List':'un--++'('erased', ('Idris.Idris2.Data.List':'un--reverse'('erased', V25)), V24))}}; 1 -> ('nested--11008-9465--in--un--useAutoImp'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, [{'Idris.Builtin.MkPair', {'Idris.Prelude.Types.Just', V22}, V23} | V25], V24)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in checkAppWith-9237'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32) -> case V32 of 0 -> ('Idris.Idris2.TTImp.Elab.Check':'un--checkExp'(V0, V21, V19, V18, V17, V16, V14, V13, V12, ('Idris.Idris2.Core.Normalise':'un--glueBack'(V21, V0, V24, V14, V11)), {'Idris.Prelude.Types.Just', V2})); 1 -> ('un--makeDefImplicit'(V0, V21, V20, V19, V18, V17, V22, V16, V15, V14, V13, V12, V9, V5, V6, V8, V4, [], [], V3, {'Idris.Prelude.Types.Just', V2})); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--checkAppWith-9164'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24) -> case V23 of {'Idris.Core.Value.NBind', E0, E1, E2, E3} -> (fun (V25, V26, V27, V28) -> case V27 of {'Idris.Core.TT.Pi', E4, E5, E6, E7} -> (fun (V29, V30, V31, V32) -> case V31 of {'Idris.Core.TT.DefImplicit', E8} -> (fun (V33) -> fun (V34) -> begin (V35 = ('Idris.Idris2.Core.Normalise':'dn--un--convert_Convert__NF'(V21, V0, V24, V14, V5, V33, V34))), case V35 of {'Idris.Prelude.Types.Left', E9} -> (fun (V36) -> {'Idris.Prelude.Types.Left', V36} end(E9)); {'Idris.Prelude.Types.Right', E10} -> (fun (V37) -> case V37 of 0 -> (('Idris.Idris2.TTImp.Elab.Check':'un--checkExp'(V0, V21, V19, V18, V17, V16, V14, V13, V12, ('Idris.Idris2.Core.Normalise':'un--glueBack'(V21, V0, V24, V14, V11)), {'Idris.Prelude.Types.Just', V2}))(V34)); 1 -> (('un--makeDefImplicit'(V0, V21, V20, V19, V18, V17, V22, V16, V15, V14, V13, V12, V9, V5, V6, V8, V4, [], [], V3, {'Idris.Prelude.Types.Just', V2}))(V34)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E8)); _ -> ('un--makeDefImplicit'(V0, V21, V20, V19, V18, V17, V22, V16, V15, V14, V13, V12, V9, V5, V6, V8, V4, [], [], V3, {'Idris.Prelude.Types.Just', V2})) end end(E4, E5, E6, E7)); _ -> ('un--makeDefImplicit'(V0, V21, V20, V19, V18, V17, V22, V16, V15, V14, V13, V12, V9, V5, V6, V8, V4, [], [], V3, {'Idris.Prelude.Types.Just', V2})) end end(E0, E1, E2, E3)); _ -> ('un--makeDefImplicit'(V0, V21, V20, V19, V18, V17, V22, V16, V15, V14, V13, V12, V9, V5, V6, V8, V4, [], [], V3, {'Idris.Prelude.Types.Just', V2})) end.
'case--checkAppWith-9000'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23) -> case V22 of {'Idris.Core.Value.NBind', E0, E1, E2, E3} -> (fun (V24, V25, V26, V27) -> case V26 of {'Idris.Core.TT.Pi', E4, E5, E6, E7} -> (fun (V28, V29, V30, V31) -> case V30 of {'Idris.Core.TT.AutoImplicit'} -> (fun () -> ('Idris.Idris2.TTImp.Elab.Check':'un--checkExp'(V0, V20, V18, V17, V16, V15, V13, V12, V11, ('Idris.Idris2.Core.Normalise':'un--glueBack'(V20, V0, V23, V13, V10)), {'Idris.Prelude.Types.Just', V2})) end()); _ -> ('un--makeAutoImplicit'(V0, V20, V19, V18, V17, V16, V21, V15, V14, V13, V12, V11, V8, V5, V7, V4, [], [], V3, {'Idris.Prelude.Types.Just', V2})) end end(E4, E5, E6, E7)); _ -> ('un--makeAutoImplicit'(V0, V20, V19, V18, V17, V16, V21, V15, V14, V13, V12, V11, V8, V5, V7, V4, [], [], V3, {'Idris.Prelude.Types.Just', V2})) end end(E0, E1, E2, E3)); _ -> ('un--makeAutoImplicit'(V0, V20, V19, V18, V17, V16, V21, V15, V14, V13, V12, V11, V8, V5, V7, V4, [], [], V3, {'Idris.Prelude.Types.Just', V2})) end.
'case--case block in checkAppWith-8819'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24) -> case V24 of 0 -> ('un--makeImplicit'(V0, V20, V19, V18, V17, V16, V21, V15, V14, V13, V12, V11, V8, V5, V7, V4, [], [], V3, {'Idris.Prelude.Types.Just', V2})); 1 -> fun (V25) -> ('Idris.Idris2.TTImp.Elab.Check':'un--handle'('erased', V0, V20, V19, V18, V17, ('Idris.Idris2.TTImp.Elab.Check':'un--checkExp'(V0, V20, V18, V17, V16, V15, V13, V12, V11, ('Idris.Idris2.Core.Normalise':'un--glueBack'(V20, V0, V23, V13, V10)), {'Idris.Prelude.Types.Just', V2})), fun (V26) -> ('un--makeImplicit'(V0, V20, V19, V18, V17, V16, V21, V15, V14, V13, V12, V11, V8, V5, V7, V4, [], [], V3, {'Idris.Prelude.Types.Just', V2})) end, V25)) end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--checkAppWith-8703'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23) -> case V22 of {'Idris.Core.Value.NBind', E6, E7, E8, E9} -> (fun (V24, V25, V26, V27) -> case V26 of {'Idris.Core.TT.Pi', E16, E17, E18, E19} -> (fun (V28, V29, V30, V31) -> case V30 of {'Idris.Core.TT.Implicit'} -> (fun () -> ('Idris.Idris2.TTImp.Elab.Check':'un--checkExp'(V0, V20, V18, V17, V16, V15, V13, V12, V11, ('Idris.Idris2.Core.Normalise':'un--glueBack'(V20, V0, V23, V13, V10)), {'Idris.Prelude.Types.Just', V2})) end()); _ -> ('case--case block in checkAppWith-8819'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, ('Idris.Idris2.Prelude.Basics':'un--not'(case V15 of {'Idris.TTImp.Elab.Check.MkElabInfo', E20, E21, E22, E23, E24, E25} -> (fun (V32, V33, V34, V35, V36, V37) -> V36 end(E20, E21, E22, E23, E24, E25)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)))) end end(E16, E17, E18, E19)); _ -> ('case--case block in checkAppWith-8819'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, ('Idris.Idris2.Prelude.Basics':'un--not'(case V15 of {'Idris.TTImp.Elab.Check.MkElabInfo', E10, E11, E12, E13, E14, E15} -> (fun (V38, V39, V40, V41, V42, V43) -> V42 end(E10, E11, E12, E13, E14, E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)))) end end(E6, E7, E8, E9)); _ -> ('case--case block in checkAppWith-8819'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, ('Idris.Idris2.Prelude.Basics':'un--not'(case V15 of {'Idris.TTImp.Elab.Check.MkElabInfo', E0, E1, E2, E3, E4, E5} -> (fun (V44, V45, V46, V47, V48, V49) -> V48 end(E0, E1, E2, E3, E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)))) end.
'case--case block in checkRestApp-8477'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29) -> case V29 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V30, V31) -> fun (V32) -> begin (V33 = ('Idris.Idris2.Core.Normalise':'un--logGlueNF'(V0, V21, <<"elab"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> <<"Got arg type"/utf8>> end, V13, V31, V32))), case V33 of {'Idris.Prelude.Types.Left', E2} -> (fun (V34) -> {'Idris.Prelude.Types.Left', V34} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V35) -> begin (V64 = begin (V63 = (('Idris.Idris2.Erlang.Data.IORef':'un--readIORef'('erased', 'erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V36) -> fun (V37) -> fun (V38) -> fun (V39) -> fun (V40) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor__IO'('erased', 'erased', V38, V39, V40)) end end end end end, fun (V41) -> fun (V42) -> fun (V43) -> V42 end end end, fun (V44) -> fun (V45) -> fun (V46) -> fun (V47) -> fun (V48) -> begin (V49 = (V46(V48))), begin (V50 = (V47(V48))), (V49(V50)) end end end end end end end}, fun (V51) -> fun (V52) -> fun (V53) -> fun (V54) -> fun (V55) -> begin (V56 = (V53(V55))), ((V54(V56))(V55)) end end end end end end, fun (V57) -> fun (V58) -> fun (V59) -> begin (V60 = (V58(V59))), (V60(V59)) end end end end}, fun (V61) -> fun (V62) -> V62 end end}, V21))(V32))), {'Idris.Prelude.Types.Right', V63} end), case V64 of {'Idris.Prelude.Types.Left', E4} -> (fun (V65) -> {'Idris.Prelude.Types.Left', V65} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V66) -> begin (V67 = {'Idris.Core.TT.App', V12, V11, V30}), begin (V68 = (((V8(V66))(('Idris.Idris2.Core.Normalise':'un--toClosure'('erased', ('Idris.Idris2.Core.Value':'un--defaultOpts'()), V13, V30))))(V32))), case V68 of {'Idris.Prelude.Types.Left', E6} -> (fun (V69) -> {'Idris.Prelude.Types.Left', V69} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V70) -> (('un--checkAppWith'(V0, V21, V20, V19, V18, V17, V15, V14, V13, V12, V67, V70, {'Idris.Builtin.MkPair', V1, ('Idris.Idris2.Prelude.Types':'dn--un--+_Num__Nat'(('Idris.Idris2.Prelude.Types':'dn--un--fromInteger_Num__Nat'(1)), V2))}, V6, V5, V24, V3))(V32)) end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in case block in case block in case block in checkRestApp-8105'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50) -> case V50 of {'Idris.TTImp.Elab.Check.InLHS', E0} -> (fun (V51) -> fun (V52) -> begin (V54 = ('Idris.Idris2.Core.Context':'un--updateDef'(V21, {'Idris.Core.Name.Resolved', V29}, fun (V53) -> {'Idris.Prelude.Types.Just', {'Idris.Core.Context.Hole', 0, ('Idris.Idris2.Core.Context':'un--holeInit'(1))}} end, V52))), case V54 of {'Idris.Prelude.Types.Left', E1} -> (fun (V55) -> {'Idris.Prelude.Types.Left', V55} end(E1)); {'Idris.Prelude.Types.Right', E2} -> (fun (V56) -> begin (V57 = (('Idris.Idris2.Core.Unify':'un--solveIfUndefined'(V0, V21, V19, V13, V30, V42))(V52))), case V57 of {'Idris.Prelude.Types.Left', E3} -> (fun (V58) -> {'Idris.Prelude.Types.Left', V58} end(E3)); {'Idris.Prelude.Types.Right', E4} -> (fun (V59) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end(E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0)); _ -> fun (V60) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end end.
'case--case block in case block in case block in case block in case block in checkRestApp-7785'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50) -> case V50 of [] -> fun (V51) -> {'Idris.Prelude.Types.Right', V36} end; _ -> fun (V52) -> begin (V53 = (('Idris.Idris2.Core.Normalise':'un--getTerm'('erased', V37))(V52))), case V53 of {'Idris.Prelude.Types.Left', E0} -> (fun (V54) -> {'Idris.Prelude.Types.Left', V54} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V55) -> (('Idris.Idris2.Core.UnifyState':'un--newConstant'(V0, V19, V21, V12, V17, V13, V36, V55, V50))(V52)) end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end.
'case--case block in case block in case block in case block in checkRestApp-7670'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47, V48, V49) -> case V49 of 0 -> fun (V50) -> begin (V51 = (('Idris.Idris2.TTImp.Elab.Check':'un--convert'(V0, V21, V19, V18, V12, V15, V13, ('Idris.Idris2.Core.Normalise':'un--gnf'(V0, V13, V30)), ('Idris.Idris2.Core.Normalise':'un--gnf'(V0, V13, V42))))(V50))), case V51 of {'Idris.Prelude.Types.Left', E0} -> (fun (V52) -> {'Idris.Prelude.Types.Left', V52} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V53) -> (('case--case block in case block in case block in case block in case block in checkRestApp-7785'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47, V48, V53, case V53 of {'Idris.Core.Unify.MkUnifyResult', E2, E3, E4, E5} -> (fun (V54, V55, V56, V57) -> V54 end(E2, E3, E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V50)) end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end; 1 -> fun (V58) -> {'Idris.Prelude.Types.Right', V36} end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in case block in case block in checkRestApp-7501'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42) -> case V42 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V43, V44) -> fun (V45) -> begin (V52 = case ('un--onLHS'(case V15 of {'Idris.TTImp.Elab.Check.MkElabInfo', E2, E3, E4, E5, E6, E7} -> (fun (V46, V47, V48, V49, V50, V51) -> V46 end(E2, E3, E4, E5, E6, E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)) of 0 -> (('un--checkPatTyValid'(V0, V21, V12, V39, V13, V40, V43, V44))(V45)); 1 -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end), case V52 of {'Idris.Prelude.Types.Left', E8} -> (fun (V53) -> {'Idris.Prelude.Types.Left', V53} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V54) -> begin (V83 = begin (V82 = (('Idris.Idris2.Erlang.Data.IORef':'un--readIORef'('erased', 'erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V55) -> fun (V56) -> fun (V57) -> fun (V58) -> fun (V59) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor__IO'('erased', 'erased', V57, V58, V59)) end end end end end, fun (V60) -> fun (V61) -> fun (V62) -> V61 end end end, fun (V63) -> fun (V64) -> fun (V65) -> fun (V66) -> fun (V67) -> begin (V68 = (V65(V67))), begin (V69 = (V66(V67))), (V68(V69)) end end end end end end end}, fun (V70) -> fun (V71) -> fun (V72) -> fun (V73) -> fun (V74) -> begin (V75 = (V72(V74))), ((V73(V75))(V74)) end end end end end end, fun (V76) -> fun (V77) -> fun (V78) -> begin (V79 = (V77(V78))), (V79(V78)) end end end end}, fun (V80) -> fun (V81) -> V81 end end}, V21))(V45))), {'Idris.Prelude.Types.Right', V82} end), case V83 of {'Idris.Prelude.Types.Left', E10} -> (fun (V84) -> {'Idris.Prelude.Types.Left', V84} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V85) -> begin (V86 = ('Idris.Idris2.Core.Context.Log':'un--logTerm'(V0, V21, <<"elab"/utf8>>, (1 + (1 + (1 + (1 + (1 + 0))))), fun () -> ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"Solving "/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('Idris.Idris2.Core.TT':'dn--un--show_Show__(Term $vars)'(V0, V30)), <<" with"/utf8>>)))) end, V43, V45))), case V86 of {'Idris.Prelude.Types.Left', E12} -> (fun (V87) -> {'Idris.Prelude.Types.Left', V87} end(E12)); {'Idris.Prelude.Types.Right', E13} -> (fun (V88) -> begin (V89 = (('Idris.Idris2.Core.Unify':'un--solveIfUndefined'(V0, V21, V19, V13, V30, V43))(V45))), case V89 of {'Idris.Prelude.Types.Left', E14} -> (fun (V90) -> {'Idris.Prelude.Types.Left', V90} end(E14)); {'Idris.Prelude.Types.Right', E15} -> (fun (V91) -> begin (V93 = begin (V92 = {'Idris.Builtin.MkPair', V43, V44}), (('case--case block in case block in case block in case block in checkRestApp-7670'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V43, V44, V92, V54, V85, V88, V91, ('Idris.Idris2.Prelude.Basics':'un--not'(V91))))(V45)) end), case V93 of {'Idris.Prelude.Types.Left', E16} -> (fun (V94) -> {'Idris.Prelude.Types.Left', V94} end(E16)); {'Idris.Prelude.Types.Right', E17} -> (fun (V95) -> begin (V103 = begin (V96 = {'Idris.Builtin.MkPair', V43, V44}), (('case--case block in case block in case block in case block in checkRestApp-8105'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V43, V44, V96, V54, V85, V88, V91, V95, case V15 of {'Idris.TTImp.Elab.Check.MkElabInfo', E18, E19, E20, E21, E22, E23} -> (fun (V97, V98, V99, V100, V101, V102) -> V97 end(E18, E19, E20, E21, E22, E23)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V45)) end), case V103 of {'Idris.Prelude.Types.Left', E24} -> (fun (V104) -> {'Idris.Prelude.Types.Left', V104} end(E24)); {'Idris.Prelude.Types.Right', E25} -> (fun (V105) -> begin (V106 = ('Idris.Idris2.Core.UnifyState':'un--removeHole'(V19, V29, V45))), case V106 of {'Idris.Prelude.Types.Left', E26} -> (fun (V107) -> {'Idris.Prelude.Types.Left', V107} end(E26)); {'Idris.Prelude.Types.Right', E27} -> (fun (V108) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V95, V37}} end(E27)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E25)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E17)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in case block in checkRestApp-7365'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36) -> case V36 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V37, V38) -> fun (V39) -> begin (V68 = begin (V67 = (('Idris.Idris2.Erlang.Data.IORef':'un--readIORef'('erased', 'erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V40) -> fun (V41) -> fun (V42) -> fun (V43) -> fun (V44) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor__IO'('erased', 'erased', V42, V43, V44)) end end end end end, fun (V45) -> fun (V46) -> fun (V47) -> V46 end end end, fun (V48) -> fun (V49) -> fun (V50) -> fun (V51) -> fun (V52) -> begin (V53 = (V50(V52))), begin (V54 = (V51(V52))), (V53(V54)) end end end end end end end}, fun (V55) -> fun (V56) -> fun (V57) -> fun (V58) -> fun (V59) -> begin (V60 = (V57(V59))), ((V58(V60))(V59)) end end end end end end, fun (V61) -> fun (V62) -> fun (V63) -> begin (V64 = (V62(V63))), (V64(V63)) end end end end}, fun (V65) -> fun (V66) -> V66 end end}, V21))(V39))), {'Idris.Prelude.Types.Right', V67} end), case V68 of {'Idris.Prelude.Types.Left', E2} -> (fun (V69) -> {'Idris.Prelude.Types.Left', V69} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V70) -> begin (V71 = (('Idris.Idris2.Core.Normalise':'un--nf'(V21, V0, V70, V13, V28))(V39))), case V71 of {'Idris.Prelude.Types.Left', E4} -> (fun (V72) -> {'Idris.Prelude.Types.Left', V72} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V73) -> begin (V74 = ('Idris.Idris2.Core.Normalise':'un--logNF'(V0, V21, <<"elab"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"Now trying "/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show__Name'(V26)), ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<" "/utf8>>, ('Idris.Idris2.TTImp.TTImp':'dn--un--show_Show__RawImp'(V23)))))))) end, V13, V73, V39))), case V74 of {'Idris.Prelude.Types.Left', E6} -> (fun (V75) -> {'Idris.Prelude.Types.Left', V75} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V76) -> begin (V77 = (('Idris.Idris2.TTImp.Elab.Check':'un--check'(V0, V21, V20, V19, V18, V16, V15, V14, V13, V23, {'Idris.Prelude.Types.Just', ('Idris.Idris2.Core.Normalise':'un--glueBack'(V21, V0, V70, V13, V73))}))(V39))), case V77 of {'Idris.Prelude.Types.Left', E8} -> (fun (V78) -> {'Idris.Prelude.Types.Left', V78} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V79) -> begin (V80 = {'Idris.Builtin.MkPair', V37, V38}), case V79 of {'Idris.Builtin.MkPair', E10, E11} -> (fun (V81, V82) -> begin (V89 = case ('un--onLHS'(case V15 of {'Idris.TTImp.Elab.Check.MkElabInfo', E12, E13, E14, E15, E16, E17} -> (fun (V83, V84, V85, V86, V87, V88) -> V83 end(E12, E13, E14, E15, E16, E17)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)) of 0 -> (('un--checkPatTyValid'(V0, V21, V12, V70, V13, V73, V81, V82))(V39)); 1 -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end), case V89 of {'Idris.Prelude.Types.Left', E18} -> (fun (V90) -> {'Idris.Prelude.Types.Left', V90} end(E18)); {'Idris.Prelude.Types.Right', E19} -> (fun (V91) -> begin (V120 = begin (V119 = (('Idris.Idris2.Erlang.Data.IORef':'un--readIORef'('erased', 'erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V92) -> fun (V93) -> fun (V94) -> fun (V95) -> fun (V96) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor__IO'('erased', 'erased', V94, V95, V96)) end end end end end, fun (V97) -> fun (V98) -> fun (V99) -> V98 end end end, fun (V100) -> fun (V101) -> fun (V102) -> fun (V103) -> fun (V104) -> begin (V105 = (V102(V104))), begin (V106 = (V103(V104))), (V105(V106)) end end end end end end end}, fun (V107) -> fun (V108) -> fun (V109) -> fun (V110) -> fun (V111) -> begin (V112 = (V109(V111))), ((V110(V112))(V111)) end end end end end end, fun (V113) -> fun (V114) -> fun (V115) -> begin (V116 = (V114(V115))), (V116(V115)) end end end end}, fun (V117) -> fun (V118) -> V118 end end}, V21))(V39))), {'Idris.Prelude.Types.Right', V119} end), case V120 of {'Idris.Prelude.Types.Left', E20} -> (fun (V121) -> {'Idris.Prelude.Types.Left', V121} end(E20)); {'Idris.Prelude.Types.Right', E21} -> (fun (V122) -> begin (V123 = ('Idris.Idris2.Core.Context.Log':'un--logTerm'(V0, V21, <<"elab"/utf8>>, (1 + (1 + (1 + (1 + (1 + 0))))), fun () -> ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"Solving "/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('Idris.Idris2.Core.TT':'dn--un--show_Show__(Term $vars)'(V0, V30)), <<" with"/utf8>>)))) end, V81, V39))), case V123 of {'Idris.Prelude.Types.Left', E22} -> (fun (V124) -> {'Idris.Prelude.Types.Left', V124} end(E22)); {'Idris.Prelude.Types.Right', E23} -> (fun (V125) -> begin (V126 = (('Idris.Idris2.Core.Unify':'un--solveIfUndefined'(V0, V21, V19, V13, V30, V81))(V39))), case V126 of {'Idris.Prelude.Types.Left', E24} -> (fun (V127) -> {'Idris.Prelude.Types.Left', V127} end(E24)); {'Idris.Prelude.Types.Right', E25} -> (fun (V128) -> begin (V130 = begin (V129 = {'Idris.Builtin.MkPair', V81, V82}), (('case--case block in case block in case block in case block in checkRestApp-7670'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V37, V38, V80, V70, V73, V76, V81, V82, V129, V91, V122, V125, V128, ('Idris.Idris2.Prelude.Basics':'un--not'(V128))))(V39)) end), case V130 of {'Idris.Prelude.Types.Left', E26} -> (fun (V131) -> {'Idris.Prelude.Types.Left', V131} end(E26)); {'Idris.Prelude.Types.Right', E27} -> (fun (V132) -> begin (V140 = begin (V133 = {'Idris.Builtin.MkPair', V81, V82}), (('case--case block in case block in case block in case block in checkRestApp-8105'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V37, V38, V80, V70, V73, V76, V81, V82, V133, V91, V122, V125, V128, V132, case V15 of {'Idris.TTImp.Elab.Check.MkElabInfo', E28, E29, E30, E31, E32, E33} -> (fun (V134, V135, V136, V137, V138, V139) -> V134 end(E28, E29, E30, E31, E32, E33)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V39)) end), case V140 of {'Idris.Prelude.Types.Left', E34} -> (fun (V141) -> {'Idris.Prelude.Types.Left', V141} end(E34)); {'Idris.Prelude.Types.Right', E35} -> (fun (V142) -> begin (V143 = ('Idris.Idris2.Core.UnifyState':'un--removeHole'(V19, V29, V39))), case V143 of {'Idris.Prelude.Types.Left', E36} -> (fun (V144) -> {'Idris.Prelude.Types.Left', V144} end(E36)); {'Idris.Prelude.Types.Right', E37} -> (fun (V145) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V132, V38}} end(E37)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E35)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E27)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E25)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E23)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E19)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E10, E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in checkRestApp-7232'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29) -> case V29 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V30, V31) -> begin (V32 = {'Idris.Core.TT.App', V12, V11, V31}), fun (V33) -> begin (V34 = ('Idris.Idris2.Core.Normalise':'un--logNF'(V0, V21, <<"elab"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"Delaying "/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show__Name'(V26)), ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<" "/utf8>>, ('Idris.Idris2.TTImp.TTImp':'dn--un--show_Show__RawImp'(V23)))))))) end, V13, V9, V33))), case V34 of {'Idris.Prelude.Types.Left', E2} -> (fun (V35) -> {'Idris.Prelude.Types.Left', V35} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V36) -> begin (V37 = ('Idris.Idris2.Core.Context.Log':'un--logTerm'(V0, V21, <<"elab"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> <<"...as"/utf8>> end, V31, V33))), case V37 of {'Idris.Prelude.Types.Left', E4} -> (fun (V38) -> {'Idris.Prelude.Types.Left', V38} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V39) -> begin (V40 = (((V8(V22))(('Idris.Idris2.Core.Normalise':'un--toClosure'('erased', ('Idris.Idris2.Core.Value':'un--defaultOpts'()), V13, V31))))(V33))), case V40 of {'Idris.Prelude.Types.Left', E6} -> (fun (V41) -> {'Idris.Prelude.Types.Left', V41} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V42) -> begin (V43 = (('un--checkAppWith'(V0, V21, V20, V19, V18, V17, V15, V14, V13, V12, V32, V42, {'Idris.Builtin.MkPair', V1, ('Idris.Idris2.Prelude.Types':'dn--un--+_Num__Nat'(('Idris.Idris2.Prelude.Types':'dn--un--fromInteger_Num__Nat'(1)), V2))}, V6, V5, V24, V3))(V33))), case V43 of {'Idris.Prelude.Types.Left', E8} -> (fun (V44) -> {'Idris.Prelude.Types.Left', V44} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V45) -> begin (V46 = {'Idris.Builtin.MkPair', V30, V31}), case V45 of {'Idris.Builtin.MkPair', E10, E11} -> (fun (V47, V48) -> begin (V77 = begin (V76 = (('Idris.Idris2.Erlang.Data.IORef':'un--readIORef'('erased', 'erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V49) -> fun (V50) -> fun (V51) -> fun (V52) -> fun (V53) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor__IO'('erased', 'erased', V51, V52, V53)) end end end end end, fun (V54) -> fun (V55) -> fun (V56) -> V55 end end end, fun (V57) -> fun (V58) -> fun (V59) -> fun (V60) -> fun (V61) -> begin (V62 = (V59(V61))), begin (V63 = (V60(V61))), (V62(V63)) end end end end end end end}, fun (V64) -> fun (V65) -> fun (V66) -> fun (V67) -> fun (V68) -> begin (V69 = (V66(V68))), ((V67(V69))(V68)) end end end end end end, fun (V70) -> fun (V71) -> fun (V72) -> begin (V73 = (V71(V72))), (V73(V72)) end end end end}, fun (V74) -> fun (V75) -> V75 end end}, V21))(V33))), {'Idris.Prelude.Types.Right', V76} end), case V77 of {'Idris.Prelude.Types.Left', E12} -> (fun (V78) -> {'Idris.Prelude.Types.Left', V78} end(E12)); {'Idris.Prelude.Types.Right', E13} -> (fun (V79) -> begin (V80 = (('Idris.Idris2.Core.Normalise':'un--nf'(V21, V0, V79, V13, V28))(V33))), case V80 of {'Idris.Prelude.Types.Left', E14} -> (fun (V81) -> {'Idris.Prelude.Types.Left', V81} end(E14)); {'Idris.Prelude.Types.Right', E15} -> (fun (V82) -> begin (V83 = ('Idris.Idris2.Core.Normalise':'un--logNF'(V0, V21, <<"elab"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"Now trying "/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show__Name'(V26)), ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<" "/utf8>>, ('Idris.Idris2.TTImp.TTImp':'dn--un--show_Show__RawImp'(V23)))))))) end, V13, V82, V33))), case V83 of {'Idris.Prelude.Types.Left', E16} -> (fun (V84) -> {'Idris.Prelude.Types.Left', V84} end(E16)); {'Idris.Prelude.Types.Right', E17} -> (fun (V85) -> begin (V86 = (('Idris.Idris2.TTImp.Elab.Check':'un--check'(V0, V21, V20, V19, V18, V16, V15, V14, V13, V23, {'Idris.Prelude.Types.Just', ('Idris.Idris2.Core.Normalise':'un--glueBack'(V21, V0, V79, V13, V82))}))(V33))), case V86 of {'Idris.Prelude.Types.Left', E18} -> (fun (V87) -> {'Idris.Prelude.Types.Left', V87} end(E18)); {'Idris.Prelude.Types.Right', E19} -> (fun (V88) -> begin (V89 = {'Idris.Builtin.MkPair', V47, V48}), case V88 of {'Idris.Builtin.MkPair', E20, E21} -> (fun (V90, V91) -> begin (V98 = case ('un--onLHS'(case V15 of {'Idris.TTImp.Elab.Check.MkElabInfo', E22, E23, E24, E25, E26, E27} -> (fun (V92, V93, V94, V95, V96, V97) -> V92 end(E22, E23, E24, E25, E26, E27)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)) of 0 -> (('un--checkPatTyValid'(V0, V21, V12, V79, V13, V82, V90, V91))(V33)); 1 -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end), case V98 of {'Idris.Prelude.Types.Left', E28} -> (fun (V99) -> {'Idris.Prelude.Types.Left', V99} end(E28)); {'Idris.Prelude.Types.Right', E29} -> (fun (V100) -> begin (V129 = begin (V128 = (('Idris.Idris2.Erlang.Data.IORef':'un--readIORef'('erased', 'erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V101) -> fun (V102) -> fun (V103) -> fun (V104) -> fun (V105) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor__IO'('erased', 'erased', V103, V104, V105)) end end end end end, fun (V106) -> fun (V107) -> fun (V108) -> V107 end end end, fun (V109) -> fun (V110) -> fun (V111) -> fun (V112) -> fun (V113) -> begin (V114 = (V111(V113))), begin (V115 = (V112(V113))), (V114(V115)) end end end end end end end}, fun (V116) -> fun (V117) -> fun (V118) -> fun (V119) -> fun (V120) -> begin (V121 = (V118(V120))), ((V119(V121))(V120)) end end end end end end, fun (V122) -> fun (V123) -> fun (V124) -> begin (V125 = (V123(V124))), (V125(V124)) end end end end}, fun (V126) -> fun (V127) -> V127 end end}, V21))(V33))), {'Idris.Prelude.Types.Right', V128} end), case V129 of {'Idris.Prelude.Types.Left', E30} -> (fun (V130) -> {'Idris.Prelude.Types.Left', V130} end(E30)); {'Idris.Prelude.Types.Right', E31} -> (fun (V131) -> begin (V132 = ('Idris.Idris2.Core.Context.Log':'un--logTerm'(V0, V21, <<"elab"/utf8>>, (1 + (1 + (1 + (1 + (1 + 0))))), fun () -> ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"Solving "/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('Idris.Idris2.Core.TT':'dn--un--show_Show__(Term $vars)'(V0, V31)), <<" with"/utf8>>)))) end, V90, V33))), case V132 of {'Idris.Prelude.Types.Left', E32} -> (fun (V133) -> {'Idris.Prelude.Types.Left', V133} end(E32)); {'Idris.Prelude.Types.Right', E33} -> (fun (V134) -> begin (V135 = (('Idris.Idris2.Core.Unify':'un--solveIfUndefined'(V0, V21, V19, V13, V31, V90))(V33))), case V135 of {'Idris.Prelude.Types.Left', E34} -> (fun (V136) -> {'Idris.Prelude.Types.Left', V136} end(E34)); {'Idris.Prelude.Types.Right', E35} -> (fun (V137) -> begin (V139 = begin (V138 = {'Idris.Builtin.MkPair', V90, V91}), (('case--case block in case block in case block in case block in checkRestApp-7670'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V30, V31, V46, V32, V36, V39, V42, V47, V48, V89, V79, V82, V85, V90, V91, V138, V100, V131, V134, V137, ('Idris.Idris2.Prelude.Basics':'un--not'(V137))))(V33)) end), case V139 of {'Idris.Prelude.Types.Left', E36} -> (fun (V140) -> {'Idris.Prelude.Types.Left', V140} end(E36)); {'Idris.Prelude.Types.Right', E37} -> (fun (V141) -> begin (V149 = begin (V142 = {'Idris.Builtin.MkPair', V90, V91}), (('case--case block in case block in case block in case block in checkRestApp-8105'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V30, V31, V46, V32, V36, V39, V42, V47, V48, V89, V79, V82, V85, V90, V91, V142, V100, V131, V134, V137, V141, case V15 of {'Idris.TTImp.Elab.Check.MkElabInfo', E38, E39, E40, E41, E42, E43} -> (fun (V143, V144, V145, V146, V147, V148) -> V143 end(E38, E39, E40, E41, E42, E43)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V33)) end), case V149 of {'Idris.Prelude.Types.Left', E44} -> (fun (V150) -> {'Idris.Prelude.Types.Left', V150} end(E44)); {'Idris.Prelude.Types.Right', E45} -> (fun (V151) -> begin (V152 = ('Idris.Idris2.Core.UnifyState':'un--removeHole'(V19, V30, V33))), case V152 of {'Idris.Prelude.Types.Left', E46} -> (fun (V153) -> {'Idris.Prelude.Types.Left', V153} end(E46)); {'Idris.Prelude.Types.Right', E47} -> (fun (V154) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V141, V48}} end(E47)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E45)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E37)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E35)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E33)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E20, E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E19)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E17)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E10, E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--checkRestApp-7144'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26) -> case V26 of 0 -> fun (V27) -> begin (V28 = (('Idris.Idris2.Core.UnifyState':'un--genMVName'(V21, V19, V10))(V27))), case V28 of {'Idris.Prelude.Types.Left', E0} -> (fun (V29) -> {'Idris.Prelude.Types.Left', V29} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V30) -> begin (V31 = ('Idris.Idris2.Core.Context':'un--clearDefs'(V22, V27))), case V31 of {'Idris.Prelude.Types.Left', E2} -> (fun (V32) -> {'Idris.Prelude.Types.Left', V32} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V33) -> begin (V34 = ('Idris.Idris2.Core.Normalise':'dn--un--quote_Quote__NF'(V21, V0, V33, V13, V9, V27))), case V34 of {'Idris.Prelude.Types.Left', E4} -> (fun (V35) -> {'Idris.Prelude.Types.Left', V35} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V36) -> begin (V37 = (('Idris.Idris2.TTImp.Elab.Check':'un--argVar'(V0, V21, V19, ('Idris.Idris2.TTImp.TTImp':'un--getFC'(V23)), V16, V13, V30, V36))(V27))), case V37 of {'Idris.Prelude.Types.Left', E6} -> (fun (V38) -> {'Idris.Prelude.Types.Left', V38} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V39) -> case V39 of {'Idris.Builtin.MkPair', E8, E9} -> (fun (V40, V41) -> begin (V42 = {'Idris.Core.TT.App', V12, V11, V41}), begin (V43 = ('Idris.Idris2.Core.Normalise':'un--logNF'(V0, V21, <<"elab"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"Delaying "/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show__Name'(V30)), ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<" "/utf8>>, ('Idris.Idris2.TTImp.TTImp':'dn--un--show_Show__RawImp'(V23)))))))) end, V13, V9, V27))), case V43 of {'Idris.Prelude.Types.Left', E10} -> (fun (V44) -> {'Idris.Prelude.Types.Left', V44} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V45) -> begin (V46 = ('Idris.Idris2.Core.Context.Log':'un--logTerm'(V0, V21, <<"elab"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> <<"...as"/utf8>> end, V41, V27))), case V46 of {'Idris.Prelude.Types.Left', E12} -> (fun (V47) -> {'Idris.Prelude.Types.Left', V47} end(E12)); {'Idris.Prelude.Types.Right', E13} -> (fun (V48) -> begin (V49 = (((V8(V22))(('Idris.Idris2.Core.Normalise':'un--toClosure'('erased', ('Idris.Idris2.Core.Value':'un--defaultOpts'()), V13, V41))))(V27))), case V49 of {'Idris.Prelude.Types.Left', E14} -> (fun (V50) -> {'Idris.Prelude.Types.Left', V50} end(E14)); {'Idris.Prelude.Types.Right', E15} -> (fun (V51) -> begin (V52 = (('un--checkAppWith'(V0, V21, V20, V19, V18, V17, V15, V14, V13, V12, V42, V51, {'Idris.Builtin.MkPair', V1, ('Idris.Idris2.Prelude.Types':'dn--un--+_Num__Nat'(('Idris.Idris2.Prelude.Types':'dn--un--fromInteger_Num__Nat'(1)), V2))}, V6, V5, V24, V3))(V27))), case V52 of {'Idris.Prelude.Types.Left', E16} -> (fun (V53) -> {'Idris.Prelude.Types.Left', V53} end(E16)); {'Idris.Prelude.Types.Right', E17} -> (fun (V54) -> begin (V55 = {'Idris.Builtin.MkPair', V40, V41}), case V54 of {'Idris.Builtin.MkPair', E18, E19} -> (fun (V56, V57) -> begin (V86 = begin (V85 = (('Idris.Idris2.Erlang.Data.IORef':'un--readIORef'('erased', 'erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V58) -> fun (V59) -> fun (V60) -> fun (V61) -> fun (V62) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor__IO'('erased', 'erased', V60, V61, V62)) end end end end end, fun (V63) -> fun (V64) -> fun (V65) -> V64 end end end, fun (V66) -> fun (V67) -> fun (V68) -> fun (V69) -> fun (V70) -> begin (V71 = (V68(V70))), begin (V72 = (V69(V70))), (V71(V72)) end end end end end end end}, fun (V73) -> fun (V74) -> fun (V75) -> fun (V76) -> fun (V77) -> begin (V78 = (V75(V77))), ((V76(V78))(V77)) end end end end end end, fun (V79) -> fun (V80) -> fun (V81) -> begin (V82 = (V80(V81))), (V82(V81)) end end end end}, fun (V83) -> fun (V84) -> V84 end end}, V21))(V27))), {'Idris.Prelude.Types.Right', V85} end), case V86 of {'Idris.Prelude.Types.Left', E20} -> (fun (V87) -> {'Idris.Prelude.Types.Left', V87} end(E20)); {'Idris.Prelude.Types.Right', E21} -> (fun (V88) -> begin (V89 = (('Idris.Idris2.Core.Normalise':'un--nf'(V21, V0, V88, V13, V36))(V27))), case V89 of {'Idris.Prelude.Types.Left', E22} -> (fun (V90) -> {'Idris.Prelude.Types.Left', V90} end(E22)); {'Idris.Prelude.Types.Right', E23} -> (fun (V91) -> begin (V92 = ('Idris.Idris2.Core.Normalise':'un--logNF'(V0, V21, <<"elab"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"Now trying "/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show__Name'(V30)), ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<" "/utf8>>, ('Idris.Idris2.TTImp.TTImp':'dn--un--show_Show__RawImp'(V23)))))))) end, V13, V91, V27))), case V92 of {'Idris.Prelude.Types.Left', E24} -> (fun (V93) -> {'Idris.Prelude.Types.Left', V93} end(E24)); {'Idris.Prelude.Types.Right', E25} -> (fun (V94) -> begin (V95 = (('Idris.Idris2.TTImp.Elab.Check':'un--check'(V0, V21, V20, V19, V18, V16, V15, V14, V13, V23, {'Idris.Prelude.Types.Just', ('Idris.Idris2.Core.Normalise':'un--glueBack'(V21, V0, V88, V13, V91))}))(V27))), case V95 of {'Idris.Prelude.Types.Left', E26} -> (fun (V96) -> {'Idris.Prelude.Types.Left', V96} end(E26)); {'Idris.Prelude.Types.Right', E27} -> (fun (V97) -> begin (V98 = {'Idris.Builtin.MkPair', V56, V57}), case V97 of {'Idris.Builtin.MkPair', E28, E29} -> (fun (V99, V100) -> begin (V107 = case ('un--onLHS'(case V15 of {'Idris.TTImp.Elab.Check.MkElabInfo', E30, E31, E32, E33, E34, E35} -> (fun (V101, V102, V103, V104, V105, V106) -> V101 end(E30, E31, E32, E33, E34, E35)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)) of 0 -> (('un--checkPatTyValid'(V0, V21, V12, V88, V13, V91, V99, V100))(V27)); 1 -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end), case V107 of {'Idris.Prelude.Types.Left', E36} -> (fun (V108) -> {'Idris.Prelude.Types.Left', V108} end(E36)); {'Idris.Prelude.Types.Right', E37} -> (fun (V109) -> begin (V138 = begin (V137 = (('Idris.Idris2.Erlang.Data.IORef':'un--readIORef'('erased', 'erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V110) -> fun (V111) -> fun (V112) -> fun (V113) -> fun (V114) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor__IO'('erased', 'erased', V112, V113, V114)) end end end end end, fun (V115) -> fun (V116) -> fun (V117) -> V116 end end end, fun (V118) -> fun (V119) -> fun (V120) -> fun (V121) -> fun (V122) -> begin (V123 = (V120(V122))), begin (V124 = (V121(V122))), (V123(V124)) end end end end end end end}, fun (V125) -> fun (V126) -> fun (V127) -> fun (V128) -> fun (V129) -> begin (V130 = (V127(V129))), ((V128(V130))(V129)) end end end end end end, fun (V131) -> fun (V132) -> fun (V133) -> begin (V134 = (V132(V133))), (V134(V133)) end end end end}, fun (V135) -> fun (V136) -> V136 end end}, V21))(V27))), {'Idris.Prelude.Types.Right', V137} end), case V138 of {'Idris.Prelude.Types.Left', E38} -> (fun (V139) -> {'Idris.Prelude.Types.Left', V139} end(E38)); {'Idris.Prelude.Types.Right', E39} -> (fun (V140) -> begin (V141 = ('Idris.Idris2.Core.Context.Log':'un--logTerm'(V0, V21, <<"elab"/utf8>>, (1 + (1 + (1 + (1 + (1 + 0))))), fun () -> ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"Solving "/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('Idris.Idris2.Core.TT':'dn--un--show_Show__(Term $vars)'(V0, V41)), <<" with"/utf8>>)))) end, V99, V27))), case V141 of {'Idris.Prelude.Types.Left', E40} -> (fun (V142) -> {'Idris.Prelude.Types.Left', V142} end(E40)); {'Idris.Prelude.Types.Right', E41} -> (fun (V143) -> begin (V144 = (('Idris.Idris2.Core.Unify':'un--solveIfUndefined'(V0, V21, V19, V13, V41, V99))(V27))), case V144 of {'Idris.Prelude.Types.Left', E42} -> (fun (V145) -> {'Idris.Prelude.Types.Left', V145} end(E42)); {'Idris.Prelude.Types.Right', E43} -> (fun (V146) -> begin (V148 = begin (V147 = {'Idris.Builtin.MkPair', V99, V100}), (('case--case block in case block in case block in case block in checkRestApp-7670'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V30, V33, V36, V40, V41, V55, V42, V45, V48, V51, V56, V57, V98, V88, V91, V94, V99, V100, V147, V109, V140, V143, V146, ('Idris.Idris2.Prelude.Basics':'un--not'(V146))))(V27)) end), case V148 of {'Idris.Prelude.Types.Left', E44} -> (fun (V149) -> {'Idris.Prelude.Types.Left', V149} end(E44)); {'Idris.Prelude.Types.Right', E45} -> (fun (V150) -> begin (V158 = begin (V151 = {'Idris.Builtin.MkPair', V99, V100}), (('case--case block in case block in case block in case block in checkRestApp-8105'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V30, V33, V36, V40, V41, V55, V42, V45, V48, V51, V56, V57, V98, V88, V91, V94, V99, V100, V151, V109, V140, V143, V146, V150, case V15 of {'Idris.TTImp.Elab.Check.MkElabInfo', E46, E47, E48, E49, E50, E51} -> (fun (V152, V153, V154, V155, V156, V157) -> V152 end(E46, E47, E48, E49, E50, E51)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V27)) end), case V158 of {'Idris.Prelude.Types.Left', E52} -> (fun (V159) -> {'Idris.Prelude.Types.Left', V159} end(E52)); {'Idris.Prelude.Types.Right', E53} -> (fun (V160) -> begin (V161 = ('Idris.Idris2.Core.UnifyState':'un--removeHole'(V19, V40, V27))), case V161 of {'Idris.Prelude.Types.Left', E54} -> (fun (V162) -> {'Idris.Prelude.Types.Left', V162} end(E54)); {'Idris.Prelude.Types.Right', E55} -> (fun (V163) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V150, V57}} end(E55)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E53)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E45)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E43)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E41)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E39)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E37)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E28, E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E27)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E25)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E23)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E18, E19)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E17)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E8, E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end; 1 -> fun (V164) -> begin (V165 = ('Idris.Idris2.Core.Normalise':'un--logNF'(V0, V21, <<"elab"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"Argument type "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show__Name'(V10)))) end, V13, V9, V164))), case V165 of {'Idris.Prelude.Types.Left', E56} -> (fun (V166) -> {'Idris.Prelude.Types.Left', V166} end(E56)); {'Idris.Prelude.Types.Right', E57} -> (fun (V167) -> begin (V168 = ('Idris.Idris2.Core.Normalise':'un--logNF'(V0, V21, <<"elab"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> <<"Full function type"/utf8>> end, V13, {'Idris.Core.Value.NBind', V12, V10, {'Idris.Core.TT.Pi', V12, V16, {'Idris.Core.TT.Explicit'}, V9}, V8}, V164))), case V168 of {'Idris.Prelude.Types.Left', E58} -> (fun (V169) -> {'Idris.Prelude.Types.Left', V169} end(E58)); {'Idris.Prelude.Types.Right', E59} -> (fun (V170) -> begin (V191 = ('Idris.Idris2.Core.Context.Log':'un--logC'(V21, <<"elab"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun (V171) -> begin (V185 = (('Idris.Idris2.Prelude.Types':'un--maybe'('erased', 'erased', fun () -> fun (V172) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}} end end, fun () -> fun (V173) -> fun (V174) -> begin (V175 = (('Idris.Idris2.Core.Normalise':'un--getTerm'('erased', V173))(V174))), case V175 of {'Idris.Prelude.Types.Left', E60} -> (fun (V176) -> {'Idris.Prelude.Types.Left', V176} end(E60)); {'Idris.Prelude.Types.Right', E61} -> (fun (V177) -> begin (V182 = ('Idris.Idris2.Core.Context':'un--toFullNames'('erased', V21, {'Idris.Core.Context.dn--un--__mkHasNames', fun (V178) -> fun (V179) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames__(Term $vars)'('erased', V178, V179)) end end, fun (V180) -> fun (V181) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames__(Term $vars)'('erased', V180, V181)) end end}, V177, V174))), case V182 of {'Idris.Prelude.Types.Left', E62} -> (fun (V183) -> {'Idris.Prelude.Types.Left', V183} end(E62)); {'Idris.Prelude.Types.Right', E63} -> (fun (V184) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Just', V184}} end(E63)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E61)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end, V3))(V171))), case V185 of {'Idris.Prelude.Types.Left', E64} -> (fun (V186) -> {'Idris.Prelude.Types.Left', V186} end(E64)); {'Idris.Prelude.Types.Right', E65} -> (fun (V187) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"Overall expected type: "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show__(Maybe $a)'('erased', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V188) -> ('Idris.Idris2.Core.TT':'dn--un--show_Show__(Term $vars)'(V0, V188)) end, fun (V189) -> fun (V190) -> ('Idris.Idris2.Core.TT':'dn--un--showPrec_Show__(Term $vars)'(V0, V189, V190)) end end}, V187))))} end(E65)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end, V164))), case V191 of {'Idris.Prelude.Types.Left', E66} -> (fun (V192) -> {'Idris.Prelude.Types.Left', V192} end(E66)); {'Idris.Prelude.Types.Right', E67} -> (fun (V193) -> begin (V194 = (('Idris.Idris2.TTImp.Elab.Check':'un--check'(V0, V21, V20, V19, V18, V16, V15, V14, V13, V23, {'Idris.Prelude.Types.Just', ('Idris.Idris2.Core.Normalise':'un--glueBack'(V21, V0, V22, V13, V9))}))(V164))), case V194 of {'Idris.Prelude.Types.Left', E68} -> (fun (V195) -> {'Idris.Prelude.Types.Left', V195} end(E68)); {'Idris.Prelude.Types.Right', E69} -> (fun (V196) -> case V196 of {'Idris.Builtin.MkPair', E70, E71} -> (fun (V197, V198) -> begin (V199 = ('Idris.Idris2.Core.Normalise':'un--logGlueNF'(V0, V21, <<"elab"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> <<"Got arg type"/utf8>> end, V13, V198, V164))), case V199 of {'Idris.Prelude.Types.Left', E72} -> (fun (V200) -> {'Idris.Prelude.Types.Left', V200} end(E72)); {'Idris.Prelude.Types.Right', E73} -> (fun (V201) -> begin (V230 = begin (V229 = (('Idris.Idris2.Erlang.Data.IORef':'un--readIORef'('erased', 'erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V202) -> fun (V203) -> fun (V204) -> fun (V205) -> fun (V206) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor__IO'('erased', 'erased', V204, V205, V206)) end end end end end, fun (V207) -> fun (V208) -> fun (V209) -> V208 end end end, fun (V210) -> fun (V211) -> fun (V212) -> fun (V213) -> fun (V214) -> begin (V215 = (V212(V214))), begin (V216 = (V213(V214))), (V215(V216)) end end end end end end end}, fun (V217) -> fun (V218) -> fun (V219) -> fun (V220) -> fun (V221) -> begin (V222 = (V219(V221))), ((V220(V222))(V221)) end end end end end end, fun (V223) -> fun (V224) -> fun (V225) -> begin (V226 = (V224(V225))), (V226(V225)) end end end end}, fun (V227) -> fun (V228) -> V228 end end}, V21))(V164))), {'Idris.Prelude.Types.Right', V229} end), case V230 of {'Idris.Prelude.Types.Left', E74} -> (fun (V231) -> {'Idris.Prelude.Types.Left', V231} end(E74)); {'Idris.Prelude.Types.Right', E75} -> (fun (V232) -> begin (V233 = {'Idris.Core.TT.App', V12, V11, V197}), begin (V234 = (((V8(V232))(('Idris.Idris2.Core.Normalise':'un--toClosure'('erased', ('Idris.Idris2.Core.Value':'un--defaultOpts'()), V13, V197))))(V164))), case V234 of {'Idris.Prelude.Types.Left', E76} -> (fun (V235) -> {'Idris.Prelude.Types.Left', V235} end(E76)); {'Idris.Prelude.Types.Right', E77} -> (fun (V236) -> (('un--checkAppWith'(V0, V21, V20, V19, V18, V17, V15, V14, V13, V12, V233, V236, {'Idris.Builtin.MkPair', V1, ('Idris.Idris2.Prelude.Types':'dn--un--+_Num__Nat'(('Idris.Idris2.Prelude.Types':'dn--un--fromInteger_Num__Nat'(1)), V2))}, V6, V5, V24, V3))(V164)) end(E77)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E75)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E73)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E70, E71)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E69)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E67)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E59)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E57)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--checkRestApp-7036'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23) -> case V4 of 0 -> fun (V24) -> {'Idris.Prelude.Types.Right', 0} end; 1 -> fun (V25) -> begin (V26 = (((V8(V22))(('Idris.Idris2.Core.Normalise':'un--toClosure'('erased', ('Idris.Idris2.Core.Value':'un--defaultOpts'()), V13, {'Idris.Core.TT.Erased', V12, 1}))))(V25))), case V26 of {'Idris.Prelude.Types.Left', E0} -> (fun (V27) -> {'Idris.Prelude.Types.Left', V27} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V28) -> (('un--concrete'('erased', V22, V13, V28))(V25)) end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in case block in case block in dotErased-6884'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12) -> case V12 of 0 -> fun (V13) -> {'Idris.Prelude.Types.Right', V2} end; 1 -> fun (V14) -> {'Idris.Prelude.Types.Right', ('nested--10999-6329--in--un--dotTerm'('erased', V1, V2, V3, V4, V5, V6, V7, V2))} end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in case block in dotErased-6856'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10) -> case V10 of {'Idris.Prelude.Types.Just', E0} -> (fun (V11) -> begin (V12 = {'Idris.Prelude.Types.Just', V11}), ('case--case block in case block in case block in dotErased-6884'('erased', V1, V2, V3, V4, V5, V6, V7, V8, V9, V11, V12, ('Idris.Idris2.Prelude.Types':'un--elem'('erased', {'Idris.Prelude.EqOrd.dn--un--__mkEq', fun (V13) -> fun (V14) -> ('Idris.Idris2.Prelude.Types':'dn--un--==_Eq__Nat'(V13, V14)) end end, fun (V15) -> fun (V16) -> ('Idris.Idris2.Prelude.Types':'dn--un--/=_Eq__Nat'(V15, V16)) end end}, V4, case V11 of {'Idris.Core.Context.MkGlobalDef', E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21} -> (fun (V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37) -> V21 end(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)))) end end(E0)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V38) -> {'Idris.Prelude.Types.Right', ('nested--10999-6329--in--un--dotTerm'('erased', V1, V2, V3, V4, V5, V6, V7, V2))} end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in dotErased-6794'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9) -> case V9 of 0 -> fun (V10) -> {'Idris.Prelude.Types.Right', V2} end; 1 -> fun (V11) -> begin (V40 = begin (V39 = (('Idris.Idris2.Erlang.Data.IORef':'un--readIORef'('erased', 'erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V12) -> fun (V13) -> fun (V14) -> fun (V15) -> fun (V16) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor__IO'('erased', 'erased', V14, V15, V16)) end end end end end, fun (V17) -> fun (V18) -> fun (V19) -> V18 end end end, fun (V20) -> fun (V21) -> fun (V22) -> fun (V23) -> fun (V24) -> begin (V25 = (V22(V24))), begin (V26 = (V23(V24))), (V25(V26)) end end end end end end end}, fun (V27) -> fun (V28) -> fun (V29) -> fun (V30) -> fun (V31) -> begin (V32 = (V29(V31))), ((V30(V32))(V31)) end end end end end end, fun (V33) -> fun (V34) -> fun (V35) -> begin (V36 = (V34(V35))), (V36(V35)) end end end end}, fun (V37) -> fun (V38) -> V38 end end}, V7))(V11))), {'Idris.Prelude.Types.Right', V39} end), case V40 of {'Idris.Prelude.Types.Left', E0} -> (fun (V41) -> {'Idris.Prelude.Types.Left', V41} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V42) -> begin (V71 = (('Idris.Idris2.Prelude.Types':'un--maybe'('erased', 'erased', fun () -> fun (V43) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}} end end, fun () -> fun (V44) -> ('Idris.Idris2.Core.Context':'un--lookupCtxtExact'(V44, case V42 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27} -> (fun (V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62, V63, V64, V65, V66, V67, V68, V69, V70) -> V45 end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)) end end, V5))(V11))), case V71 of {'Idris.Prelude.Types.Left', E28} -> (fun (V72) -> {'Idris.Prelude.Types.Left', V72} end(E28)); {'Idris.Prelude.Types.Right', E29} -> (fun (V73) -> case V73 of {'Idris.Prelude.Types.Just', E30} -> (fun (V74) -> begin (V75 = {'Idris.Prelude.Types.Just', V74}), (('case--case block in case block in case block in dotErased-6884'('erased', V1, V2, V3, V4, V5, V6, V7, V8, V42, V74, V75, ('Idris.Idris2.Prelude.Types':'un--elem'('erased', {'Idris.Prelude.EqOrd.dn--un--__mkEq', fun (V76) -> fun (V77) -> ('Idris.Idris2.Prelude.Types':'dn--un--==_Eq__Nat'(V76, V77)) end end, fun (V78) -> fun (V79) -> ('Idris.Idris2.Prelude.Types':'dn--un--/=_Eq__Nat'(V78, V79)) end end}, V4, case V74 of {'Idris.Core.Context.MkGlobalDef', E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51} -> (fun (V80, V81, V82, V83, V84, V85, V86, V87, V88, V89, V90, V91, V92, V93, V94, V95, V96, V97, V98, V99, V100) -> V84 end(E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))))(V11)) end end(E30)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', ('nested--10999-6329--in--un--dotTerm'('erased', V1, V2, V3, V4, V5, V6, V7, V2))} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--dotErased-6749'(V0, V1, V2, V3, V4, V5, V6, V7, V8) -> case V8 of 0 -> fun (V9) -> begin (V10 = (('nested--10999-6328--in--un--countConstructors'('erased', V1, V2, V3, V4, V5, V6, V7, V6))(V9))), case V10 of {'Idris.Prelude.Types.Left', E0} -> (fun (V11) -> {'Idris.Prelude.Types.Left', V11} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V12) -> (('case--case block in dotErased-6794'('erased', V1, V2, V3, V4, V5, V6, V7, V12, ('Idris.Idris2.Prelude.Basics':'un--||'(('Idris.Idris2.Prelude.Types':'dn--un--==_Eq__(Maybe $a)'('erased', {'Idris.Prelude.EqOrd.dn--un--__mkEq', fun (V13) -> fun (V14) -> ('Idris.Idris2.Prelude.Types':'dn--un--==_Eq__Nat'(V13, V14)) end end, fun (V15) -> fun (V16) -> ('Idris.Idris2.Prelude.Types':'dn--un--/=_Eq__Nat'(V15, V16)) end end}, V12, {'Idris.Prelude.Types.Just', ('Idris.Idris2.Prelude.Types':'dn--un--fromInteger_Num__Nat'(1))})), fun () -> ('Idris.Idris2.Prelude.Types':'dn--un--==_Eq__(Maybe $a)'('erased', {'Idris.Prelude.EqOrd.dn--un--__mkEq', fun (V17) -> fun (V18) -> ('Idris.Idris2.Prelude.Types':'dn--un--==_Eq__Nat'(V17, V18)) end end, fun (V19) -> fun (V20) -> ('Idris.Idris2.Prelude.Types':'dn--un--/=_Eq__Nat'(V19, V20)) end end}, V12, {'Idris.Prelude.Types.Just', ('Idris.Idris2.Prelude.Types':'dn--un--fromInteger_Num__Nat'(0))})) end))))(V9)) end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end; 1 -> fun (V21) -> {'Idris.Prelude.Types.Right', V2} end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--dotErased,dotTerm-6582'(V0, V1, V2, V3, V4, V5, V6, V7, V8) -> case V8 of {'Idris.TTImp.TTImp.IMustUnify', E0, E1, E2} -> (fun (V9, V10, V11) -> V8 end(E0, E1, E2)); {'Idris.TTImp.TTImp.IBindVar', E3, E4} -> (fun (V12, V13) -> V8 end(E3, E4)); {'Idris.TTImp.TTImp.Implicit', E5, E6} -> (fun (V14, V15) -> V8 end(E5, E6)); {'Idris.TTImp.TTImp.IAs', E7, E8, E9, E10} -> (fun (V16, V17, V18, V19) -> case V19 of {'Idris.TTImp.TTImp.IBindVar', E11, E12} -> (fun (V20, V21) -> V8 end(E11, E12)); {'Idris.TTImp.TTImp.Implicit', E13, E14} -> (fun (V22, V23) -> V8 end(E13, E14)); _ -> {'Idris.TTImp.TTImp.IAs', V16, V17, V18, {'Idris.TTImp.TTImp.IMustUnify', V16, {'Idris.Core.Core.ErasedArg'}, V8}} end end(E7, E8, E9, E10)); _ -> {'Idris.TTImp.TTImp.IMustUnify', ('Idris.Idris2.TTImp.TTImp':'un--getFC'(V8)), {'Idris.Core.Core.ErasedArg'}, V8} end.
'case--case block in case block in dotErased,countConstructors-6422'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16) -> case V16 of {'Idris.Core.Context.TCon', E0, E1, E2, E3, E4, E5, E6, E7} -> (fun (V17, V18, V19, V20, V21, V22, V23, V24) -> fun (V25) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Just', ('Idris.Idris2.Prelude.Types.List':'un--length'('erased', V23))}} end end(E0, E1, E2, E3, E4, E5, E6, E7)); _ -> fun (V26) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}} end end.
'case--case block in dotErased,countConstructors-6389'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14) -> case V14 of {'Idris.Prelude.Types.Just', E0} -> (fun (V15) -> begin (V16 = {'Idris.Prelude.Types.Just', V15}), ('case--case block in case block in dotErased,countConstructors-6422'('erased', V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V15, V16, case V15 of {'Idris.Core.Context.MkGlobalDef', E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21} -> (fun (V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37) -> V34 end(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)) end end(E0)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V38) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}} end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--dotErased,countConstructors-6344'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13) -> case V13 of 0 -> fun (V14) -> begin (V43 = begin (V42 = (('Idris.Idris2.Erlang.Data.IORef':'un--readIORef'('erased', 'erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V15) -> fun (V16) -> fun (V17) -> fun (V18) -> fun (V19) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor__IO'('erased', 'erased', V17, V18, V19)) end end end end end, fun (V20) -> fun (V21) -> fun (V22) -> V21 end end end, fun (V23) -> fun (V24) -> fun (V25) -> fun (V26) -> fun (V27) -> begin (V28 = (V25(V27))), begin (V29 = (V26(V27))), (V28(V29)) end end end end end end end}, fun (V30) -> fun (V31) -> fun (V32) -> fun (V33) -> fun (V34) -> begin (V35 = (V32(V34))), ((V33(V35))(V34)) end end end end end end, fun (V36) -> fun (V37) -> fun (V38) -> begin (V39 = (V37(V38))), (V39(V38)) end end end end}, fun (V40) -> fun (V41) -> V41 end end}, V7))(V14))), {'Idris.Prelude.Types.Right', V42} end), case V43 of {'Idris.Prelude.Types.Left', E0} -> (fun (V44) -> {'Idris.Prelude.Types.Left', V44} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V45) -> begin (V72 = (('Idris.Idris2.Core.Context':'un--lookupCtxtExact'(V12, case V45 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27} -> (fun (V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62, V63, V64, V65, V66, V67, V68, V69, V70, V71) -> V46 end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V14))), case V72 of {'Idris.Prelude.Types.Left', E28} -> (fun (V73) -> {'Idris.Prelude.Types.Left', V73} end(E28)); {'Idris.Prelude.Types.Right', E29} -> (fun (V74) -> case V74 of {'Idris.Prelude.Types.Just', E30} -> (fun (V75) -> begin (V76 = {'Idris.Prelude.Types.Just', V75}), (('case--case block in case block in dotErased,countConstructors-6422'('erased', V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V45, V75, V76, case V75 of {'Idris.Core.Context.MkGlobalDef', E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51} -> (fun (V77, V78, V79, V80, V81, V82, V83, V84, V85, V86, V87, V88, V89, V90, V91, V92, V93, V94, V95, V96, V97) -> V94 end(E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V14)) end end(E30)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end; 1 -> fun (V98) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}} end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in case block in checkPatTyValid-6189'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15) -> case V15 of 0 -> fun (V16) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable__Core_Error'('erased', {'Idris.Core.Core.MatchTooSpecific', V0, V10, V8, V7}, V16)) end; 1 -> fun (V17) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in checkPatTyValid-6145'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14) -> case V14 of 0 -> fun (V15) -> begin (V16 = (('Idris.Idris2.Core.Normalise':'un--getNF'('erased', V11, V6))(V15))), case V16 of {'Idris.Prelude.Types.Left', E0} -> (fun (V17) -> {'Idris.Prelude.Types.Left', V17} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V18) -> begin (V19 = (('un--concrete'('erased', V9, V8, V18))(V15))), case V19 of {'Idris.Prelude.Types.Left', E2} -> (fun (V20) -> {'Idris.Prelude.Types.Left', V20} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V21) -> case V21 of 0 -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable__Core_Error'('erased', {'Idris.Core.Core.MatchTooSpecific', V0, V10, V8, V7}, V15)); 1 -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end; 1 -> fun (V22) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--checkPatTyValid-6109'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12) -> case V12 of {'Idris.Prelude.Types.Just', E0} -> (fun (V13) -> begin (V14 = {'Idris.Prelude.Types.Just', V13}), ('case--case block in checkPatTyValid-6145'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V13, V14, ('Idris.Idris2.Algebra.Semiring':'un--isErased'('erased', {'Idris.Builtin.MkPair', {'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V15) -> fun (V16) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring__ZeroOneOmega'(V15, V16)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring__ZeroOneOmega'()), fun (V17) -> fun (V18) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring__ZeroOneOmega'(V17, V18)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring__ZeroOneOmega'())}, {'Idris.Prelude.EqOrd.dn--un--__mkEq', fun (V19) -> fun (V20) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--==_Eq__ZeroOneOmega'(V19, V20)) end end, fun (V21) -> fun (V22) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--/=_Eq__ZeroOneOmega'(V21, V22)) end end}}, case V13 of {'Idris.Core.Context.MkGlobalDef', E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21} -> (fun (V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43) -> V30 end(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)))) end end(E0)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V44) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--needsDelayExpr-5898'(V0, V1, V2, V3, V4) -> case V4 of [E0 | E1] -> (fun (V5, V6) -> case V6 of [E2 | E3] -> (fun (V7, V8) -> 0 end(E2, E3)); _ -> 1 end end(E0, E1)); _ -> 1 end.
'case--makeDefImplicit-5651'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22) -> case V22 of 0 -> fun (V23) -> begin (V52 = begin (V51 = (('Idris.Idris2.Erlang.Data.IORef':'un--readIORef'('erased', 'erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V24) -> fun (V25) -> fun (V26) -> fun (V27) -> fun (V28) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor__IO'('erased', 'erased', V26, V27, V28)) end end end end end, fun (V29) -> fun (V30) -> fun (V31) -> V30 end end end, fun (V32) -> fun (V33) -> fun (V34) -> fun (V35) -> fun (V36) -> begin (V37 = (V34(V36))), begin (V38 = (V35(V36))), (V37(V38)) end end end end end end end}, fun (V39) -> fun (V40) -> fun (V41) -> fun (V42) -> fun (V43) -> begin (V44 = (V41(V43))), ((V42(V44))(V43)) end end end end end end, fun (V45) -> fun (V46) -> fun (V47) -> begin (V48 = (V46(V47))), (V48(V47)) end end end end}, fun (V49) -> fun (V50) -> V50 end end}, V21))(V23))), {'Idris.Prelude.Types.Right', V51} end), case V52 of {'Idris.Prelude.Types.Left', E0} -> (fun (V53) -> {'Idris.Prelude.Types.Left', V53} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V54) -> begin (V55 = (('Idris.Idris2.Core.UnifyState':'un--genMVName'(V21, V19, V10))(V23))), case V55 of {'Idris.Prelude.Types.Left', E2} -> (fun (V56) -> {'Idris.Prelude.Types.Left', V56} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V57) -> begin (V58 = ('Idris.Idris2.Core.Context':'un--clearDefs'(V54, V23))), case V58 of {'Idris.Prelude.Types.Left', E4} -> (fun (V59) -> {'Idris.Prelude.Types.Left', V59} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V60) -> begin (V61 = ('Idris.Idris2.Core.Normalise':'dn--un--quote_Quote__NF'(V21, V0, V60, V13, V8, V23))), case V61 of {'Idris.Prelude.Types.Left', E6} -> (fun (V62) -> {'Idris.Prelude.Types.Left', V62} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V63) -> begin (V64 = ('Idris.Idris2.TTImp.Elab.Check':'un--metaVar'(V0, V21, V19, V12, V16, V13, V57, V63, V23))), case V64 of {'Idris.Prelude.Types.Left', E8} -> (fun (V65) -> {'Idris.Prelude.Types.Left', V65} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V66) -> begin (V67 = {'Idris.Core.TT.App', V12, V11, V66}), begin (V68 = (((V7(V54))(('Idris.Idris2.Core.Normalise':'un--toClosure'('erased', ('Idris.Idris2.Core.Value':'un--defaultOpts'()), V13, V66))))(V23))), case V68 of {'Idris.Prelude.Types.Left', E10} -> (fun (V69) -> {'Idris.Prelude.Types.Left', V69} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V70) -> begin (V99 = begin (V98 = (('Idris.Idris2.Erlang.Data.IORef':'un--readIORef'('erased', 'erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V71) -> fun (V72) -> fun (V73) -> fun (V74) -> fun (V75) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor__IO'('erased', 'erased', V73, V74, V75)) end end end end end, fun (V76) -> fun (V77) -> fun (V78) -> V77 end end end, fun (V79) -> fun (V80) -> fun (V81) -> fun (V82) -> fun (V83) -> begin (V84 = (V81(V83))), begin (V85 = (V82(V83))), (V84(V85)) end end end end end end end}, fun (V86) -> fun (V87) -> fun (V88) -> fun (V89) -> fun (V90) -> begin (V91 = (V88(V90))), ((V89(V91))(V90)) end end end end end end, fun (V92) -> fun (V93) -> fun (V94) -> begin (V95 = (V93(V94))), (V95(V94)) end end end end}, fun (V96) -> fun (V97) -> V97 end end}, V18))(V23))), {'Idris.Prelude.Types.Right', V98} end), case V99 of {'Idris.Prelude.Types.Left', E12} -> (fun (V100) -> {'Idris.Prelude.Types.Left', V100} end(E12)); {'Idris.Prelude.Types.Right', E13} -> (fun (V101) -> begin (V130 = begin (V129 = (('Idris.Idris2.Erlang.Data.IORef':'un--writeIORef'('erased', 'erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V102) -> fun (V103) -> fun (V104) -> fun (V105) -> fun (V106) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor__IO'('erased', 'erased', V104, V105, V106)) end end end end end, fun (V107) -> fun (V108) -> fun (V109) -> V108 end end end, fun (V110) -> fun (V111) -> fun (V112) -> fun (V113) -> fun (V114) -> begin (V115 = (V112(V114))), begin (V116 = (V113(V114))), (V115(V116)) end end end end end end end}, fun (V117) -> fun (V118) -> fun (V119) -> fun (V120) -> fun (V121) -> begin (V122 = (V119(V121))), ((V120(V122))(V121)) end end end end end end, fun (V123) -> fun (V124) -> fun (V125) -> begin (V126 = (V124(V125))), (V126(V125)) end end end end}, fun (V127) -> fun (V128) -> V128 end end}, V18, ('Idris.Idris2.TTImp.Elab.Check':'un--addBindIfUnsolved'(V0, V57, V16, {'Idris.Core.TT.AutoImplicit'}, V13, V66, V63, V101))))(V23))), {'Idris.Prelude.Types.Right', V129} end), case V130 of {'Idris.Prelude.Types.Left', E14} -> (fun (V131) -> {'Idris.Prelude.Types.Left', V131} end(E14)); {'Idris.Prelude.Types.Right', E15} -> (fun (V132) -> (('un--checkAppWith'(V0, V21, V20, V19, V18, V17, V15, V14, V13, V12, V67, V70, {'Idris.Builtin.MkPair', V1, ('Idris.Idris2.Prelude.Types':'dn--un--+_Num__Nat'(('Idris.Idris2.Prelude.Types':'dn--un--fromInteger_Num__Nat'(1)), V2))}, V6, V5, V4, V3))(V23)) end(E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end; 1 -> fun (V133) -> begin (V162 = begin (V161 = (('Idris.Idris2.Erlang.Data.IORef':'un--readIORef'('erased', 'erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V134) -> fun (V135) -> fun (V136) -> fun (V137) -> fun (V138) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor__IO'('erased', 'erased', V136, V137, V138)) end end end end end, fun (V139) -> fun (V140) -> fun (V141) -> V140 end end end, fun (V142) -> fun (V143) -> fun (V144) -> fun (V145) -> fun (V146) -> begin (V147 = (V144(V146))), begin (V148 = (V145(V146))), (V147(V148)) end end end end end end end}, fun (V149) -> fun (V150) -> fun (V151) -> fun (V152) -> fun (V153) -> begin (V154 = (V151(V153))), ((V152(V154))(V153)) end end end end end end, fun (V155) -> fun (V156) -> fun (V157) -> begin (V158 = (V156(V157))), (V158(V157)) end end end end}, fun (V159) -> fun (V160) -> V160 end end}, V21))(V133))), {'Idris.Prelude.Types.Right', V161} end), case V162 of {'Idris.Prelude.Types.Left', E16} -> (fun (V163) -> {'Idris.Prelude.Types.Left', V163} end(E16)); {'Idris.Prelude.Types.Right', E17} -> (fun (V164) -> begin (V165 = ('Idris.Idris2.Core.Context':'un--clearDefs'(V164, V133))), case V165 of {'Idris.Prelude.Types.Left', E18} -> (fun (V166) -> {'Idris.Prelude.Types.Left', V166} end(E18)); {'Idris.Prelude.Types.Right', E19} -> (fun (V167) -> begin (V168 = ('Idris.Idris2.Core.Normalise':'dn--un--quote_Quote__NF'(V21, V0, V167, V13, V9, V133))), case V168 of {'Idris.Prelude.Types.Left', E20} -> (fun (V169) -> {'Idris.Prelude.Types.Left', V169} end(E20)); {'Idris.Prelude.Types.Right', E21} -> (fun (V170) -> begin (V171 = {'Idris.Core.TT.App', V12, V11, V170}), begin (V172 = (((V7(V164))(('Idris.Idris2.Core.Normalise':'un--toClosure'('erased', ('Idris.Idris2.Core.Value':'un--defaultOpts'()), V13, V170))))(V133))), case V172 of {'Idris.Prelude.Types.Left', E22} -> (fun (V173) -> {'Idris.Prelude.Types.Left', V173} end(E22)); {'Idris.Prelude.Types.Right', E23} -> (fun (V174) -> (('un--checkAppWith'(V0, V21, V20, V19, V18, V17, V15, V14, V13, V12, V171, V174, {'Idris.Builtin.MkPair', V1, ('Idris.Idris2.Prelude.Types':'dn--un--+_Num__Nat'(('Idris.Idris2.Prelude.Types':'dn--un--fromInteger_Num__Nat'(1)), V2))}, V6, V5, V4, V3))(V133)) end(E23)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E19)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E17)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--makeAutoImplicit-5388'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21) -> case V21 of 0 -> fun (V22) -> begin (V51 = begin (V50 = (('Idris.Idris2.Erlang.Data.IORef':'un--readIORef'('erased', 'erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V23) -> fun (V24) -> fun (V25) -> fun (V26) -> fun (V27) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor__IO'('erased', 'erased', V25, V26, V27)) end end end end end, fun (V28) -> fun (V29) -> fun (V30) -> V29 end end end, fun (V31) -> fun (V32) -> fun (V33) -> fun (V34) -> fun (V35) -> begin (V36 = (V33(V35))), begin (V37 = (V34(V35))), (V36(V37)) end end end end end end end}, fun (V38) -> fun (V39) -> fun (V40) -> fun (V41) -> fun (V42) -> begin (V43 = (V40(V42))), ((V41(V43))(V42)) end end end end end end, fun (V44) -> fun (V45) -> fun (V46) -> begin (V47 = (V45(V46))), (V47(V46)) end end end end}, fun (V48) -> fun (V49) -> V49 end end}, V20))(V22))), {'Idris.Prelude.Types.Right', V50} end), case V51 of {'Idris.Prelude.Types.Left', E0} -> (fun (V52) -> {'Idris.Prelude.Types.Left', V52} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V53) -> begin (V54 = (('Idris.Idris2.Core.UnifyState':'un--genMVName'(V20, V18, V9))(V22))), case V54 of {'Idris.Prelude.Types.Left', E2} -> (fun (V55) -> {'Idris.Prelude.Types.Left', V55} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V56) -> begin (V57 = ('Idris.Idris2.Core.Context':'un--clearDefs'(V53, V22))), case V57 of {'Idris.Prelude.Types.Left', E4} -> (fun (V58) -> {'Idris.Prelude.Types.Left', V58} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V59) -> begin (V60 = ('Idris.Idris2.Core.Normalise':'dn--un--quote_Quote__NF'(V20, V0, V59, V12, V8, V22))), case V60 of {'Idris.Prelude.Types.Left', E6} -> (fun (V61) -> {'Idris.Prelude.Types.Left', V61} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V62) -> begin (V63 = ('Idris.Idris2.TTImp.Elab.Check':'un--metaVar'(V0, V20, V18, V11, V15, V12, V56, V62, V22))), case V63 of {'Idris.Prelude.Types.Left', E8} -> (fun (V64) -> {'Idris.Prelude.Types.Left', V64} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V65) -> begin (V66 = {'Idris.Core.TT.App', V11, V10, V65}), begin (V67 = (((V7(V53))(('Idris.Idris2.Core.Normalise':'un--toClosure'('erased', ('Idris.Idris2.Core.Value':'un--defaultOpts'()), V12, V65))))(V22))), case V67 of {'Idris.Prelude.Types.Left', E10} -> (fun (V68) -> {'Idris.Prelude.Types.Left', V68} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V69) -> begin (V98 = begin (V97 = (('Idris.Idris2.Erlang.Data.IORef':'un--readIORef'('erased', 'erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V70) -> fun (V71) -> fun (V72) -> fun (V73) -> fun (V74) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor__IO'('erased', 'erased', V72, V73, V74)) end end end end end, fun (V75) -> fun (V76) -> fun (V77) -> V76 end end end, fun (V78) -> fun (V79) -> fun (V80) -> fun (V81) -> fun (V82) -> begin (V83 = (V80(V82))), begin (V84 = (V81(V82))), (V83(V84)) end end end end end end end}, fun (V85) -> fun (V86) -> fun (V87) -> fun (V88) -> fun (V89) -> begin (V90 = (V87(V89))), ((V88(V90))(V89)) end end end end end end, fun (V91) -> fun (V92) -> fun (V93) -> begin (V94 = (V92(V93))), (V94(V93)) end end end end}, fun (V95) -> fun (V96) -> V96 end end}, V17))(V22))), {'Idris.Prelude.Types.Right', V97} end), case V98 of {'Idris.Prelude.Types.Left', E12} -> (fun (V99) -> {'Idris.Prelude.Types.Left', V99} end(E12)); {'Idris.Prelude.Types.Right', E13} -> (fun (V100) -> begin (V129 = begin (V128 = (('Idris.Idris2.Erlang.Data.IORef':'un--writeIORef'('erased', 'erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V101) -> fun (V102) -> fun (V103) -> fun (V104) -> fun (V105) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor__IO'('erased', 'erased', V103, V104, V105)) end end end end end, fun (V106) -> fun (V107) -> fun (V108) -> V107 end end end, fun (V109) -> fun (V110) -> fun (V111) -> fun (V112) -> fun (V113) -> begin (V114 = (V111(V113))), begin (V115 = (V112(V113))), (V114(V115)) end end end end end end end}, fun (V116) -> fun (V117) -> fun (V118) -> fun (V119) -> fun (V120) -> begin (V121 = (V118(V120))), ((V119(V121))(V120)) end end end end end end, fun (V122) -> fun (V123) -> fun (V124) -> begin (V125 = (V123(V124))), (V125(V124)) end end end end}, fun (V126) -> fun (V127) -> V127 end end}, V17, ('Idris.Idris2.TTImp.Elab.Check':'un--addBindIfUnsolved'(V0, V56, V15, {'Idris.Core.TT.AutoImplicit'}, V12, V65, V62, V100))))(V22))), {'Idris.Prelude.Types.Right', V128} end), case V129 of {'Idris.Prelude.Types.Left', E14} -> (fun (V130) -> {'Idris.Prelude.Types.Left', V130} end(E14)); {'Idris.Prelude.Types.Right', E15} -> (fun (V131) -> (('un--checkAppWith'(V0, V20, V19, V18, V17, V16, V14, V13, V12, V11, V66, V69, {'Idris.Builtin.MkPair', V1, ('Idris.Idris2.Prelude.Types':'dn--un--+_Num__Nat'(('Idris.Idris2.Prelude.Types':'dn--un--fromInteger_Num__Nat'(1)), V2))}, V6, V5, V4, V3))(V22)) end(E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end; 1 -> fun (V132) -> begin (V161 = begin (V160 = (('Idris.Idris2.Erlang.Data.IORef':'un--readIORef'('erased', 'erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V133) -> fun (V134) -> fun (V135) -> fun (V136) -> fun (V137) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor__IO'('erased', 'erased', V135, V136, V137)) end end end end end, fun (V138) -> fun (V139) -> fun (V140) -> V139 end end end, fun (V141) -> fun (V142) -> fun (V143) -> fun (V144) -> fun (V145) -> begin (V146 = (V143(V145))), begin (V147 = (V144(V145))), (V146(V147)) end end end end end end end}, fun (V148) -> fun (V149) -> fun (V150) -> fun (V151) -> fun (V152) -> begin (V153 = (V150(V152))), ((V151(V153))(V152)) end end end end end end, fun (V154) -> fun (V155) -> fun (V156) -> begin (V157 = (V155(V156))), (V157(V156)) end end end end}, fun (V158) -> fun (V159) -> V159 end end}, V20))(V132))), {'Idris.Prelude.Types.Right', V160} end), case V161 of {'Idris.Prelude.Types.Left', E16} -> (fun (V162) -> {'Idris.Prelude.Types.Left', V162} end(E16)); {'Idris.Prelude.Types.Right', E17} -> (fun (V163) -> begin (V164 = (('Idris.Idris2.Core.UnifyState':'un--genMVName'(V20, V18, V9))(V132))), case V164 of {'Idris.Prelude.Types.Left', E18} -> (fun (V165) -> {'Idris.Prelude.Types.Left', V165} end(E18)); {'Idris.Prelude.Types.Right', E19} -> (fun (V166) -> begin (V167 = ('Idris.Idris2.Core.Normalise':'dn--un--quote_Quote__NF'(V20, V0, V163, V12, V8, V132))), case V167 of {'Idris.Prelude.Types.Left', E20} -> (fun (V168) -> {'Idris.Prelude.Types.Left', V168} end(E20)); {'Idris.Prelude.Types.Right', E21} -> (fun (V169) -> begin (V198 = begin (V197 = (('Idris.Idris2.Erlang.Data.IORef':'un--readIORef'('erased', 'erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V170) -> fun (V171) -> fun (V172) -> fun (V173) -> fun (V174) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor__IO'('erased', 'erased', V172, V173, V174)) end end end end end, fun (V175) -> fun (V176) -> fun (V177) -> V176 end end end, fun (V178) -> fun (V179) -> fun (V180) -> fun (V181) -> fun (V182) -> begin (V183 = (V180(V182))), begin (V184 = (V181(V182))), (V183(V184)) end end end end end end end}, fun (V185) -> fun (V186) -> fun (V187) -> fun (V188) -> fun (V189) -> begin (V190 = (V187(V189))), ((V188(V190))(V189)) end end end end end end, fun (V191) -> fun (V192) -> fun (V193) -> begin (V194 = (V192(V193))), (V194(V193)) end end end end}, fun (V195) -> fun (V196) -> V196 end end}, V17))(V132))), {'Idris.Prelude.Types.Right', V197} end), case V198 of {'Idris.Prelude.Types.Left', E22} -> (fun (V199) -> {'Idris.Prelude.Types.Left', V199} end(E22)); {'Idris.Prelude.Types.Right', E23} -> (fun (V200) -> begin (V201 = ('Idris.Idris2.Core.Context':'un--getAutoImplicitLimit'(V20, V132))), case V201 of {'Idris.Prelude.Types.Left', E24} -> (fun (V202) -> {'Idris.Prelude.Types.Left', V202} end(E24)); {'Idris.Prelude.Types.Right', E25} -> (fun (V203) -> begin (V217 = ('Idris.Idris2.TTImp.Elab.Check':'un--searchVar'(V0, V20, V18, V11, V15, V203, {'Idris.Core.Name.Resolved', case V200 of {'Idris.TTImp.Elab.Check.MkEState', E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38} -> (fun (V204, V205, V206, V207, V208, V209, V210, V211, V212, V213, V214, V215, V216) -> V205 end(E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end}, V12, V166, V169, V132))), case V217 of {'Idris.Prelude.Types.Left', E39} -> (fun (V218) -> {'Idris.Prelude.Types.Left', V218} end(E39)); {'Idris.Prelude.Types.Right', E40} -> (fun (V219) -> begin (V220 = {'Idris.Core.TT.App', V11, V10, V219}), begin (V221 = (((V7(V163))(('Idris.Idris2.Core.Normalise':'un--toClosure'('erased', ('Idris.Idris2.Core.Value':'un--defaultOpts'()), V12, V219))))(V132))), case V221 of {'Idris.Prelude.Types.Left', E41} -> (fun (V222) -> {'Idris.Prelude.Types.Left', V222} end(E41)); {'Idris.Prelude.Types.Right', E42} -> (fun (V223) -> (('un--checkAppWith'(V0, V20, V19, V18, V17, V16, V14, V13, V12, V11, V220, V223, {'Idris.Builtin.MkPair', V1, ('Idris.Idris2.Prelude.Types':'dn--un--+_Num__Nat'(('Idris.Idris2.Prelude.Types':'dn--un--fromInteger_Num__Nat'(1)), V2))}, V6, V5, V4, V3))(V132)) end(E42)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E40)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E25)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E23)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E19)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E17)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in case block in getVarType-4826'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17) -> case V17 of {'Idris.Core.Context.PMDef', E0, E1, E2, E3, E4} -> (fun (V18, V19, V20, V21, V22) -> {'Idris.Core.TT.Func'} end(E0, E1, E2, E3, E4)); {'Idris.Core.Context.DCon', E5, E6, E7} -> (fun (V23, V24, V25) -> {'Idris.Core.TT.DataCon', V23, V24} end(E5, E6, E7)); {'Idris.Core.Context.TCon', E8, E9, E10, E11, E12, E13, E14, E15} -> (fun (V26, V27, V28, V29, V30, V31, V32, V33) -> {'Idris.Core.TT.TyCon', V26, V27} end(E8, E9, E10, E11, E12, E13, E14, E15)); _ -> {'Idris.Core.TT.Func'} end.
'case--case block in getVarType-4753'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15) -> case V15 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V16) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable__Core_Error'('erased', {'Idris.Core.Core.UndefinedName', V2, V14}, V16)) end end()); {'Idris.Prelude.Types.Just', E0} -> (fun (V17) -> begin (V40 = begin (V18 = {'Idris.Prelude.Types.Just', V17}), ('case--case block in case block in getVarType-4826'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V17, V18, case V17 of {'Idris.Core.Context.MkGlobalDef', E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21} -> (fun (V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39) -> V36 end(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)) end), begin (V41 = ((V11(V2))(V40))), begin (V63 = ('nested--10299-4560--in--un--useVars'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V0, ('Idris.Idris2.Core.TT':'un--getArgs'('erased', V41)), ('Idris.Idris2.Core.TT':'un--embed'('erased', 'erased', case V17 of {'Idris.Core.Context.MkGlobalDef', E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42} -> (fun (V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62) -> V44 end(E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))))), fun (V64) -> begin (V107 = (('un--checkVisibleNS'(V8, V2, case V17 of {'Idris.Core.Context.MkGlobalDef', E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57, E58, E59, E60, E61, E62, E63} -> (fun (V65, V66, V67, V68, V69, V70, V71, V72, V73, V74, V75, V76, V77, V78, V79, V80, V81, V82, V83, V84, V85) -> V66 end(E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57, E58, E59, E60, E61, E62, E63)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, case V17 of {'Idris.Core.Context.MkGlobalDef', E64, E65, E66, E67, E68, E69, E70, E71, E72, E73, E74, E75, E76, E77, E78, E79, E80, E81, E82, E83, E84} -> (fun (V86, V87, V88, V89, V90, V91, V92, V93, V94, V95, V96, V97, V98, V99, V100, V101, V102, V103, V104, V105, V106) -> V95 end(E64, E65, E66, E67, E68, E69, E70, E71, E72, E73, E74, E75, E76, E77, E78, E79, E80, E81, E82, E83, E84)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V64))), case V107 of {'Idris.Prelude.Types.Left', E85} -> (fun (V108) -> {'Idris.Prelude.Types.Left', V108} end(E85)); {'Idris.Prelude.Types.Right', E86} -> (fun (V109) -> begin (V110 = ('Idris.Idris2.Core.Context.Log':'un--logTerm'(V0, V8, <<"elab"/utf8>>, (1 + (1 + (1 + (1 + (1 + 0))))), fun () -> ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"Type of "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show__Name'(V14)))) end, V63, V64))), case V110 of {'Idris.Prelude.Types.Left', E87} -> (fun (V111) -> {'Idris.Prelude.Types.Left', V111} end(E87)); {'Idris.Prelude.Types.Right', E88} -> (fun (V112) -> begin (V113 = ('Idris.Idris2.Core.Context.Log':'un--logTerm'(V0, V8, <<"elab"/utf8>>, (1 + (1 + (1 + (1 + (1 + 0))))), fun () -> <<"Expands to"/utf8>> end, V41, V64))), case V113 of {'Idris.Prelude.Types.Left', E89} -> (fun (V114) -> {'Idris.Prelude.Types.Left', V114} end(E89)); {'Idris.Prelude.Types.Right', E90} -> (fun (V115) -> begin (V116 = (('Idris.Idris2.Core.Context.Log':'un--log'(V8, <<"elab"/utf8>>, (1 + (1 + (1 + (1 + (1 + 0))))), fun () -> ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"Arg length "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show__Nat'(V13)))) end))(V64))), case V116 of {'Idris.Prelude.Types.Left', E91} -> (fun (V117) -> {'Idris.Prelude.Types.Left', V117} end(E91)); {'Idris.Prelude.Types.Right', E92} -> (fun (V118) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V41, {'Idris.Builtin.MkPair', V13, ('Idris.Idris2.Core.Normalise':'un--gnf'(V0, V3, V63))}}} end(E92)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E90)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E88)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E86)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end end end(E0)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in getVarType-4664'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9) -> case V9 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V10, V11) -> fun (V12) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V10, {'Idris.Builtin.MkPair', 0, V11}}} end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--getVarType-4631'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9) -> case V9 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V10) -> begin (V11 = (('un--getNameType'(V0, V8, V7, V6, V5, V3, V2, V1))(V10))), case V11 of {'Idris.Prelude.Types.Left', E0} -> (fun (V12) -> {'Idris.Prelude.Types.Left', V12} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V13) -> case V13 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V14, V15) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V14, {'Idris.Builtin.MkPair', 0, V15}}} end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end()); {'Idris.Prelude.Types.Just', E4} -> (fun (V16) -> case V16 of {'Idris.Builtin.MkPair', E5, E6} -> (fun (V17, V18) -> case V18 of {'Idris.Builtin.MkPair', E7, E8} -> (fun (V19, V20) -> fun (V21) -> begin (V50 = begin (V49 = (('Idris.Idris2.Erlang.Data.IORef':'un--readIORef'('erased', 'erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V22) -> fun (V23) -> fun (V24) -> fun (V25) -> fun (V26) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor__IO'('erased', 'erased', V24, V25, V26)) end end end end end, fun (V27) -> fun (V28) -> fun (V29) -> V28 end end end, fun (V30) -> fun (V31) -> fun (V32) -> fun (V33) -> fun (V34) -> begin (V35 = (V32(V34))), begin (V36 = (V33(V34))), (V35(V36)) end end end end end end end}, fun (V37) -> fun (V38) -> fun (V39) -> fun (V40) -> fun (V41) -> begin (V42 = (V39(V41))), ((V40(V42))(V41)) end end end end end end, fun (V43) -> fun (V44) -> fun (V45) -> begin (V46 = (V44(V45))), (V46(V45)) end end end end}, fun (V47) -> fun (V48) -> V48 end end}, V8))(V21))), {'Idris.Prelude.Types.Right', V49} end), case V50 of {'Idris.Prelude.Types.Left', E9} -> (fun (V51) -> {'Idris.Prelude.Types.Left', V51} end(E9)); {'Idris.Prelude.Types.Right', E10} -> (fun (V52) -> begin (V53 = ('Idris.Idris2.Prelude.Types.List':'un--length'('erased', V19))), begin (V55 = ('Idris.Idris2.Prelude.Types':'un--maybe'('erased', 'erased', fun () -> V1 end, fun () -> fun (V54) -> V54 end end, V17))), begin (V82 = (('Idris.Idris2.Core.Context':'un--lookupCtxtExact'(V55, case V52 of {'Idris.Core.Context.MkDefs', E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36} -> (fun (V56, V57, V58, V59, V60, V61, V62, V63, V64, V65, V66, V67, V68, V69, V70, V71, V72, V73, V74, V75, V76, V77, V78, V79, V80, V81) -> V56 end(E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V21))), case V82 of {'Idris.Prelude.Types.Left', E37} -> (fun (V83) -> {'Idris.Prelude.Types.Left', V83} end(E37)); {'Idris.Prelude.Types.Right', E38} -> (fun (V84) -> case V84 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable__Core_Error'('erased', {'Idris.Core.Core.UndefinedName', V2, V55}, V21)) end()); {'Idris.Prelude.Types.Just', E39} -> (fun (V85) -> begin (V108 = begin (V86 = {'Idris.Prelude.Types.Just', V85}), ('case--case block in case block in getVarType-4826'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V17, V19, V20, V52, V53, V55, V85, V86, case V85 of {'Idris.Core.Context.MkGlobalDef', E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57, E58, E59, E60} -> (fun (V87, V88, V89, V90, V91, V92, V93, V94, V95, V96, V97, V98, V99, V100, V101, V102, V103, V104, V105, V106, V107) -> V104 end(E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57, E58, E59, E60)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)) end), begin (V109 = ((V20(V2))(V108))), begin (V131 = ('nested--10299-4560--in--un--useVars'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V0, ('Idris.Idris2.Core.TT':'un--getArgs'('erased', V109)), ('Idris.Idris2.Core.TT':'un--embed'('erased', 'erased', case V85 of {'Idris.Core.Context.MkGlobalDef', E61, E62, E63, E64, E65, E66, E67, E68, E69, E70, E71, E72, E73, E74, E75, E76, E77, E78, E79, E80, E81} -> (fun (V110, V111, V112, V113, V114, V115, V116, V117, V118, V119, V120, V121, V122, V123, V124, V125, V126, V127, V128, V129, V130) -> V112 end(E61, E62, E63, E64, E65, E66, E67, E68, E69, E70, E71, E72, E73, E74, E75, E76, E77, E78, E79, E80, E81)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))))), begin (V174 = (('un--checkVisibleNS'(V8, V2, case V85 of {'Idris.Core.Context.MkGlobalDef', E82, E83, E84, E85, E86, E87, E88, E89, E90, E91, E92, E93, E94, E95, E96, E97, E98, E99, E100, E101, E102} -> (fun (V132, V133, V134, V135, V136, V137, V138, V139, V140, V141, V142, V143, V144, V145, V146, V147, V148, V149, V150, V151, V152) -> V133 end(E82, E83, E84, E85, E86, E87, E88, E89, E90, E91, E92, E93, E94, E95, E96, E97, E98, E99, E100, E101, E102)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, case V85 of {'Idris.Core.Context.MkGlobalDef', E103, E104, E105, E106, E107, E108, E109, E110, E111, E112, E113, E114, E115, E116, E117, E118, E119, E120, E121, E122, E123} -> (fun (V153, V154, V155, V156, V157, V158, V159, V160, V161, V162, V163, V164, V165, V166, V167, V168, V169, V170, V171, V172, V173) -> V162 end(E103, E104, E105, E106, E107, E108, E109, E110, E111, E112, E113, E114, E115, E116, E117, E118, E119, E120, E121, E122, E123)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V21))), case V174 of {'Idris.Prelude.Types.Left', E124} -> (fun (V175) -> {'Idris.Prelude.Types.Left', V175} end(E124)); {'Idris.Prelude.Types.Right', E125} -> (fun (V176) -> begin (V177 = ('Idris.Idris2.Core.Context.Log':'un--logTerm'(V0, V8, <<"elab"/utf8>>, (1 + (1 + (1 + (1 + (1 + 0))))), fun () -> ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"Type of "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show__Name'(V55)))) end, V131, V21))), case V177 of {'Idris.Prelude.Types.Left', E126} -> (fun (V178) -> {'Idris.Prelude.Types.Left', V178} end(E126)); {'Idris.Prelude.Types.Right', E127} -> (fun (V179) -> begin (V180 = ('Idris.Idris2.Core.Context.Log':'un--logTerm'(V0, V8, <<"elab"/utf8>>, (1 + (1 + (1 + (1 + (1 + 0))))), fun () -> <<"Expands to"/utf8>> end, V109, V21))), case V180 of {'Idris.Prelude.Types.Left', E128} -> (fun (V181) -> {'Idris.Prelude.Types.Left', V181} end(E128)); {'Idris.Prelude.Types.Right', E129} -> (fun (V182) -> begin (V183 = (('Idris.Idris2.Core.Context.Log':'un--log'(V8, <<"elab"/utf8>>, (1 + (1 + (1 + (1 + (1 + 0))))), fun () -> ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"Arg length "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show__Nat'(V53)))) end))(V21))), case V183 of {'Idris.Prelude.Types.Left', E130} -> (fun (V184) -> {'Idris.Prelude.Types.Left', V184} end(E130)); {'Idris.Prelude.Types.Right', E131} -> (fun (V185) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V109, {'Idris.Builtin.MkPair', V53, ('Idris.Idris2.Core.Normalise':'un--gnf'(V0, V3, V131))}}} end(E131)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E129)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E127)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E125)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end end(E39)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E38)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end(E10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E7, E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E5, E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in case block in getNameType-4316'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15) -> case V15 of {'Idris.Core.Context.PMDef', E0, E1, E2, E3, E4} -> (fun (V16, V17, V18, V19, V20) -> {'Idris.Core.TT.Func'} end(E0, E1, E2, E3, E4)); {'Idris.Core.Context.DCon', E5, E6, E7} -> (fun (V21, V22, V23) -> {'Idris.Core.TT.DataCon', V21, V22} end(E5, E6, E7)); {'Idris.Core.Context.TCon', E8, E9, E10, E11, E12, E13, E14, E15} -> (fun (V24, V25, V26, V27, V28, V29, V30, V31) -> {'Idris.Core.TT.TyCon', V24, V25} end(E8, E9, E10, E11, E12, E13, E14, E15)); _ -> {'Idris.Core.TT.Func'} end.
'case--case block in getNameType-4270'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9) -> case V9 of [E0 | E1] -> (fun (V10, V11) -> case V10 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V12, V13) -> case V13 of {'Idris.Builtin.MkPair', E4, E5} -> (fun (V14, V15) -> case V11 of [] -> fun (V16) -> begin (V41 = begin (V17 = (('Idris.Idris2.Core.Context':'un--getFullName'(V7, V12))(V16))), case V17 of {'Idris.Prelude.Types.Left', E6} -> (fun (V18) -> {'Idris.Prelude.Types.Left', V18} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V19) -> (('un--checkVisibleNS'(V7, V2, V19, case V15 of {'Idris.Core.Context.MkGlobalDef', E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28} -> (fun (V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40) -> V29 end(E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V16)) end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V41 of {'Idris.Prelude.Types.Left', E29} -> (fun (V42) -> {'Idris.Prelude.Types.Left', V42} end(E29)); {'Idris.Prelude.Types.Right', E30} -> (fun (V43) -> begin (V65 = ('nested--9751-4053--in--un--rigSafe'(V0, V1, V2, V3, V4, V5, V6, V7, case V15 of {'Idris.Core.Context.MkGlobalDef', E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51} -> (fun (V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62, V63, V64) -> V51 end(E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V4, V16))), case V65 of {'Idris.Prelude.Types.Left', E52} -> (fun (V66) -> {'Idris.Prelude.Types.Left', V66} end(E52)); {'Idris.Prelude.Types.Right', E53} -> (fun (V67) -> begin (V90 = begin (V68 = [{'Idris.Builtin.MkPair', V12, {'Idris.Builtin.MkPair', V14, V15}} | []]), ('case--case block in case block in getNameType-4316'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V12, V14, V15, V68, V43, V67, case V15 of {'Idris.Core.Context.MkGlobalDef', E54, E55, E56, E57, E58, E59, E60, E61, E62, E63, E64, E65, E66, E67, E68, E69, E70, E71, E72, E73, E74} -> (fun (V69, V70, V71, V72, V73, V74, V75, V76, V77, V78, V79, V80, V81, V82, V83, V84, V85, V86, V87, V88, V89) -> V86 end(E54, E55, E56, E57, E58, E59, E60, E61, E62, E63, E64, E65, E66, E67, E68, E69, E70, E71, E72, E73, E74)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)) end), {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', {'Idris.Core.TT.Ref', V2, V90, {'Idris.Core.Name.Resolved', V14}}, ('Idris.Idris2.Core.Normalise':'un--gnf'(V0, V3, ('Idris.Idris2.Core.TT':'un--embed'('erased', 'erased', case V15 of {'Idris.Core.Context.MkGlobalDef', E75, E76, E77, E78, E79, E80, E81, E82, E83, E84, E85, E86, E87, E88, E89, E90, E91, E92, E93, E94, E95} -> (fun (V91, V92, V93, V94, V95, V96, V97, V98, V99, V100, V101, V102, V103, V104, V105, V106, V107, V108, V109, V110, V111) -> V93 end(E75, E76, E77, E78, E79, E80, E81, E82, E83, E84, E85, E86, E87, E88, E89, E90, E91, E92, E93, E94, E95)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))))}} end end(E53)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E30)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end; _ -> fun (V112) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable__Core_Error'('erased', {'Idris.Core.Core.AmbiguousName', V2, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', fun (V113) -> ('Idris.Idris2.Builtin':'un--fst'('erased', 'erased', V113)) end, V9))}, V112)) end end end(E4, E5)); _ -> fun (V114) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable__Core_Error'('erased', {'Idris.Core.Core.AmbiguousName', V2, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', fun (V115) -> ('Idris.Idris2.Builtin':'un--fst'('erased', 'erased', V115)) end, V9))}, V114)) end end end(E2, E3)); _ -> fun (V116) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable__Core_Error'('erased', {'Idris.Core.Core.AmbiguousName', V2, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', fun (V117) -> ('Idris.Idris2.Builtin':'un--fst'('erased', 'erased', V117)) end, V9))}, V116)) end end end(E0, E1)); [] -> fun (V118) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable__Core_Error'('erased', {'Idris.Core.Core.UndefinedName', V2, V1}, V118)) end; _ -> fun (V119) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable__Core_Error'('erased', {'Idris.Core.Core.AmbiguousName', V2, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', fun (V120) -> ('Idris.Idris2.Builtin':'un--fst'('erased', 'erased', V120)) end, V9))}, V119)) end end.
'case--case block in getNameType-4189'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15) -> case V15 of {'Idris.TTImp.Elab.Check.MkEState', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12} -> (fun (V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28) -> {'Idris.TTImp.Elab.Check.MkEState', V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, [V8 | V26], V27, V28} end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--getNameType-4079'(V0, V1, V2, V3, V4, V5, V6, V7, V8) -> case V8 of {'Idris.Prelude.Types.Just', E0} -> (fun (V9) -> case V9 of {'Idris.Core.Env.MkIsDefined', E1, E2} -> (fun (V10, V11) -> fun (V12) -> begin (V13 = ('nested--9751-4053--in--un--rigSafe'(V0, V1, V2, V3, V4, V5, V6, V7, V11, V4, V12))), case V13 of {'Idris.Prelude.Types.Left', E3} -> (fun (V14) -> {'Idris.Prelude.Types.Left', V14} end(E3)); {'Idris.Prelude.Types.Right', E4} -> (fun (V15) -> begin (V23 = ('Idris.Idris2.Core.Env':'un--getBinder'('erased', 'erased', {'Idris.Core.TT.dn--un--__mkWeaken', fun (V16) -> fun (V17) -> fun (V18) -> ('Idris.Idris2.Core.TT':'dn--un--weaken_Weaken__Term'('erased', 'erased', V18)) end end end, fun (V19) -> fun (V20) -> fun (V21) -> fun (V22) -> ('Idris.Idris2.Core.TT':'dn--un--weakenNs_Weaken__Term'('erased', 'erased', V21, V22)) end end end end}, V0, V10, 'erased', V3))), begin (V24 = ('Idris.Idris2.Core.TT':'un--binderType'('erased', V23))), begin (V25 = ('Idris.Idris2.Core.Metadata':'un--addNameType'(V0, V7, V6, V2, V1, V3, V24, V12))), case V25 of {'Idris.Prelude.Types.Left', E5} -> (fun (V26) -> {'Idris.Prelude.Types.Left', V26} end(E5)); {'Idris.Prelude.Types.Right', E6} -> (fun (V27) -> begin (V108 = case ('Idris.Idris2.Algebra.Semiring':'un--isLinear'('erased', {'Idris.Builtin.MkPair', {'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V28) -> fun (V29) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring__ZeroOneOmega'(V28, V29)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring__ZeroOneOmega'()), fun (V30) -> fun (V31) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring__ZeroOneOmega'(V30, V31)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring__ZeroOneOmega'())}, {'Idris.Prelude.EqOrd.dn--un--__mkEq', fun (V32) -> fun (V33) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--==_Eq__ZeroOneOmega'(V32, V33)) end end, fun (V34) -> fun (V35) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--/=_Eq__ZeroOneOmega'(V34, V35)) end end}}, V11)) of 0 -> begin (V64 = begin (V63 = (('Idris.Idris2.Erlang.Data.IORef':'un--readIORef'('erased', 'erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V36) -> fun (V37) -> fun (V38) -> fun (V39) -> fun (V40) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor__IO'('erased', 'erased', V38, V39, V40)) end end end end end, fun (V41) -> fun (V42) -> fun (V43) -> V42 end end end, fun (V44) -> fun (V45) -> fun (V46) -> fun (V47) -> fun (V48) -> begin (V49 = (V46(V48))), begin (V50 = (V47(V48))), (V49(V50)) end end end end end end end}, fun (V51) -> fun (V52) -> fun (V53) -> fun (V54) -> fun (V55) -> begin (V56 = (V53(V55))), ((V54(V56))(V55)) end end end end end end, fun (V57) -> fun (V58) -> fun (V59) -> begin (V60 = (V58(V59))), (V60(V59)) end end end end}, fun (V61) -> fun (V62) -> V62 end end}, V5))(V12))), {'Idris.Prelude.Types.Right', V63} end), case V64 of {'Idris.Prelude.Types.Left', E7} -> (fun (V65) -> {'Idris.Prelude.Types.Left', V65} end(E7)); {'Idris.Prelude.Types.Right', E8} -> (fun (V66) -> begin (V107 = (('Idris.Idris2.Erlang.Data.IORef':'un--writeIORef'('erased', 'erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V67) -> fun (V68) -> fun (V69) -> fun (V70) -> fun (V71) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor__IO'('erased', 'erased', V69, V70, V71)) end end end end end, fun (V72) -> fun (V73) -> fun (V74) -> V73 end end end, fun (V75) -> fun (V76) -> fun (V77) -> fun (V78) -> fun (V79) -> begin (V80 = (V77(V79))), begin (V81 = (V78(V79))), (V80(V81)) end end end end end end end}, fun (V82) -> fun (V83) -> fun (V84) -> fun (V85) -> fun (V86) -> begin (V87 = (V84(V86))), ((V85(V87))(V86)) end end end end end end, fun (V88) -> fun (V89) -> fun (V90) -> begin (V91 = (V89(V90))), (V91(V90)) end end end end}, fun (V92) -> fun (V93) -> V93 end end}, V5, case V66 of {'Idris.TTImp.Elab.Check.MkEState', E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21} -> (fun (V94, V95, V96, V97, V98, V99, V100, V101, V102, V103, V104, V105, V106) -> {'Idris.TTImp.Elab.Check.MkEState', V94, V95, V96, V97, V98, V99, V100, V101, V102, V103, [V10 | V104], V105, V106} end(E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V12))), {'Idris.Prelude.Types.Right', V107} end end(E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; 1 -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end), case V108 of {'Idris.Prelude.Types.Left', E22} -> (fun (V109) -> {'Idris.Prelude.Types.Left', V109} end(E22)); {'Idris.Prelude.Types.Right', E23} -> (fun (V110) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', {'Idris.Core.TT.Local', V2, {'Idris.Prelude.Types.Just', ('Idris.Idris2.Core.TT':'un--isLet'('erased', V23))}, V10}, ('Idris.Idris2.Core.Normalise':'un--gnf'(V0, V3, V24))}} end(E23)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end(E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V111) -> begin (V140 = begin (V139 = (('Idris.Idris2.Erlang.Data.IORef':'un--readIORef'('erased', 'erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V112) -> fun (V113) -> fun (V114) -> fun (V115) -> fun (V116) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor__IO'('erased', 'erased', V114, V115, V116)) end end end end end, fun (V117) -> fun (V118) -> fun (V119) -> V118 end end end, fun (V120) -> fun (V121) -> fun (V122) -> fun (V123) -> fun (V124) -> begin (V125 = (V122(V124))), begin (V126 = (V123(V124))), (V125(V126)) end end end end end end end}, fun (V127) -> fun (V128) -> fun (V129) -> fun (V130) -> fun (V131) -> begin (V132 = (V129(V131))), ((V130(V132))(V131)) end end end end end end, fun (V133) -> fun (V134) -> fun (V135) -> begin (V136 = (V134(V135))), (V136(V135)) end end end end}, fun (V137) -> fun (V138) -> V138 end end}, V7))(V111))), {'Idris.Prelude.Types.Right', V139} end), case V140 of {'Idris.Prelude.Types.Left', E24} -> (fun (V141) -> {'Idris.Prelude.Types.Left', V141} end(E24)); {'Idris.Prelude.Types.Right', E25} -> (fun (V142) -> begin (V169 = (('Idris.Idris2.Core.Context':'un--lookupCtxtName'(V1, case V142 of {'Idris.Core.Context.MkDefs', E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51} -> (fun (V143, V144, V145, V146, V147, V148, V149, V150, V151, V152, V153, V154, V155, V156, V157, V158, V159, V160, V161, V162, V163, V164, V165, V166, V167, V168) -> V143 end(E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V111))), case V169 of {'Idris.Prelude.Types.Left', E52} -> (fun (V170) -> {'Idris.Prelude.Types.Left', V170} end(E52)); {'Idris.Prelude.Types.Right', E53} -> (fun (V171) -> case V171 of [E54 | E55] -> (fun (V172, V173) -> case V172 of {'Idris.Builtin.MkPair', E56, E57} -> (fun (V174, V175) -> case V175 of {'Idris.Builtin.MkPair', E58, E59} -> (fun (V176, V177) -> case V173 of [] -> begin (V202 = begin (V178 = (('Idris.Idris2.Core.Context':'un--getFullName'(V7, V174))(V111))), case V178 of {'Idris.Prelude.Types.Left', E60} -> (fun (V179) -> {'Idris.Prelude.Types.Left', V179} end(E60)); {'Idris.Prelude.Types.Right', E61} -> (fun (V180) -> (('un--checkVisibleNS'(V7, V2, V180, case V177 of {'Idris.Core.Context.MkGlobalDef', E62, E63, E64, E65, E66, E67, E68, E69, E70, E71, E72, E73, E74, E75, E76, E77, E78, E79, E80, E81, E82} -> (fun (V181, V182, V183, V184, V185, V186, V187, V188, V189, V190, V191, V192, V193, V194, V195, V196, V197, V198, V199, V200, V201) -> V190 end(E62, E63, E64, E65, E66, E67, E68, E69, E70, E71, E72, E73, E74, E75, E76, E77, E78, E79, E80, E81, E82)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V111)) end(E61)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V202 of {'Idris.Prelude.Types.Left', E83} -> (fun (V203) -> {'Idris.Prelude.Types.Left', V203} end(E83)); {'Idris.Prelude.Types.Right', E84} -> (fun (V204) -> begin (V226 = ('nested--9751-4053--in--un--rigSafe'(V0, V1, V2, V3, V4, V5, V6, V7, case V177 of {'Idris.Core.Context.MkGlobalDef', E85, E86, E87, E88, E89, E90, E91, E92, E93, E94, E95, E96, E97, E98, E99, E100, E101, E102, E103, E104, E105} -> (fun (V205, V206, V207, V208, V209, V210, V211, V212, V213, V214, V215, V216, V217, V218, V219, V220, V221, V222, V223, V224, V225) -> V212 end(E85, E86, E87, E88, E89, E90, E91, E92, E93, E94, E95, E96, E97, E98, E99, E100, E101, E102, E103, E104, E105)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V4, V111))), case V226 of {'Idris.Prelude.Types.Left', E106} -> (fun (V227) -> {'Idris.Prelude.Types.Left', V227} end(E106)); {'Idris.Prelude.Types.Right', E107} -> (fun (V228) -> begin (V251 = begin (V229 = [{'Idris.Builtin.MkPair', V174, {'Idris.Builtin.MkPair', V176, V177}} | []]), ('case--case block in case block in getNameType-4316'(V0, V1, V2, V3, V4, V5, V6, V7, V142, V174, V176, V177, V229, V204, V228, case V177 of {'Idris.Core.Context.MkGlobalDef', E108, E109, E110, E111, E112, E113, E114, E115, E116, E117, E118, E119, E120, E121, E122, E123, E124, E125, E126, E127, E128} -> (fun (V230, V231, V232, V233, V234, V235, V236, V237, V238, V239, V240, V241, V242, V243, V244, V245, V246, V247, V248, V249, V250) -> V247 end(E108, E109, E110, E111, E112, E113, E114, E115, E116, E117, E118, E119, E120, E121, E122, E123, E124, E125, E126, E127, E128)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)) end), {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', {'Idris.Core.TT.Ref', V2, V251, {'Idris.Core.Name.Resolved', V176}}, ('Idris.Idris2.Core.Normalise':'un--gnf'(V0, V3, ('Idris.Idris2.Core.TT':'un--embed'('erased', 'erased', case V177 of {'Idris.Core.Context.MkGlobalDef', E129, E130, E131, E132, E133, E134, E135, E136, E137, E138, E139, E140, E141, E142, E143, E144, E145, E146, E147, E148, E149} -> (fun (V252, V253, V254, V255, V256, V257, V258, V259, V260, V261, V262, V263, V264, V265, V266, V267, V268, V269, V270, V271, V272) -> V254 end(E129, E130, E131, E132, E133, E134, E135, E136, E137, E138, E139, E140, E141, E142, E143, E144, E145, E146, E147, E148, E149)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))))}} end end(E107)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E84)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; _ -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable__Core_Error'('erased', {'Idris.Core.Core.AmbiguousName', V2, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', fun (V273) -> ('Idris.Idris2.Builtin':'un--fst'('erased', 'erased', V273)) end, V171))}, V111)) end end(E58, E59)); _ -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable__Core_Error'('erased', {'Idris.Core.Core.AmbiguousName', V2, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', fun (V274) -> ('Idris.Idris2.Builtin':'un--fst'('erased', 'erased', V274)) end, V171))}, V111)) end end(E56, E57)); _ -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable__Core_Error'('erased', {'Idris.Core.Core.AmbiguousName', V2, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', fun (V275) -> ('Idris.Idris2.Builtin':'un--fst'('erased', 'erased', V275)) end, V171))}, V111)) end end(E54, E55)); [] -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable__Core_Error'('erased', {'Idris.Core.Core.UndefinedName', V2, V1}, V111)); _ -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable__Core_Error'('erased', {'Idris.Core.Core.AmbiguousName', V2, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', fun (V276) -> ('Idris.Idris2.Builtin':'un--fst'('erased', 'erased', V276)) end, V171))}, V111)) end end(E53)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E25)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in checkVisibleNS-3972'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9) -> case V9 of 0 -> fun (V10) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end; 1 -> fun (V11) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable__Core_Error'('erased', {'Idris.Core.Core.InvisibleName', V3, {'Idris.Core.Name.NS', V1, V0}, {'Idris.Prelude.Types.Nothing'}}, V11)) end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--checkVisibleNS-3940'(V0, V1, V2, V3, V4, V5) -> case V5 of 0 -> fun (V6) -> begin (V7 = ('Idris.Idris2.Core.Context':'un--isAllPublic'(V4, V6))), case V7 of {'Idris.Prelude.Types.Left', E0} -> (fun (V8) -> {'Idris.Prelude.Types.Left', V8} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V9) -> begin (V10 = ('Idris.Idris2.Core.Context':'un--getNS'(V4, V6))), case V10 of {'Idris.Prelude.Types.Left', E2} -> (fun (V11) -> {'Idris.Prelude.Types.Left', V11} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V12) -> begin (V13 = ('Idris.Idris2.Core.Context':'un--getNestedNS'(V4, V6))), case V13 of {'Idris.Prelude.Types.Left', E4} -> (fun (V14) -> {'Idris.Prelude.Types.Left', V14} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V15) -> begin (V16 = 0), (('case--case block in checkVisibleNS-3972'(V0, V1, V2, V3, V4, V16, V9, V12, V15, ('Idris.Idris2.Prelude.Basics':'un--||'(V9, fun () -> ('Idris.Idris2.Core.Context':'un--visibleInAny'([V12 | V15], {'Idris.Core.Name.NS', V1, V0}, V2)) end))))(V6)) end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end; 1 -> fun (V17) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable__Core_Error'('erased', {'Idris.Core.Core.InvisibleName', V3, {'Idris.Core.Name.NS', V1, V0}, {'Idris.Prelude.Types.Just', V1}}, V17)) end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--10299-4560--in--un--useVars'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11) -> case V10 of [] -> V11; [E8 | E9] -> (fun (V12, V13) -> case V11 of {'Idris.Core.TT.Bind', E18, E19, E20, E21} -> (fun (V14, V15, V16, V17) -> case V16 of {'Idris.Core.TT.Pi', E30, E31, E32, E33} -> (fun (V18, V19, V20, V21) -> {'Idris.Core.TT.Bind', V14, V15, {'Idris.Core.TT.Let', V18, V19, V12, V21}, ('nested--10299-4560--in--un--useVars'(V0, V1, V2, V3, V4, V5, V6, V7, V8, [V15 | V9], ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', fun (V22) -> ('Idris.Idris2.Core.TT':'dn--un--weaken_Weaken__Term'('erased', 'erased', V22)) end, V13)), V17))} end(E30, E31, E32, E33)); _ -> case V11 of {'Idris.Core.TT.Bind', E22, E23, E24, E25} -> (fun (V23, V24, V25, V26) -> case V25 of {'Idris.Core.TT.Let', E26, E27, E28, E29} -> (fun (V27, V28, V29, V30) -> {'Idris.Core.TT.Bind', V23, V24, {'Idris.Core.TT.Let', V27, V28, V29, V30}, ('nested--10299-4560--in--un--useVars'(V0, V1, V2, V3, V4, V5, V6, V7, V8, [V24 | V9], ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', fun (V31) -> ('Idris.Idris2.Core.TT':'dn--un--weaken_Weaken__Term'('erased', 'erased', V31)) end, V10)), V26))} end(E26, E27, E28, E29)); _ -> V11 end end(E22, E23, E24, E25)); _ -> V11 end end end(E18, E19, E20, E21)); _ -> case V11 of {'Idris.Core.TT.Bind', E10, E11, E12, E13} -> (fun (V32, V33, V34, V35) -> case V34 of {'Idris.Core.TT.Let', E14, E15, E16, E17} -> (fun (V36, V37, V38, V39) -> {'Idris.Core.TT.Bind', V32, V33, {'Idris.Core.TT.Let', V36, V37, V38, V39}, ('nested--10299-4560--in--un--useVars'(V0, V1, V2, V3, V4, V5, V6, V7, V8, [V33 | V9], ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', fun (V40) -> ('Idris.Idris2.Core.TT':'dn--un--weaken_Weaken__Term'('erased', 'erased', V40)) end, V10)), V35))} end(E14, E15, E16, E17)); _ -> V11 end end(E10, E11, E12, E13)); _ -> V11 end end end(E8, E9)); _ -> case V11 of {'Idris.Core.TT.Bind', E0, E1, E2, E3} -> (fun (V41, V42, V43, V44) -> case V43 of {'Idris.Core.TT.Let', E4, E5, E6, E7} -> (fun (V45, V46, V47, V48) -> {'Idris.Core.TT.Bind', V41, V42, {'Idris.Core.TT.Let', V45, V46, V47, V48}, ('nested--10299-4560--in--un--useVars'(V0, V1, V2, V3, V4, V5, V6, V7, V8, [V42 | V9], ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', fun (V49) -> ('Idris.Idris2.Core.TT':'dn--un--weaken_Weaken__Term'('erased', 'erased', V49)) end, V10)), V44))} end(E4, E5, E6, E7)); _ -> V11 end end(E0, E1, E2, E3)); _ -> V11 end end.
'nested--11008-10063--in--un--useImp'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24) -> case V24 of [] -> {'Idris.Prelude.Types.Nothing'}; [E0 | E1] -> (fun (V25, V26) -> case V25 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V27, V28) -> case V27 of {'Idris.Prelude.Types.Just', E4} -> (fun (V29) -> ('case--checkAppWith,useImp-10084'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V29, V28, V26, V23, ('Idris.Idris2.Core.Name':'dn--un--==_Eq__Name'(V6, V29)))) end(E4)); _ -> ('nested--11008-10063--in--un--useImp'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, [V25 | V23], V26)) end end(E2, E3)); _ -> ('nested--11008-10063--in--un--useImp'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, [V25 | V23], V26)) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--11008-9772--in--un--useImp'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23) -> case V23 of [] -> {'Idris.Prelude.Types.Nothing'}; [E0 | E1] -> (fun (V24, V25) -> case V24 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V26, V27) -> case V26 of {'Idris.Prelude.Types.Just', E4} -> (fun (V28) -> ('case--checkAppWith,useImp-9793'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V28, V27, V25, V22, ('Idris.Idris2.Core.Name':'dn--un--==_Eq__Name'(V5, V28)))) end(E4)); _ -> ('nested--11008-9772--in--un--useImp'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, [V24 | V22], V25)) end end(E2, E3)); _ -> ('nested--11008-9772--in--un--useImp'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, [V24 | V22], V25)) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--11008-9465--in--un--useAutoImp'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23) -> case V23 of [] -> {'Idris.Prelude.Types.Nothing'}; [E0 | E1] -> (fun (V24, V25) -> case V24 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V26, V27) -> case V26 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Just', {'Idris.Builtin.MkPair', V27, ('Idris.Idris2.Prelude.Types.List':'un--++'('erased', ('Idris.Idris2.Data.List':'un--reverse'('erased', V22)), V25))}} end()); {'Idris.Prelude.Types.Just', E4} -> (fun (V28) -> ('case--checkAppWith,useAutoImp-9503'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V28, V27, V25, V22, ('Idris.Idris2.Core.Name':'dn--un--==_Eq__Name'(V5, V28)))) end(E4)); _ -> ('nested--11008-9465--in--un--useAutoImp'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, [V24 | V22], V25)) end end(E2, E3)); _ -> ('nested--11008-9465--in--un--useAutoImp'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, [V24 | V22], V25)) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--17517-10971--in--un--updateElabInfo'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19) -> case V16 of {'Idris.TTImp.Elab.Check.InLHS', E0} -> (fun (V20) -> case V18 of [E1 | E2] -> (fun (V21, V22) -> case V21 of {'Idris.TTImp.TTImp.IPrimVal', E3, E4} -> (fun (V23, V24) -> case V22 of [] -> fun (V25) -> begin (V26 = (('Idris.Idris2.Core.Context':'un--getFullName'(V14, V17))(V25))), case V26 of {'Idris.Prelude.Types.Left', E5} -> (fun (V27) -> {'Idris.Prelude.Types.Left', V27} end(E5)); {'Idris.Prelude.Types.Right', E6} -> (fun (V28) -> (('case--checkApp,updateElabInfo-11347'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V20, V24, V23, V19, V17, V15, V28, ('nested--17517-10968--in--un--isPrimName'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V28))))(V25)) end(E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end; _ -> fun (V29) -> {'Idris.Prelude.Types.Right', V19} end end end(E3, E4)); _ -> fun (V30) -> {'Idris.Prelude.Types.Right', V19} end end end(E1, E2)); _ -> fun (V31) -> {'Idris.Prelude.Types.Right', V19} end end end(E0)); _ -> fun (V32) -> {'Idris.Prelude.Types.Right', V19} end end.
'nested--9751-4053--in--un--rigSafe'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10) -> begin (V11 = (('Idris.Idris2.Core.Context':'un--getFullName'(V7, V1))(V10))), case V11 of {'Idris.Prelude.Types.Left', E0} -> (fun (V12) -> {'Idris.Prelude.Types.Left', V12} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V13) -> case ('Idris.Idris2.Algebra.Preorder':'un--<'('erased', {'Idris.Builtin.MkPair', {'Idris.Algebra.Preorder.dn--un--__mkPreorder', fun (V14) -> fun (V15) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--<=_Preorder__ZeroOneOmega'(V14, V15)) end end, fun (V16) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--preorderRefl_Preorder__ZeroOneOmega'(V16)) end, fun (V17) -> fun (V18) -> fun (V19) -> fun (V20) -> fun (V21) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--preorderTrans_Preorder__ZeroOneOmega'(V17, V18, V19, V20, V21)) end end end end end}, {'Idris.Prelude.EqOrd.dn--un--__mkEq', fun (V22) -> fun (V23) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--==_Eq__ZeroOneOmega'(V22, V23)) end end, fun (V24) -> fun (V25) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--/=_Eq__ZeroOneOmega'(V24, V25)) end end}}, V8, V9)) of 0 -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable__Core_Error'('erased', {'Idris.Core.Core.LinearMisuse', V2, V13, V8, V9}, V10)); 1 -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'nested--11008-10372--in--un--notInfer'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16) -> case V16 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V17, V18) -> case V18 of {'Idris.TTImp.TTImp.Implicit', E2, E3} -> (fun (V19, V20) -> 1 end(E2, E3)); {'Idris.TTImp.TTImp.IAs', E4, E5, E6, E7} -> (fun (V21, V22, V23, V24) -> ('nested--11008-10372--in--un--notInfer'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, {'Idris.Builtin.MkPair', V17, V24})) end(E4, E5, E6, E7)); _ -> 0 end end(E0, E1)); _ -> 0 end.
'nested--17517-10970--in--un--normalisePrims'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19) -> begin (V20 = (('Idris.Idris2.Core.Context':'un--getFullName'(V14, V1))(V19))), case V20 of {'Idris.Prelude.Types.Left', E0} -> (fun (V21) -> {'Idris.Prelude.Types.Left', V21} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V22) -> (('case--checkApp,normalisePrims-11020'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V18, V17, V16, V22, ('nested--17517-10968--in--un--isPrimName'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V16, V22))))(V19)) end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'nested--10983-5641--in--un--metavarImp'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22) -> case V22 of {'Idris.TTImp.Elab.Check.InLHS', E0} -> (fun (V23) -> 0 end(E0)); {'Idris.TTImp.Elab.Check.InTransform'} -> (fun () -> 0 end()); _ -> 1 end.
'nested--10977-5378--in--un--metavarImp'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21) -> case V21 of {'Idris.TTImp.Elab.Check.InLHS', E0} -> (fun (V22) -> 0 end(E0)); {'Idris.TTImp.Elab.Check.InTransform'} -> (fun () -> 0 end()); _ -> 1 end.
'nested--17517-10968--in--un--isPrimName'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16) -> case V15 of [] -> 1; [E0 | E1] -> (fun (V17, V18) -> ('Idris.Idris2.Prelude.Basics':'un--||'(('Idris.Idris2.Core.Name':'dn--un--==_Eq__Name'(('Idris.Idris2.Core.Name':'un--dropNS'(V16)), V17)), fun () -> ('nested--17517-10968--in--un--isPrimName'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V18, V16)) end)) end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--10999-6329--in--un--dotTerm'(V0, V1, V2, V3, V4, V5, V6, V7, V8) -> case V8 of {'Idris.TTImp.TTImp.IMustUnify', E0, E1, E2} -> (fun (V9, V10, V11) -> V8 end(E0, E1, E2)); {'Idris.TTImp.TTImp.IBindVar', E3, E4} -> (fun (V12, V13) -> V8 end(E3, E4)); {'Idris.TTImp.TTImp.Implicit', E5, E6} -> (fun (V14, V15) -> V8 end(E5, E6)); {'Idris.TTImp.TTImp.IAs', E7, E8, E9, E10} -> (fun (V16, V17, V18, V19) -> case V19 of {'Idris.TTImp.TTImp.IBindVar', E11, E12} -> (fun (V20, V21) -> V8 end(E11, E12)); {'Idris.TTImp.TTImp.Implicit', E13, E14} -> (fun (V22, V23) -> V8 end(E13, E14)); _ -> {'Idris.TTImp.TTImp.IAs', V16, V17, V18, {'Idris.TTImp.TTImp.IMustUnify', V16, {'Idris.Core.Core.ErasedArg'}, V8}} end end(E7, E8, E9, E10)); _ -> {'Idris.TTImp.TTImp.IMustUnify', ('Idris.Idris2.TTImp.TTImp':'un--getFC'(V8)), {'Idris.Core.Core.ErasedArg'}, V8} end.
'nested--10999-6328--in--un--countConstructors'(V0, V1, V2, V3, V4, V5, V6, V7, V8) -> case V8 of {'Idris.Core.Value.NTCon', E0, E1, E2, E3, E4} -> (fun (V9, V10, V11, V12, V13) -> ('case--dotErased,countConstructors-6344'('erased', V1, V2, V3, V4, V5, V6, V7, V9, V11, V13, V12, V10, ('Idris.Idris2.Prelude.Types':'dn--un--==_Eq__Nat'(('Idris.Idris2.Prelude.Types.List':'un--length'('erased', V13)), V12)))) end(E0, E1, E2, E3, E4)); _ -> fun (V14) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}} end end.
'nested--17517-10969--in--un--boundSafe'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16) -> case V16 of {'Idris.TTImp.Elab.Check.InLHS', E1} -> (fun (V17) -> 0 end(E1)); _ -> case V15 of {'Idris.Core.TT.BI', E0} -> (fun (V18) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord__Integer'(('Idris.Idris2.Prelude.Num':'dn--un--abs_Abs__Integer'(V18)), 100)) end(E0)); _ -> 0 end end.
'un--onLHS'(V0) -> case V0 of {'Idris.TTImp.Elab.Check.InLHS', E0} -> (fun (V1) -> 0 end(E0)); _ -> 1 end.
'un--needsDelayLHS'(V0, V1) -> case V1 of {'Idris.TTImp.TTImp.IVar', E0, E1} -> (fun (V2, V3) -> fun (V4) -> {'Idris.Prelude.Types.Right', 0} end end(E0, E1)); {'Idris.TTImp.TTImp.IApp', E2, E3, E4} -> (fun (V5, V6, V7) -> ('un--needsDelayLHS'(V0, V6)) end(E2, E3, E4)); {'Idris.TTImp.TTImp.IImplicitApp', E5, E6, E7, E8} -> (fun (V8, V9, V10, V11) -> ('un--needsDelayLHS'(V0, V9)) end(E5, E6, E7, E8)); {'Idris.TTImp.TTImp.IAlternative', E9, E10, E11} -> (fun (V12, V13, V14) -> fun (V15) -> {'Idris.Prelude.Types.Right', 0} end end(E9, E10, E11)); {'Idris.TTImp.TTImp.ISearch', E12, E13} -> (fun (V16, V17) -> fun (V18) -> {'Idris.Prelude.Types.Right', 0} end end(E12, E13)); {'Idris.TTImp.TTImp.IPrimVal', E14, E15} -> (fun (V19, V20) -> fun (V21) -> {'Idris.Prelude.Types.Right', 0} end end(E14, E15)); {'Idris.TTImp.TTImp.IType', E16} -> (fun (V22) -> fun (V23) -> {'Idris.Prelude.Types.Right', 0} end end(E16)); _ -> fun (V24) -> {'Idris.Prelude.Types.Right', 1} end end.
'un--needsDelayExpr'(V0, V1, V2) -> case V1 of 1 -> fun (V3) -> {'Idris.Prelude.Types.Right', 1} end; 0 -> case V2 of {'Idris.TTImp.TTImp.IVar', E0, E1} -> (fun (V4, V5) -> fun (V6) -> begin (V35 = begin (V34 = (('Idris.Idris2.Erlang.Data.IORef':'un--readIORef'('erased', 'erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V7) -> fun (V8) -> fun (V9) -> fun (V10) -> fun (V11) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor__IO'('erased', 'erased', V9, V10, V11)) end end end end end, fun (V12) -> fun (V13) -> fun (V14) -> V13 end end end, fun (V15) -> fun (V16) -> fun (V17) -> fun (V18) -> fun (V19) -> begin (V20 = (V17(V19))), begin (V21 = (V18(V19))), (V20(V21)) end end end end end end end}, fun (V22) -> fun (V23) -> fun (V24) -> fun (V25) -> fun (V26) -> begin (V27 = (V24(V26))), ((V25(V27))(V26)) end end end end end end, fun (V28) -> fun (V29) -> fun (V30) -> begin (V31 = (V29(V30))), (V31(V30)) end end end end}, fun (V32) -> fun (V33) -> V33 end end}, V0))(V6))), {'Idris.Prelude.Types.Right', V34} end), case V35 of {'Idris.Prelude.Types.Left', E2} -> (fun (V36) -> {'Idris.Prelude.Types.Left', V36} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V37) -> begin (V64 = (('Idris.Idris2.Core.Context':'un--lookupCtxtName'(V5, case V37 of {'Idris.Core.Context.MkDefs', E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29} -> (fun (V38, V39, V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62, V63) -> V38 end(E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V6))), case V64 of {'Idris.Prelude.Types.Left', E30} -> (fun (V65) -> {'Idris.Prelude.Types.Left', V65} end(E30)); {'Idris.Prelude.Types.Right', E31} -> (fun (V66) -> {'Idris.Prelude.Types.Right', case V66 of [E32 | E33] -> (fun (V67, V68) -> case V68 of [E34 | E35] -> (fun (V69, V70) -> 0 end(E34, E35)); _ -> 1 end end(E32, E33)); _ -> 1 end} end(E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0, E1)); {'Idris.TTImp.TTImp.IApp', E36, E37, E38} -> (fun (V71, V72, V73) -> ('un--needsDelayExpr'(V0, 0, V72)) end(E36, E37, E38)); {'Idris.TTImp.TTImp.IImplicitApp', E39, E40, E41, E42} -> (fun (V74, V75, V76, V77) -> ('un--needsDelayExpr'(V0, 0, V75)) end(E39, E40, E41, E42)); {'Idris.TTImp.TTImp.ILam', E43, E44, E45, E46, E47, E48} -> (fun (V78, V79, V80, V81, V82, V83) -> fun (V84) -> {'Idris.Prelude.Types.Right', 0} end end(E43, E44, E45, E46, E47, E48)); {'Idris.TTImp.TTImp.ICase', E49, E50, E51, E52} -> (fun (V85, V86, V87, V88) -> fun (V89) -> {'Idris.Prelude.Types.Right', 0} end end(E49, E50, E51, E52)); {'Idris.TTImp.TTImp.ILocal', E53, E54, E55} -> (fun (V90, V91, V92) -> fun (V93) -> {'Idris.Prelude.Types.Right', 0} end end(E53, E54, E55)); {'Idris.TTImp.TTImp.IUpdate', E56, E57, E58} -> (fun (V94, V95, V96) -> fun (V97) -> {'Idris.Prelude.Types.Right', 0} end end(E56, E57, E58)); {'Idris.TTImp.TTImp.IAlternative', E59, E60, E61} -> (fun (V98, V99, V100) -> fun (V101) -> {'Idris.Prelude.Types.Right', 0} end end(E59, E60, E61)); {'Idris.TTImp.TTImp.ISearch', E62, E63} -> (fun (V102, V103) -> fun (V104) -> {'Idris.Prelude.Types.Right', 0} end end(E62, E63)); {'Idris.TTImp.TTImp.IRewrite', E64, E65, E66} -> (fun (V105, V106, V107) -> fun (V108) -> {'Idris.Prelude.Types.Right', 0} end end(E64, E65, E66)); _ -> fun (V109) -> {'Idris.Prelude.Types.Right', 1} end end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--needsDelay'(V0, V1, V2, V3) -> case V1 of {'Idris.TTImp.Elab.Check.InLHS', E0} -> (fun (V4) -> ('un--needsDelayLHS'(V0, V3)) end(E0)); _ -> ('un--needsDelayExpr'(V0, V2, V3)) end.
'un--makeImplicit'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19) -> case V15 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V20, V21) -> fun (V22) -> begin (V51 = begin (V50 = (('Idris.Idris2.Erlang.Data.IORef':'un--readIORef'('erased', 'erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V23) -> fun (V24) -> fun (V25) -> fun (V26) -> fun (V27) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor__IO'('erased', 'erased', V25, V26, V27)) end end end end end, fun (V28) -> fun (V29) -> fun (V30) -> V29 end end end, fun (V31) -> fun (V32) -> fun (V33) -> fun (V34) -> fun (V35) -> begin (V36 = (V33(V35))), begin (V37 = (V34(V35))), (V36(V37)) end end end end end end end}, fun (V38) -> fun (V39) -> fun (V40) -> fun (V41) -> fun (V42) -> begin (V43 = (V40(V42))), ((V41(V43))(V42)) end end end end end end, fun (V44) -> fun (V45) -> fun (V46) -> begin (V47 = (V45(V46))), (V47(V46)) end end end end}, fun (V48) -> fun (V49) -> V49 end end}, V1))(V22))), {'Idris.Prelude.Types.Right', V50} end), case V51 of {'Idris.Prelude.Types.Left', E2} -> (fun (V52) -> {'Idris.Prelude.Types.Left', V52} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V53) -> begin (V54 = (('Idris.Idris2.Core.UnifyState':'un--genMVName'(V1, V3, V12))(V22))), case V54 of {'Idris.Prelude.Types.Left', E4} -> (fun (V55) -> {'Idris.Prelude.Types.Left', V55} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V56) -> begin (V57 = ('Idris.Idris2.Core.Context':'un--clearDefs'(V53, V22))), case V57 of {'Idris.Prelude.Types.Left', E6} -> (fun (V58) -> {'Idris.Prelude.Types.Left', V58} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V59) -> begin (V60 = ('Idris.Idris2.Core.Normalise':'dn--un--quote_Quote__NF'(V1, V0, V59, V9, V13, V22))), case V60 of {'Idris.Prelude.Types.Left', E8} -> (fun (V61) -> {'Idris.Prelude.Types.Left', V61} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V62) -> begin (V63 = ('Idris.Idris2.TTImp.Elab.Check':'un--metaVar'(V0, V1, V3, V10, V6, V9, V56, V62, V22))), case V63 of {'Idris.Prelude.Types.Left', E10} -> (fun (V64) -> {'Idris.Prelude.Types.Left', V64} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V65) -> begin (V66 = {'Idris.Core.TT.App', V10, V11, V65}), begin (V67 = (((V14(V53))(('Idris.Idris2.Core.Normalise':'un--toClosure'('erased', ('Idris.Idris2.Core.Value':'un--defaultOpts'()), V9, V65))))(V22))), case V67 of {'Idris.Prelude.Types.Left', E12} -> (fun (V68) -> {'Idris.Prelude.Types.Left', V68} end(E12)); {'Idris.Prelude.Types.Right', E13} -> (fun (V69) -> begin (V135 = case case V7 of {'Idris.TTImp.Elab.Check.MkElabInfo', E16, E17, E18, E19, E20, E21} -> (fun (V70, V71, V72, V73, V74, V75) -> V73 end(E16, E17, E18, E19, E20, E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of 0 -> begin (V104 = begin (V103 = (('Idris.Idris2.Erlang.Data.IORef':'un--readIORef'('erased', 'erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V76) -> fun (V77) -> fun (V78) -> fun (V79) -> fun (V80) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor__IO'('erased', 'erased', V78, V79, V80)) end end end end end, fun (V81) -> fun (V82) -> fun (V83) -> V82 end end end, fun (V84) -> fun (V85) -> fun (V86) -> fun (V87) -> fun (V88) -> begin (V89 = (V86(V88))), begin (V90 = (V87(V88))), (V89(V90)) end end end end end end end}, fun (V91) -> fun (V92) -> fun (V93) -> fun (V94) -> fun (V95) -> begin (V96 = (V93(V95))), ((V94(V96))(V95)) end end end end end end, fun (V97) -> fun (V98) -> fun (V99) -> begin (V100 = (V98(V99))), (V100(V99)) end end end end}, fun (V101) -> fun (V102) -> V102 end end}, V4))(V22))), {'Idris.Prelude.Types.Right', V103} end), case V104 of {'Idris.Prelude.Types.Left', E14} -> (fun (V105) -> {'Idris.Prelude.Types.Left', V105} end(E14)); {'Idris.Prelude.Types.Right', E15} -> (fun (V106) -> begin (V134 = (('Idris.Idris2.Erlang.Data.IORef':'un--writeIORef'('erased', 'erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V107) -> fun (V108) -> fun (V109) -> fun (V110) -> fun (V111) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor__IO'('erased', 'erased', V109, V110, V111)) end end end end end, fun (V112) -> fun (V113) -> fun (V114) -> V113 end end end, fun (V115) -> fun (V116) -> fun (V117) -> fun (V118) -> fun (V119) -> begin (V120 = (V117(V119))), begin (V121 = (V118(V119))), (V120(V121)) end end end end end end end}, fun (V122) -> fun (V123) -> fun (V124) -> fun (V125) -> fun (V126) -> begin (V127 = (V124(V126))), ((V125(V127))(V126)) end end end end end end, fun (V128) -> fun (V129) -> fun (V130) -> begin (V131 = (V129(V130))), (V131(V130)) end end end end}, fun (V132) -> fun (V133) -> V133 end end}, V4, ('Idris.Idris2.TTImp.Elab.Check':'un--addBindIfUnsolved'(V0, V56, V6, {'Idris.Core.TT.Implicit'}, V9, V65, V62, V106))))(V22))), {'Idris.Prelude.Types.Right', V134} end end(E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; 1 -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end), case V135 of {'Idris.Prelude.Types.Left', E22} -> (fun (V136) -> {'Idris.Prelude.Types.Left', V136} end(E22)); {'Idris.Prelude.Types.Right', E23} -> (fun (V137) -> (('un--checkAppWith'(V0, V1, V2, V3, V4, V5, V7, V8, V9, V10, V66, V69, {'Idris.Builtin.MkPair', V20, ('Idris.Idris2.Prelude.Types':'dn--un--+_Num__Nat'(('Idris.Idris2.Prelude.Types':'dn--un--fromInteger_Num__Nat'(1)), V21))}, V16, V17, V18, V19))(V22)) end(E23)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--makeDefImplicit'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20) -> case V16 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V21, V22) -> ('case--makeDefImplicit-5651'(V0, V21, V22, V20, V19, V18, V17, V15, V14, V13, V12, V11, V10, V9, V8, V7, V6, V5, V4, V3, V2, V1, ('nested--10983-5641--in--un--metavarImp'(V0, V21, V22, V20, V19, V18, V17, V15, V14, V13, V12, V11, V10, V9, V8, V7, V6, V5, V4, V3, V2, V1, case V7 of {'Idris.TTImp.Elab.Check.MkElabInfo', E2, E3, E4, E5, E6, E7} -> (fun (V23, V24, V25, V26, V27, V28) -> V23 end(E2, E3, E4, E5, E6, E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)))) end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--makeAutoImplicit'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19) -> case V15 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V20, V21) -> ('case--makeAutoImplicit-5388'(V0, V20, V21, V19, V18, V17, V16, V14, V13, V12, V11, V10, V9, V8, V7, V6, V5, V4, V3, V2, V1, ('nested--10977-5378--in--un--metavarImp'(V0, V20, V21, V19, V18, V17, V16, V14, V13, V12, V11, V10, V9, V8, V7, V6, V5, V4, V3, V2, V1, case V7 of {'Idris.TTImp.Elab.Check.MkElabInfo', E2, E3, E4, E5, E6, E7} -> (fun (V22, V23, V24, V25, V26, V27) -> V22 end(E2, E3, E4, E5, E6, E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)))) end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--isHole'(V0, V1) -> case V1 of {'Idris.Core.Value.NApp', E0, E1, E2} -> (fun (V2, V3, V4) -> case V3 of {'Idris.Core.Value.NMeta', E3, E4, E5} -> (fun (V5, V6, V7) -> 0 end(E3, E4, E5)); _ -> 1 end end(E0, E1, E2)); _ -> 1 end.
'un--getVarType'(V0, V1, V2, V3, V4, V5, V6, V7, V8) -> ('case--getVarType-4631'(V0, V8, V7, V6, V5, V4, V3, V2, V1, ('Idris.Idris2.Data.List':'un--lookup'('erased', 'erased', {'Idris.Prelude.EqOrd.dn--un--__mkEq', fun (V9) -> fun (V10) -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq__Name'(V9, V10)) end end, fun (V11) -> fun (V12) -> ('Idris.Idris2.Core.Name':'dn--un--/=_Eq__Name'(V11, V12)) end end}, V8, V5)))).
'un--getNameType'(V0, V1, V2, V3, V4, V5, V6, V7) -> ('case--getNameType-4079'(V0, V7, V6, V5, V4, V3, V2, V1, ('Idris.Idris2.Core.Env':'un--defined'(V0, V7, V5)))).
'un--dotErased'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V5 of {'Idris.TTImp.Elab.Check.InLHS', E0} -> (fun (V8) -> ('case--dotErased-6749'('erased', V8, V7, V6, V4, V3, V2, V1, ('Idris.Idris2.Prelude.Basics':'un--&&'(('Idris.Idris2.Prelude.Basics':'un--not'(('Idris.Idris2.Algebra.Semiring':'un--isErased'('erased', {'Idris.Builtin.MkPair', {'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V9) -> fun (V10) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring__ZeroOneOmega'(V9, V10)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring__ZeroOneOmega'()), fun (V11) -> fun (V12) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring__ZeroOneOmega'(V11, V12)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring__ZeroOneOmega'())}, {'Idris.Prelude.EqOrd.dn--un--__mkEq', fun (V13) -> fun (V14) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--==_Eq__ZeroOneOmega'(V13, V14)) end end, fun (V15) -> fun (V16) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--/=_Eq__ZeroOneOmega'(V15, V16)) end end}}, V8)))), fun () -> ('Idris.Idris2.Algebra.Semiring':'un--isErased'('erased', {'Idris.Builtin.MkPair', {'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V17) -> fun (V18) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring__ZeroOneOmega'(V17, V18)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring__ZeroOneOmega'()), fun (V19) -> fun (V20) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring__ZeroOneOmega'(V19, V20)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring__ZeroOneOmega'())}, {'Idris.Prelude.EqOrd.dn--un--__mkEq', fun (V21) -> fun (V22) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--==_Eq__ZeroOneOmega'(V21, V22)) end end, fun (V23) -> fun (V24) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--/=_Eq__ZeroOneOmega'(V23, V24)) end end}}, V6)) end)))) end(E0)); _ -> fun (V25) -> {'Idris.Prelude.Types.Right', V7} end end.
'un--concrete'(V0, V1, V2, V3) -> case V3 of {'Idris.Core.Value.NBind', E0, E1, E2, E3} -> (fun (V4, V5, V6, V7) -> case V6 of {'Idris.Core.TT.Pi', E4, E5, E6, E7} -> (fun (V8, V9, V10, V11) -> fun (V12) -> begin (V13 = (((V7(V1))(('Idris.Idris2.Core.Normalise':'un--toClosure'('erased', ('Idris.Idris2.Core.Value':'un--defaultOpts'()), V2, {'Idris.Core.TT.Erased', V4, 1}))))(V12))), case V13 of {'Idris.Prelude.Types.Left', E8} -> (fun (V14) -> {'Idris.Prelude.Types.Left', V14} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V15) -> (('un--concrete'('erased', V1, V2, V15))(V12)) end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E4, E5, E6, E7)); _ -> fun (V16) -> {'Idris.Prelude.Types.Right', 1} end end end(E0, E1, E2, E3)); {'Idris.Core.Value.NDCon', E10, E11, E12, E13, E14} -> (fun (V17, V18, V19, V20, V21) -> fun (V22) -> {'Idris.Prelude.Types.Right', 0} end end(E10, E11, E12, E13, E14)); {'Idris.Core.Value.NTCon', E15, E16, E17, E18, E19} -> (fun (V23, V24, V25, V26, V27) -> fun (V28) -> {'Idris.Prelude.Types.Right', 0} end end(E15, E16, E17, E18, E19)); {'Idris.Core.Value.NPrimVal', E20, E21} -> (fun (V29, V30) -> fun (V31) -> {'Idris.Prelude.Types.Right', 0} end end(E20, E21)); _ -> fun (V32) -> {'Idris.Prelude.Types.Right', 1} end end.
'un--checkVisibleNS'(V0, V1, V2, V3) -> case V2 of {'Idris.Core.Name.NS', E0, E1} -> (fun (V4, V5) -> fun (V6) -> begin (V7 = ('Idris.Idris2.Core.Context':'un--isVisible'(V0, V4, V6))), case V7 of {'Idris.Prelude.Types.Left', E2} -> (fun (V8) -> {'Idris.Prelude.Types.Left', V8} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V9) -> case V9 of 0 -> begin (V10 = ('Idris.Idris2.Core.Context':'un--isAllPublic'(V0, V6))), case V10 of {'Idris.Prelude.Types.Left', E4} -> (fun (V11) -> {'Idris.Prelude.Types.Left', V11} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V12) -> begin (V13 = ('Idris.Idris2.Core.Context':'un--getNS'(V0, V6))), case V13 of {'Idris.Prelude.Types.Left', E6} -> (fun (V14) -> {'Idris.Prelude.Types.Left', V14} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V15) -> begin (V16 = ('Idris.Idris2.Core.Context':'un--getNestedNS'(V0, V6))), case V16 of {'Idris.Prelude.Types.Left', E8} -> (fun (V17) -> {'Idris.Prelude.Types.Left', V17} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V18) -> begin (V19 = 0), (('case--case block in checkVisibleNS-3972'(V5, V4, V3, V1, V0, V19, V12, V15, V18, ('Idris.Idris2.Prelude.Basics':'un--||'(V12, fun () -> ('Idris.Idris2.Core.Context':'un--visibleInAny'([V15 | V18], {'Idris.Core.Name.NS', V4, V5}, V3)) end))))(V6)) end end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; 1 -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable__Core_Error'('erased', {'Idris.Core.Core.InvisibleName', V1, {'Idris.Core.Name.NS', V4, V5}, {'Idris.Prelude.Types.Just', V4}}, V6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0, E1)); _ -> fun (V20) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end end.
'un--checkRestApp'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20) -> case V15 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V21, V22) -> fun (V23) -> begin (V52 = begin (V51 = (('Idris.Idris2.Erlang.Data.IORef':'un--readIORef'('erased', 'erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V24) -> fun (V25) -> fun (V26) -> fun (V27) -> fun (V28) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor__IO'('erased', 'erased', V26, V27, V28)) end end end end end, fun (V29) -> fun (V30) -> fun (V31) -> V30 end end end, fun (V32) -> fun (V33) -> fun (V34) -> fun (V35) -> fun (V36) -> begin (V37 = (V34(V36))), begin (V38 = (V35(V36))), (V37(V38)) end end end end end end end}, fun (V39) -> fun (V40) -> fun (V41) -> fun (V42) -> fun (V43) -> begin (V44 = (V41(V43))), ((V42(V44))(V43)) end end end end end end, fun (V45) -> fun (V46) -> fun (V47) -> begin (V48 = (V46(V47))), (V48(V47)) end end end end}, fun (V49) -> fun (V50) -> V50 end end}, V1))(V23))), {'Idris.Prelude.Types.Right', V51} end), case V52 of {'Idris.Prelude.Types.Left', E2} -> (fun (V53) -> {'Idris.Prelude.Types.Left', V53} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V54) -> begin (V61 = (('un--dotErased'('erased', V1, V13, V21, V22, case V7 of {'Idris.TTImp.Elab.Check.MkElabInfo', E4, E5, E6, E7, E8, E9} -> (fun (V55, V56, V57, V58, V59, V60) -> V55 end(E4, E5, E6, E7, E8, E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V6, V16))(V23))), case V61 of {'Idris.Prelude.Types.Left', E10} -> (fun (V62) -> {'Idris.Prelude.Types.Left', V62} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V63) -> begin (V67 = case V19 of 0 -> {'Idris.Prelude.Types.Right', 0}; 1 -> begin (V64 = (((V14(V54))(('Idris.Idris2.Core.Normalise':'un--toClosure'('erased', ('Idris.Idris2.Core.Value':'un--defaultOpts'()), V9, {'Idris.Core.TT.Erased', V10, 1}))))(V23))), case V64 of {'Idris.Prelude.Types.Left', E12} -> (fun (V65) -> {'Idris.Prelude.Types.Left', V65} end(E12)); {'Idris.Prelude.Types.Right', E13} -> (fun (V66) -> (('un--concrete'('erased', V54, V9, V66))(V23)) end(E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end), case V67 of {'Idris.Prelude.Types.Left', E14} -> (fun (V68) -> {'Idris.Prelude.Types.Left', V68} end(E14)); {'Idris.Prelude.Types.Right', E15} -> (fun (V69) -> begin (V76 = (('un--needsDelay'(V1, case V7 of {'Idris.TTImp.Elab.Check.MkElabInfo', E16, E17, E18, E19, E20, E21} -> (fun (V70, V71, V72, V73, V74, V75) -> V70 end(E16, E17, E18, E19, E20, E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V69, V16))(V23))), case V76 of {'Idris.Prelude.Types.Left', E22} -> (fun (V77) -> {'Idris.Prelude.Types.Left', V77} end(E22)); {'Idris.Prelude.Types.Right', E23} -> (fun (V78) -> (('case--checkRestApp-7144'(V0, V21, V22, V20, V19, V18, V17, V16, V14, V13, V12, V11, V10, V9, V8, V7, V6, V5, V4, V3, V2, V1, V54, V63, V69, V78, ('Idris.Idris2.Prelude.Basics':'un--||'(('Idris.Idris2.Prelude.Basics':'un--&&'(('un--isHole'('erased', V13)), fun () -> V69 end)), fun () -> V78 end))))(V23)) end(E23)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--checkPatTyValid'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V5 of {'Idris.Core.Value.NApp', E0, E1, E2} -> (fun (V8, V9, V10) -> case V9 of {'Idris.Core.Value.NMeta', E3, E4, E5} -> (fun (V11, V12, V13) -> fun (V14) -> begin (V41 = (('Idris.Idris2.Core.Context':'un--lookupCtxtExact'({'Idris.Core.Name.Resolved', V12}, case V3 of {'Idris.Core.Context.MkDefs', E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31} -> (fun (V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40) -> V15 end(E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V14))), case V41 of {'Idris.Prelude.Types.Left', E32} -> (fun (V42) -> {'Idris.Prelude.Types.Left', V42} end(E32)); {'Idris.Prelude.Types.Right', E33} -> (fun (V43) -> case V43 of {'Idris.Prelude.Types.Just', E34} -> (fun (V44) -> begin (V45 = {'Idris.Prelude.Types.Just', V44}), (('case--case block in checkPatTyValid-6145'(V0, V8, V10, V13, V12, V11, V7, V6, V4, V3, V2, V1, V44, V45, ('Idris.Idris2.Algebra.Semiring':'un--isErased'('erased', {'Idris.Builtin.MkPair', {'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V46) -> fun (V47) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring__ZeroOneOmega'(V46, V47)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring__ZeroOneOmega'()), fun (V48) -> fun (V49) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring__ZeroOneOmega'(V48, V49)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring__ZeroOneOmega'())}, {'Idris.Prelude.EqOrd.dn--un--__mkEq', fun (V50) -> fun (V51) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--==_Eq__ZeroOneOmega'(V50, V51)) end end, fun (V52) -> fun (V53) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--/=_Eq__ZeroOneOmega'(V52, V53)) end end}}, case V44 of {'Idris.Core.Context.MkGlobalDef', E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55} -> (fun (V54, V55, V56, V57, V58, V59, V60, V61, V62, V63, V64, V65, V66, V67, V68, V69, V70, V71, V72, V73, V74) -> V61 end(E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))))(V14)) end end(E34)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E33)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E3, E4, E5)); _ -> fun (V75) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end end end(E0, E1, E2)); _ -> fun (V76) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end end.
'un--checkAppWith'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16) -> case V11 of {'Idris.Core.Value.NBind', E38, E39, E40, E41} -> (fun (V17, V18, V19, V20) -> case V19 of {'Idris.Core.TT.Pi', E80, E81, E82, E83} -> (fun (V21, V22, V23, V24) -> case V23 of {'Idris.Core.TT.Explicit'} -> (fun () -> case V13 of [E160 | E161] -> (fun (V25, V26) -> begin (V27 = ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring__ZeroOneOmega'(V5, V22))), ('un--checkRestApp'(V0, V1, V2, V3, V4, V5, V27, V6, V7, V8, V9, V10, V18, V24, V20, V12, V25, V26, V14, V15, V16)) end end(E160, E161)); _ -> case V13 of [] -> case V14 of [] -> fun (V28) -> begin (V57 = begin (V56 = (('Idris.Idris2.Erlang.Data.IORef':'un--readIORef'('erased', 'erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V29) -> fun (V30) -> fun (V31) -> fun (V32) -> fun (V33) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor__IO'('erased', 'erased', V31, V32, V33)) end end end end end, fun (V34) -> fun (V35) -> fun (V36) -> V35 end end end, fun (V37) -> fun (V38) -> fun (V39) -> fun (V40) -> fun (V41) -> begin (V42 = (V39(V41))), begin (V43 = (V40(V41))), (V42(V43)) end end end end end end end}, fun (V44) -> fun (V45) -> fun (V46) -> fun (V47) -> fun (V48) -> begin (V49 = (V46(V48))), ((V47(V49))(V48)) end end end end end end, fun (V50) -> fun (V51) -> fun (V52) -> begin (V53 = (V51(V52))), (V53(V52)) end end end end}, fun (V54) -> fun (V55) -> V55 end end}, V1))(V28))), {'Idris.Prelude.Types.Right', V56} end), case V57 of {'Idris.Prelude.Types.Left', E158} -> (fun (V58) -> {'Idris.Prelude.Types.Left', V58} end(E158)); {'Idris.Prelude.Types.Right', E159} -> (fun (V59) -> (('Idris.Idris2.TTImp.Elab.Check':'un--checkExp'(V0, V1, V3, V4, V5, V6, V8, V9, V10, ('Idris.Idris2.Core.Normalise':'un--glueBack'(V1, V0, V59, V8, V11)), V16))(V28)) end(E159)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end; _ -> ('case--checkAppWith-10408'(V0, V16, V15, V14, V12, V11, V10, V9, V8, V7, V6, V5, V4, V3, V2, V1, ('Idris.Idris2.Data.List':'un--filter'('erased', fun (V60) -> ('nested--11008-10372--in--un--notInfer'(V0, V16, V15, V14, V12, V11, V10, V9, V8, V7, V6, V5, V4, V3, V2, V1, V60)) end, V14)))) end; _ -> case V12 of {'Idris.Builtin.MkPair', E122, E123} -> (fun (V61, V62) -> case V13 of [E124 | E125] -> (fun (V63, V64) -> fun (V65) -> begin (V66 = ('Idris.Idris2.Core.Normalise':'un--logNF'(V0, V1, <<"elab.with"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> <<"Function type"/utf8>> end, V8, V11, V65))), case V66 of {'Idris.Prelude.Types.Left', E126} -> (fun (V67) -> {'Idris.Prelude.Types.Left', V67} end(E126)); {'Idris.Prelude.Types.Right', E127} -> (fun (V68) -> begin (V69 = ('Idris.Idris2.Core.Context.Log':'un--logTerm'(V0, V1, <<"elab.with"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> <<"Function "/utf8>> end, V10, V65))), case V69 of {'Idris.Prelude.Types.Left', E128} -> (fun (V70) -> {'Idris.Prelude.Types.Left', V70} end(E128)); {'Idris.Prelude.Types.Right', E129} -> (fun (V71) -> begin (V72 = ('Idris.Idris2.Core.UnifyState':'un--genName'(V1, V3, <<"argTy"/utf8>>, V65))), case V72 of {'Idris.Prelude.Types.Left', E130} -> (fun (V73) -> {'Idris.Prelude.Types.Left', V73} end(E130)); {'Idris.Prelude.Types.Right', E131} -> (fun (V74) -> begin (V75 = ('Idris.Idris2.Core.UnifyState':'un--genName'(V1, V3, <<"retTy"/utf8>>, V65))), case V75 of {'Idris.Prelude.Types.Left', E132} -> (fun (V76) -> {'Idris.Prelude.Types.Left', V76} end(E132)); {'Idris.Prelude.Types.Right', E133} -> (fun (V77) -> begin (V82 = ('Idris.Idris2.TTImp.Elab.Check':'un--metaVar'(V0, V1, V3, V9, ('Idris.Idris2.Algebra.Semiring':'un--erased'('erased', {'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V78) -> fun (V79) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring__ZeroOneOmega'(V78, V79)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring__ZeroOneOmega'()), fun (V80) -> fun (V81) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring__ZeroOneOmega'(V80, V81)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring__ZeroOneOmega'())})), V8, V74, {'Idris.Core.TT.TType', V9}, V65))), case V82 of {'Idris.Prelude.Types.Left', E134} -> (fun (V83) -> {'Idris.Prelude.Types.Left', V83} end(E134)); {'Idris.Prelude.Types.Right', E135} -> (fun (V84) -> begin (V85 = ('Idris.Idris2.Core.Normalise':'un--gnf'(V0, V8, V84))), begin (V90 = ('Idris.Idris2.TTImp.Elab.Check':'un--metaVar'(V0, V1, V3, V9, ('Idris.Idris2.Algebra.Semiring':'un--erased'('erased', {'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V86) -> fun (V87) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring__ZeroOneOmega'(V86, V87)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring__ZeroOneOmega'()), fun (V88) -> fun (V89) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring__ZeroOneOmega'(V88, V89)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring__ZeroOneOmega'())})), V8, V77, {'Idris.Core.TT.TType', V9}, V65))), case V90 of {'Idris.Prelude.Types.Left', E136} -> (fun (V91) -> {'Idris.Prelude.Types.Left', V91} end(E136)); {'Idris.Prelude.Types.Right', E137} -> (fun (V92) -> begin (V93 = (('Idris.Idris2.TTImp.Elab.Check':'un--check'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V63, {'Idris.Prelude.Types.Just', V85}))(V65))), case V93 of {'Idris.Prelude.Types.Left', E138} -> (fun (V94) -> {'Idris.Prelude.Types.Left', V94} end(E138)); {'Idris.Prelude.Types.Right', E139} -> (fun (V95) -> case V95 of {'Idris.Builtin.MkPair', E140, E141} -> (fun (V96, V97) -> begin (V98 = {'Idris.Core.TT.App', V9, V10, V96}), begin (V127 = begin (V126 = (('Idris.Idris2.Erlang.Data.IORef':'un--readIORef'('erased', 'erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V99) -> fun (V100) -> fun (V101) -> fun (V102) -> fun (V103) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor__IO'('erased', 'erased', V101, V102, V103)) end end end end end, fun (V104) -> fun (V105) -> fun (V106) -> V105 end end end, fun (V107) -> fun (V108) -> fun (V109) -> fun (V110) -> fun (V111) -> begin (V112 = (V109(V111))), begin (V113 = (V110(V111))), (V112(V113)) end end end end end end end}, fun (V114) -> fun (V115) -> fun (V116) -> fun (V117) -> fun (V118) -> begin (V119 = (V116(V118))), ((V117(V119))(V118)) end end end end end end, fun (V120) -> fun (V121) -> fun (V122) -> begin (V123 = (V121(V122))), (V123(V122)) end end end end}, fun (V124) -> fun (V125) -> V125 end end}, V1))(V65))), {'Idris.Prelude.Types.Right', V126} end), case V127 of {'Idris.Prelude.Types.Left', E142} -> (fun (V128) -> {'Idris.Prelude.Types.Left', V128} end(E142)); {'Idris.Prelude.Types.Right', E143} -> (fun (V129) -> begin (V130 = (('Idris.Idris2.Core.Normalise':'un--nf'(V1, V0, V129, V8, V92))(V65))), case V130 of {'Idris.Prelude.Types.Left', E144} -> (fun (V131) -> {'Idris.Prelude.Types.Left', V131} end(E144)); {'Idris.Prelude.Types.Right', E145} -> (fun (V132) -> begin (V133 = ('Idris.Idris2.Core.Normalise':'un--gnf'(V0, V8, {'Idris.Core.TT.Bind', V9, V74, {'Idris.Core.TT.Pi', V9, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--top_Top__ZeroOneOmega'()), {'Idris.Core.TT.Explicit'}, V84}, ('Idris.Idris2.Core.TT':'dn--un--weaken_Weaken__Term'('erased', 'erased', V92))}))), begin (V134 = ('Idris.Idris2.Core.Normalise':'un--logGlue'(V0, V1, <<"elab.with"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> <<"Expected function type"/utf8>> end, V8, V133, V65))), case V134 of {'Idris.Prelude.Types.Left', E146} -> (fun (V135) -> {'Idris.Prelude.Types.Left', V135} end(E146)); {'Idris.Prelude.Types.Right', E147} -> (fun (V136) -> begin (V140 = (('Idris.Idris2.Prelude.Types':'un--maybe'('erased', 'erased', fun () -> fun (V137) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end end, fun () -> fun (V138) -> fun (V139) -> ('Idris.Idris2.Core.Normalise':'un--logGlue'(V0, V1, <<"elab.with"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> <<"Expected result type"/utf8>> end, V8, V138, V139)) end end end, V16))(V65))), case V140 of {'Idris.Prelude.Types.Left', E148} -> (fun (V141) -> {'Idris.Prelude.Types.Left', V141} end(E148)); {'Idris.Prelude.Types.Right', E149} -> (fun (V142) -> begin (V143 = (('un--checkAppWith'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V98, V132, {'Idris.Builtin.MkPair', V61, ('Idris.Idris2.Prelude.Types':'dn--un--+_Num__Nat'(('Idris.Idris2.Prelude.Types':'dn--un--fromInteger_Num__Nat'(1)), V62))}, V64, V14, V15, V16))(V65))), case V143 of {'Idris.Prelude.Types.Left', E150} -> (fun (V144) -> {'Idris.Prelude.Types.Left', V144} end(E150)); {'Idris.Prelude.Types.Right', E151} -> (fun (V145) -> begin (V146 = (('Idris.Idris2.TTImp.Elab.Check':'un--convert'(V0, V1, V3, V4, V9, V6, V8, ('Idris.Idris2.Core.Normalise':'un--glueBack'(V1, V0, V129, V8, V11)), V133))(V65))), case V146 of {'Idris.Prelude.Types.Left', E152} -> (fun (V147) -> {'Idris.Prelude.Types.Left', V147} end(E152)); {'Idris.Prelude.Types.Right', E153} -> (fun (V148) -> begin (V149 = {'Idris.Builtin.MkPair', V96, V97}), (('case--case block in checkAppWith-10748'(V61, V62, V63, V64, V0, V16, V15, V14, V11, V10, V9, V8, V7, V6, V5, V4, V3, V2, V1, V68, V71, V74, V77, V84, V85, V92, V96, V97, V149, V98, V129, V132, V133, V136, V142, V145, V148, case V148 of {'Idris.Core.Unify.MkUnifyResult', E154, E155, E156, E157} -> (fun (V150, V151, V152, V153) -> V150 end(E154, E155, E156, E157)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V65)) end end(E153)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E151)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E149)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E147)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E145)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E143)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E140, E141)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E139)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E137)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E135)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E133)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E131)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E129)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E127)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E124, E125)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E122, E123)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end()); {'Idris.Core.TT.Implicit'} -> (fun () -> case V13 of [] -> case V14 of [] -> case V16 of {'Idris.Prelude.Types.Just', E162} -> (fun (V154) -> begin (V155 = ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring__ZeroOneOmega'(V5, V22))), fun (V156) -> begin (V157 = (('Idris.Idris2.Core.Normalise':'un--getNF'('erased', V1, V154))(V156))), case V157 of {'Idris.Prelude.Types.Left', E163} -> (fun (V158) -> {'Idris.Prelude.Types.Left', V158} end(E163)); {'Idris.Prelude.Types.Right', E164} -> (fun (V159) -> begin (V188 = begin (V187 = (('Idris.Idris2.Erlang.Data.IORef':'un--readIORef'('erased', 'erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V160) -> fun (V161) -> fun (V162) -> fun (V163) -> fun (V164) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor__IO'('erased', 'erased', V162, V163, V164)) end end end end end, fun (V165) -> fun (V166) -> fun (V167) -> V166 end end end, fun (V168) -> fun (V169) -> fun (V170) -> fun (V171) -> fun (V172) -> begin (V173 = (V170(V172))), begin (V174 = (V171(V172))), (V173(V174)) end end end end end end end}, fun (V175) -> fun (V176) -> fun (V177) -> fun (V178) -> fun (V179) -> begin (V180 = (V177(V179))), ((V178(V180))(V179)) end end end end end end, fun (V181) -> fun (V182) -> fun (V183) -> begin (V184 = (V182(V183))), (V184(V183)) end end end end}, fun (V185) -> fun (V186) -> V186 end end}, V1))(V156))), {'Idris.Prelude.Types.Right', V187} end), case V188 of {'Idris.Prelude.Types.Left', E165} -> (fun (V189) -> {'Idris.Prelude.Types.Left', V189} end(E165)); {'Idris.Prelude.Types.Right', E166} -> (fun (V190) -> begin (V191 = {'Idris.Core.Value.NBind', V17, V18, {'Idris.Core.TT.Pi', V21, V22, {'Idris.Core.TT.Implicit'}, V24}, V20}), case V159 of {'Idris.Core.Value.NBind', E173, E174, E175, E176} -> (fun (V192, V193, V194, V195) -> case V194 of {'Idris.Core.TT.Pi', E183, E184, E185, E186} -> (fun (V196, V197, V198, V199) -> case V198 of {'Idris.Core.TT.Implicit'} -> (fun () -> (('Idris.Idris2.TTImp.Elab.Check':'un--checkExp'(V0, V1, V3, V4, V5, V6, V8, V9, V10, ('Idris.Idris2.Core.Normalise':'un--glueBack'(V1, V0, V190, V8, V191)), {'Idris.Prelude.Types.Just', V154}))(V156)) end()); _ -> (('case--case block in checkAppWith-8819'(V0, V21, V154, V15, V12, V24, V22, V20, V18, V17, V191, V10, V9, V8, V7, V6, V5, V4, V3, V2, V1, V155, V159, V190, ('Idris.Idris2.Prelude.Basics':'un--not'(case V6 of {'Idris.TTImp.Elab.Check.MkElabInfo', E187, E188, E189, E190, E191, E192} -> (fun (V200, V201, V202, V203, V204, V205) -> V204 end(E187, E188, E189, E190, E191, E192)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))))(V156)) end end(E183, E184, E185, E186)); _ -> (('case--case block in checkAppWith-8819'(V0, V21, V154, V15, V12, V24, V22, V20, V18, V17, V191, V10, V9, V8, V7, V6, V5, V4, V3, V2, V1, V155, V159, V190, ('Idris.Idris2.Prelude.Basics':'un--not'(case V6 of {'Idris.TTImp.Elab.Check.MkElabInfo', E177, E178, E179, E180, E181, E182} -> (fun (V206, V207, V208, V209, V210, V211) -> V210 end(E177, E178, E179, E180, E181, E182)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))))(V156)) end end(E173, E174, E175, E176)); _ -> (('case--case block in checkAppWith-8819'(V0, V21, V154, V15, V12, V24, V22, V20, V18, V17, V191, V10, V9, V8, V7, V6, V5, V4, V3, V2, V1, V155, V159, V190, ('Idris.Idris2.Prelude.Basics':'un--not'(case V6 of {'Idris.TTImp.Elab.Check.MkElabInfo', E167, E168, E169, E170, E171, E172} -> (fun (V212, V213, V214, V215, V216, V217) -> V216 end(E167, E168, E169, E170, E171, E172)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))))(V156)) end end end(E166)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E164)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end(E162)); _ -> begin (V218 = ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring__ZeroOneOmega'(V5, V22))), ('case--checkAppWith-9934'(V0, V21, V24, V22, V20, V18, V17, V16, V15, V14, V13, V12, V10, V9, V8, V7, V6, V5, V4, V3, V2, V1, V218, ('nested--11008-9772--in--un--useImp'(V0, V21, V24, V22, V20, V18, V17, V16, V15, V14, V13, V12, V10, V9, V8, V7, V6, V5, V4, V3, V2, V1, [], V14)))) end end; _ -> begin (V219 = ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring__ZeroOneOmega'(V5, V22))), ('case--checkAppWith-9934'(V0, V21, V24, V22, V20, V18, V17, V16, V15, V14, V13, V12, V10, V9, V8, V7, V6, V5, V4, V3, V2, V1, V219, ('nested--11008-9772--in--un--useImp'(V0, V21, V24, V22, V20, V18, V17, V16, V15, V14, V13, V12, V10, V9, V8, V7, V6, V5, V4, V3, V2, V1, [], V14)))) end end; _ -> begin (V220 = ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring__ZeroOneOmega'(V5, V22))), ('case--checkAppWith-9934'(V0, V21, V24, V22, V20, V18, V17, V16, V15, V14, V13, V12, V10, V9, V8, V7, V6, V5, V4, V3, V2, V1, V220, ('nested--11008-9772--in--un--useImp'(V0, V21, V24, V22, V20, V18, V17, V16, V15, V14, V13, V12, V10, V9, V8, V7, V6, V5, V4, V3, V2, V1, [], V14)))) end end end()); {'Idris.Core.TT.AutoImplicit'} -> (fun () -> case V13 of [] -> case V14 of [] -> case V16 of {'Idris.Prelude.Types.Just', E193} -> (fun (V221) -> begin (V222 = ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring__ZeroOneOmega'(V5, V22))), fun (V223) -> begin (V224 = (('Idris.Idris2.Core.Normalise':'un--getNF'('erased', V1, V221))(V223))), case V224 of {'Idris.Prelude.Types.Left', E194} -> (fun (V225) -> {'Idris.Prelude.Types.Left', V225} end(E194)); {'Idris.Prelude.Types.Right', E195} -> (fun (V226) -> begin (V255 = begin (V254 = (('Idris.Idris2.Erlang.Data.IORef':'un--readIORef'('erased', 'erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V227) -> fun (V228) -> fun (V229) -> fun (V230) -> fun (V231) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor__IO'('erased', 'erased', V229, V230, V231)) end end end end end, fun (V232) -> fun (V233) -> fun (V234) -> V233 end end end, fun (V235) -> fun (V236) -> fun (V237) -> fun (V238) -> fun (V239) -> begin (V240 = (V237(V239))), begin (V241 = (V238(V239))), (V240(V241)) end end end end end end end}, fun (V242) -> fun (V243) -> fun (V244) -> fun (V245) -> fun (V246) -> begin (V247 = (V244(V246))), ((V245(V247))(V246)) end end end end end end, fun (V248) -> fun (V249) -> fun (V250) -> begin (V251 = (V249(V250))), (V251(V250)) end end end end}, fun (V252) -> fun (V253) -> V253 end end}, V1))(V223))), {'Idris.Prelude.Types.Right', V254} end), case V255 of {'Idris.Prelude.Types.Left', E196} -> (fun (V256) -> {'Idris.Prelude.Types.Left', V256} end(E196)); {'Idris.Prelude.Types.Right', E197} -> (fun (V257) -> begin (V258 = {'Idris.Core.Value.NBind', V17, V18, {'Idris.Core.TT.Pi', V21, V22, {'Idris.Core.TT.AutoImplicit'}, V24}, V20}), case V226 of {'Idris.Core.Value.NBind', E198, E199, E200, E201} -> (fun (V259, V260, V261, V262) -> case V261 of {'Idris.Core.TT.Pi', E202, E203, E204, E205} -> (fun (V263, V264, V265, V266) -> case V265 of {'Idris.Core.TT.AutoImplicit'} -> (fun () -> (('Idris.Idris2.TTImp.Elab.Check':'un--checkExp'(V0, V1, V3, V4, V5, V6, V8, V9, V10, ('Idris.Idris2.Core.Normalise':'un--glueBack'(V1, V0, V257, V8, V258)), {'Idris.Prelude.Types.Just', V221}))(V223)) end()); _ -> (('un--makeAutoImplicit'(V0, V1, V2, V3, V4, V5, V222, V6, V7, V8, V9, V10, V18, V24, V20, V12, [], [], V15, {'Idris.Prelude.Types.Just', V221}))(V223)) end end(E202, E203, E204, E205)); _ -> (('un--makeAutoImplicit'(V0, V1, V2, V3, V4, V5, V222, V6, V7, V8, V9, V10, V18, V24, V20, V12, [], [], V15, {'Idris.Prelude.Types.Just', V221}))(V223)) end end(E198, E199, E200, E201)); _ -> (('un--makeAutoImplicit'(V0, V1, V2, V3, V4, V5, V222, V6, V7, V8, V9, V10, V18, V24, V20, V12, [], [], V15, {'Idris.Prelude.Types.Just', V221}))(V223)) end end end(E197)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E195)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end(E193)); _ -> begin (V267 = ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring__ZeroOneOmega'(V5, V22))), ('case--checkAppWith-9644'(V0, V21, V24, V22, V20, V18, V17, V16, V15, V14, V13, V12, V10, V9, V8, V7, V6, V5, V4, V3, V2, V1, V267, ('nested--11008-9465--in--un--useAutoImp'(V0, V21, V24, V22, V20, V18, V17, V16, V15, V14, V13, V12, V10, V9, V8, V7, V6, V5, V4, V3, V2, V1, [], V14)))) end end; _ -> begin (V268 = ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring__ZeroOneOmega'(V5, V22))), ('case--checkAppWith-9644'(V0, V21, V24, V22, V20, V18, V17, V16, V15, V14, V13, V12, V10, V9, V8, V7, V6, V5, V4, V3, V2, V1, V268, ('nested--11008-9465--in--un--useAutoImp'(V0, V21, V24, V22, V20, V18, V17, V16, V15, V14, V13, V12, V10, V9, V8, V7, V6, V5, V4, V3, V2, V1, [], V14)))) end end; _ -> begin (V269 = ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring__ZeroOneOmega'(V5, V22))), ('case--checkAppWith-9644'(V0, V21, V24, V22, V20, V18, V17, V16, V15, V14, V13, V12, V10, V9, V8, V7, V6, V5, V4, V3, V2, V1, V269, ('nested--11008-9465--in--un--useAutoImp'(V0, V21, V24, V22, V20, V18, V17, V16, V15, V14, V13, V12, V10, V9, V8, V7, V6, V5, V4, V3, V2, V1, [], V14)))) end end end()); {'Idris.Core.TT.DefImplicit', E206} -> (fun (V270) -> case V13 of [] -> case V14 of [] -> case V16 of {'Idris.Prelude.Types.Just', E207} -> (fun (V271) -> begin (V272 = ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigMult'(V5, V22))), fun (V273) -> begin (V274 = (('Idris.Idris2.Core.Normalise':'un--getNF'('erased', V1, V271))(V273))), case V274 of {'Idris.Prelude.Types.Left', E208} -> (fun (V275) -> {'Idris.Prelude.Types.Left', V275} end(E208)); {'Idris.Prelude.Types.Right', E209} -> (fun (V276) -> begin (V305 = begin (V304 = (('Idris.Idris2.Erlang.Data.IORef':'un--readIORef'('erased', 'erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V277) -> fun (V278) -> fun (V279) -> fun (V280) -> fun (V281) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor__IO'('erased', 'erased', V279, V280, V281)) end end end end end, fun (V282) -> fun (V283) -> fun (V284) -> V283 end end end, fun (V285) -> fun (V286) -> fun (V287) -> fun (V288) -> fun (V289) -> begin (V290 = (V287(V289))), begin (V291 = (V288(V289))), (V290(V291)) end end end end end end end}, fun (V292) -> fun (V293) -> fun (V294) -> fun (V295) -> fun (V296) -> begin (V297 = (V294(V296))), ((V295(V297))(V296)) end end end end end end, fun (V298) -> fun (V299) -> fun (V300) -> begin (V301 = (V299(V300))), (V301(V300)) end end end end}, fun (V302) -> fun (V303) -> V303 end end}, V1))(V273))), {'Idris.Prelude.Types.Right', V304} end), case V305 of {'Idris.Prelude.Types.Left', E210} -> (fun (V306) -> {'Idris.Prelude.Types.Left', V306} end(E210)); {'Idris.Prelude.Types.Right', E211} -> (fun (V307) -> begin (V308 = {'Idris.Core.Value.NBind', V17, V18, {'Idris.Core.TT.Pi', V21, V22, {'Idris.Core.TT.DefImplicit', V270}, V24}, V20}), case V276 of {'Idris.Core.Value.NBind', E212, E213, E214, E215} -> (fun (V309, V310, V311, V312) -> case V311 of {'Idris.Core.TT.Pi', E216, E217, E218, E219} -> (fun (V313, V314, V315, V316) -> case V315 of {'Idris.Core.TT.DefImplicit', E220} -> (fun (V317) -> begin (V318 = ('Idris.Idris2.Core.Normalise':'dn--un--convert_Convert__NF'(V1, V0, V307, V8, V270, V317, V273))), case V318 of {'Idris.Prelude.Types.Left', E221} -> (fun (V319) -> {'Idris.Prelude.Types.Left', V319} end(E221)); {'Idris.Prelude.Types.Right', E222} -> (fun (V320) -> case V320 of 0 -> (('Idris.Idris2.TTImp.Elab.Check':'un--checkExp'(V0, V1, V3, V4, V5, V6, V8, V9, V10, ('Idris.Idris2.Core.Normalise':'un--glueBack'(V1, V0, V307, V8, V308)), {'Idris.Prelude.Types.Just', V271}))(V273)); 1 -> (('un--makeDefImplicit'(V0, V1, V2, V3, V4, V5, V272, V6, V7, V8, V9, V10, V18, V270, V24, V20, V12, [], [], V15, {'Idris.Prelude.Types.Just', V271}))(V273)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E222)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E220)); _ -> (('un--makeDefImplicit'(V0, V1, V2, V3, V4, V5, V272, V6, V7, V8, V9, V10, V18, V270, V24, V20, V12, [], [], V15, {'Idris.Prelude.Types.Just', V271}))(V273)) end end(E216, E217, E218, E219)); _ -> (('un--makeDefImplicit'(V0, V1, V2, V3, V4, V5, V272, V6, V7, V8, V9, V10, V18, V270, V24, V20, V12, [], [], V15, {'Idris.Prelude.Types.Just', V271}))(V273)) end end(E212, E213, E214, E215)); _ -> (('un--makeDefImplicit'(V0, V1, V2, V3, V4, V5, V272, V6, V7, V8, V9, V10, V18, V270, V24, V20, V12, [], [], V15, {'Idris.Prelude.Types.Just', V271}))(V273)) end end end(E211)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E209)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end(E207)); _ -> begin (V321 = ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigMult'(V5, V22))), ('case--checkAppWith-10227'(V0, V21, V270, V24, V22, V20, V18, V17, V16, V15, V14, V13, V12, V10, V9, V8, V7, V6, V5, V4, V3, V2, V1, V321, ('nested--11008-10063--in--un--useImp'(V0, V21, V270, V24, V22, V20, V18, V17, V16, V15, V14, V13, V12, V10, V9, V8, V7, V6, V5, V4, V3, V2, V1, [], V14)))) end end; _ -> begin (V322 = ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigMult'(V5, V22))), ('case--checkAppWith-10227'(V0, V21, V270, V24, V22, V20, V18, V17, V16, V15, V14, V13, V12, V10, V9, V8, V7, V6, V5, V4, V3, V2, V1, V322, ('nested--11008-10063--in--un--useImp'(V0, V21, V270, V24, V22, V20, V18, V17, V16, V15, V14, V13, V12, V10, V9, V8, V7, V6, V5, V4, V3, V2, V1, [], V14)))) end end; _ -> begin (V323 = ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigMult'(V5, V22))), ('case--checkAppWith-10227'(V0, V21, V270, V24, V22, V20, V18, V17, V16, V15, V14, V13, V12, V10, V9, V8, V7, V6, V5, V4, V3, V2, V1, V323, ('nested--11008-10063--in--un--useImp'(V0, V21, V270, V24, V22, V20, V18, V17, V16, V15, V14, V13, V12, V10, V9, V8, V7, V6, V5, V4, V3, V2, V1, [], V14)))) end end end(E206)); _ -> case V13 of [] -> case V14 of [] -> fun (V324) -> begin (V353 = begin (V352 = (('Idris.Idris2.Erlang.Data.IORef':'un--readIORef'('erased', 'erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V325) -> fun (V326) -> fun (V327) -> fun (V328) -> fun (V329) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor__IO'('erased', 'erased', V327, V328, V329)) end end end end end, fun (V330) -> fun (V331) -> fun (V332) -> V331 end end end, fun (V333) -> fun (V334) -> fun (V335) -> fun (V336) -> fun (V337) -> begin (V338 = (V335(V337))), begin (V339 = (V336(V337))), (V338(V339)) end end end end end end end}, fun (V340) -> fun (V341) -> fun (V342) -> fun (V343) -> fun (V344) -> begin (V345 = (V342(V344))), ((V343(V345))(V344)) end end end end end end, fun (V346) -> fun (V347) -> fun (V348) -> begin (V349 = (V347(V348))), (V349(V348)) end end end end}, fun (V350) -> fun (V351) -> V351 end end}, V1))(V324))), {'Idris.Prelude.Types.Right', V352} end), case V353 of {'Idris.Prelude.Types.Left', E120} -> (fun (V354) -> {'Idris.Prelude.Types.Left', V354} end(E120)); {'Idris.Prelude.Types.Right', E121} -> (fun (V355) -> (('Idris.Idris2.TTImp.Elab.Check':'un--checkExp'(V0, V1, V3, V4, V5, V6, V8, V9, V10, ('Idris.Idris2.Core.Normalise':'un--glueBack'(V1, V0, V355, V8, V11)), V16))(V324)) end(E121)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end; _ -> ('case--checkAppWith-10408'(V0, V16, V15, V14, V12, V11, V10, V9, V8, V7, V6, V5, V4, V3, V2, V1, ('Idris.Idris2.Data.List':'un--filter'('erased', fun (V356) -> ('nested--11008-10372--in--un--notInfer'(V0, V16, V15, V14, V12, V11, V10, V9, V8, V7, V6, V5, V4, V3, V2, V1, V356)) end, V14)))) end; _ -> case V12 of {'Idris.Builtin.MkPair', E84, E85} -> (fun (V357, V358) -> case V13 of [E86 | E87] -> (fun (V359, V360) -> fun (V361) -> begin (V362 = ('Idris.Idris2.Core.Normalise':'un--logNF'(V0, V1, <<"elab.with"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> <<"Function type"/utf8>> end, V8, V11, V361))), case V362 of {'Idris.Prelude.Types.Left', E88} -> (fun (V363) -> {'Idris.Prelude.Types.Left', V363} end(E88)); {'Idris.Prelude.Types.Right', E89} -> (fun (V364) -> begin (V365 = ('Idris.Idris2.Core.Context.Log':'un--logTerm'(V0, V1, <<"elab.with"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> <<"Function "/utf8>> end, V10, V361))), case V365 of {'Idris.Prelude.Types.Left', E90} -> (fun (V366) -> {'Idris.Prelude.Types.Left', V366} end(E90)); {'Idris.Prelude.Types.Right', E91} -> (fun (V367) -> begin (V368 = ('Idris.Idris2.Core.UnifyState':'un--genName'(V1, V3, <<"argTy"/utf8>>, V361))), case V368 of {'Idris.Prelude.Types.Left', E92} -> (fun (V369) -> {'Idris.Prelude.Types.Left', V369} end(E92)); {'Idris.Prelude.Types.Right', E93} -> (fun (V370) -> begin (V371 = ('Idris.Idris2.Core.UnifyState':'un--genName'(V1, V3, <<"retTy"/utf8>>, V361))), case V371 of {'Idris.Prelude.Types.Left', E94} -> (fun (V372) -> {'Idris.Prelude.Types.Left', V372} end(E94)); {'Idris.Prelude.Types.Right', E95} -> (fun (V373) -> begin (V378 = ('Idris.Idris2.TTImp.Elab.Check':'un--metaVar'(V0, V1, V3, V9, ('Idris.Idris2.Algebra.Semiring':'un--erased'('erased', {'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V374) -> fun (V375) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring__ZeroOneOmega'(V374, V375)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring__ZeroOneOmega'()), fun (V376) -> fun (V377) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring__ZeroOneOmega'(V376, V377)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring__ZeroOneOmega'())})), V8, V370, {'Idris.Core.TT.TType', V9}, V361))), case V378 of {'Idris.Prelude.Types.Left', E96} -> (fun (V379) -> {'Idris.Prelude.Types.Left', V379} end(E96)); {'Idris.Prelude.Types.Right', E97} -> (fun (V380) -> begin (V381 = ('Idris.Idris2.Core.Normalise':'un--gnf'(V0, V8, V380))), begin (V386 = ('Idris.Idris2.TTImp.Elab.Check':'un--metaVar'(V0, V1, V3, V9, ('Idris.Idris2.Algebra.Semiring':'un--erased'('erased', {'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V382) -> fun (V383) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring__ZeroOneOmega'(V382, V383)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring__ZeroOneOmega'()), fun (V384) -> fun (V385) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring__ZeroOneOmega'(V384, V385)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring__ZeroOneOmega'())})), V8, V373, {'Idris.Core.TT.TType', V9}, V361))), case V386 of {'Idris.Prelude.Types.Left', E98} -> (fun (V387) -> {'Idris.Prelude.Types.Left', V387} end(E98)); {'Idris.Prelude.Types.Right', E99} -> (fun (V388) -> begin (V389 = (('Idris.Idris2.TTImp.Elab.Check':'un--check'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V359, {'Idris.Prelude.Types.Just', V381}))(V361))), case V389 of {'Idris.Prelude.Types.Left', E100} -> (fun (V390) -> {'Idris.Prelude.Types.Left', V390} end(E100)); {'Idris.Prelude.Types.Right', E101} -> (fun (V391) -> case V391 of {'Idris.Builtin.MkPair', E102, E103} -> (fun (V392, V393) -> begin (V394 = {'Idris.Core.TT.App', V9, V10, V392}), begin (V423 = begin (V422 = (('Idris.Idris2.Erlang.Data.IORef':'un--readIORef'('erased', 'erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V395) -> fun (V396) -> fun (V397) -> fun (V398) -> fun (V399) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor__IO'('erased', 'erased', V397, V398, V399)) end end end end end, fun (V400) -> fun (V401) -> fun (V402) -> V401 end end end, fun (V403) -> fun (V404) -> fun (V405) -> fun (V406) -> fun (V407) -> begin (V408 = (V405(V407))), begin (V409 = (V406(V407))), (V408(V409)) end end end end end end end}, fun (V410) -> fun (V411) -> fun (V412) -> fun (V413) -> fun (V414) -> begin (V415 = (V412(V414))), ((V413(V415))(V414)) end end end end end end, fun (V416) -> fun (V417) -> fun (V418) -> begin (V419 = (V417(V418))), (V419(V418)) end end end end}, fun (V420) -> fun (V421) -> V421 end end}, V1))(V361))), {'Idris.Prelude.Types.Right', V422} end), case V423 of {'Idris.Prelude.Types.Left', E104} -> (fun (V424) -> {'Idris.Prelude.Types.Left', V424} end(E104)); {'Idris.Prelude.Types.Right', E105} -> (fun (V425) -> begin (V426 = (('Idris.Idris2.Core.Normalise':'un--nf'(V1, V0, V425, V8, V388))(V361))), case V426 of {'Idris.Prelude.Types.Left', E106} -> (fun (V427) -> {'Idris.Prelude.Types.Left', V427} end(E106)); {'Idris.Prelude.Types.Right', E107} -> (fun (V428) -> begin (V429 = ('Idris.Idris2.Core.Normalise':'un--gnf'(V0, V8, {'Idris.Core.TT.Bind', V9, V370, {'Idris.Core.TT.Pi', V9, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--top_Top__ZeroOneOmega'()), {'Idris.Core.TT.Explicit'}, V380}, ('Idris.Idris2.Core.TT':'dn--un--weaken_Weaken__Term'('erased', 'erased', V388))}))), begin (V430 = ('Idris.Idris2.Core.Normalise':'un--logGlue'(V0, V1, <<"elab.with"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> <<"Expected function type"/utf8>> end, V8, V429, V361))), case V430 of {'Idris.Prelude.Types.Left', E108} -> (fun (V431) -> {'Idris.Prelude.Types.Left', V431} end(E108)); {'Idris.Prelude.Types.Right', E109} -> (fun (V432) -> begin (V436 = (('Idris.Idris2.Prelude.Types':'un--maybe'('erased', 'erased', fun () -> fun (V433) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end end, fun () -> fun (V434) -> fun (V435) -> ('Idris.Idris2.Core.Normalise':'un--logGlue'(V0, V1, <<"elab.with"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> <<"Expected result type"/utf8>> end, V8, V434, V435)) end end end, V16))(V361))), case V436 of {'Idris.Prelude.Types.Left', E110} -> (fun (V437) -> {'Idris.Prelude.Types.Left', V437} end(E110)); {'Idris.Prelude.Types.Right', E111} -> (fun (V438) -> begin (V439 = (('un--checkAppWith'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V394, V428, {'Idris.Builtin.MkPair', V357, ('Idris.Idris2.Prelude.Types':'dn--un--+_Num__Nat'(('Idris.Idris2.Prelude.Types':'dn--un--fromInteger_Num__Nat'(1)), V358))}, V360, V14, V15, V16))(V361))), case V439 of {'Idris.Prelude.Types.Left', E112} -> (fun (V440) -> {'Idris.Prelude.Types.Left', V440} end(E112)); {'Idris.Prelude.Types.Right', E113} -> (fun (V441) -> begin (V442 = (('Idris.Idris2.TTImp.Elab.Check':'un--convert'(V0, V1, V3, V4, V9, V6, V8, ('Idris.Idris2.Core.Normalise':'un--glueBack'(V1, V0, V425, V8, V11)), V429))(V361))), case V442 of {'Idris.Prelude.Types.Left', E114} -> (fun (V443) -> {'Idris.Prelude.Types.Left', V443} end(E114)); {'Idris.Prelude.Types.Right', E115} -> (fun (V444) -> begin (V445 = {'Idris.Builtin.MkPair', V392, V393}), (('case--case block in checkAppWith-10748'(V357, V358, V359, V360, V0, V16, V15, V14, V11, V10, V9, V8, V7, V6, V5, V4, V3, V2, V1, V364, V367, V370, V373, V380, V381, V388, V392, V393, V445, V394, V425, V428, V429, V432, V438, V441, V444, case V444 of {'Idris.Core.Unify.MkUnifyResult', E116, E117, E118, E119} -> (fun (V446, V447, V448, V449) -> V446 end(E116, E117, E118, E119)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V361)) end end(E115)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E113)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E111)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E109)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E107)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E105)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E102, E103)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E101)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E99)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E97)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E95)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E93)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E91)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E89)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E86, E87)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E84, E85)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E80, E81, E82, E83)); _ -> case V13 of [] -> case V14 of [] -> fun (V450) -> begin (V479 = begin (V478 = (('Idris.Idris2.Erlang.Data.IORef':'un--readIORef'('erased', 'erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V451) -> fun (V452) -> fun (V453) -> fun (V454) -> fun (V455) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor__IO'('erased', 'erased', V453, V454, V455)) end end end end end, fun (V456) -> fun (V457) -> fun (V458) -> V457 end end end, fun (V459) -> fun (V460) -> fun (V461) -> fun (V462) -> fun (V463) -> begin (V464 = (V461(V463))), begin (V465 = (V462(V463))), (V464(V465)) end end end end end end end}, fun (V466) -> fun (V467) -> fun (V468) -> fun (V469) -> fun (V470) -> begin (V471 = (V468(V470))), ((V469(V471))(V470)) end end end end end end, fun (V472) -> fun (V473) -> fun (V474) -> begin (V475 = (V473(V474))), (V475(V474)) end end end end}, fun (V476) -> fun (V477) -> V477 end end}, V1))(V450))), {'Idris.Prelude.Types.Right', V478} end), case V479 of {'Idris.Prelude.Types.Left', E78} -> (fun (V480) -> {'Idris.Prelude.Types.Left', V480} end(E78)); {'Idris.Prelude.Types.Right', E79} -> (fun (V481) -> (('Idris.Idris2.TTImp.Elab.Check':'un--checkExp'(V0, V1, V3, V4, V5, V6, V8, V9, V10, ('Idris.Idris2.Core.Normalise':'un--glueBack'(V1, V0, V481, V8, V11)), V16))(V450)) end(E79)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end; _ -> ('case--checkAppWith-10408'(V0, V16, V15, V14, V12, V11, V10, V9, V8, V7, V6, V5, V4, V3, V2, V1, ('Idris.Idris2.Data.List':'un--filter'('erased', fun (V482) -> ('nested--11008-10372--in--un--notInfer'(V0, V16, V15, V14, V12, V11, V10, V9, V8, V7, V6, V5, V4, V3, V2, V1, V482)) end, V14)))) end; _ -> case V12 of {'Idris.Builtin.MkPair', E42, E43} -> (fun (V483, V484) -> case V13 of [E44 | E45] -> (fun (V485, V486) -> fun (V487) -> begin (V488 = ('Idris.Idris2.Core.Normalise':'un--logNF'(V0, V1, <<"elab.with"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> <<"Function type"/utf8>> end, V8, V11, V487))), case V488 of {'Idris.Prelude.Types.Left', E46} -> (fun (V489) -> {'Idris.Prelude.Types.Left', V489} end(E46)); {'Idris.Prelude.Types.Right', E47} -> (fun (V490) -> begin (V491 = ('Idris.Idris2.Core.Context.Log':'un--logTerm'(V0, V1, <<"elab.with"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> <<"Function "/utf8>> end, V10, V487))), case V491 of {'Idris.Prelude.Types.Left', E48} -> (fun (V492) -> {'Idris.Prelude.Types.Left', V492} end(E48)); {'Idris.Prelude.Types.Right', E49} -> (fun (V493) -> begin (V494 = ('Idris.Idris2.Core.UnifyState':'un--genName'(V1, V3, <<"argTy"/utf8>>, V487))), case V494 of {'Idris.Prelude.Types.Left', E50} -> (fun (V495) -> {'Idris.Prelude.Types.Left', V495} end(E50)); {'Idris.Prelude.Types.Right', E51} -> (fun (V496) -> begin (V497 = ('Idris.Idris2.Core.UnifyState':'un--genName'(V1, V3, <<"retTy"/utf8>>, V487))), case V497 of {'Idris.Prelude.Types.Left', E52} -> (fun (V498) -> {'Idris.Prelude.Types.Left', V498} end(E52)); {'Idris.Prelude.Types.Right', E53} -> (fun (V499) -> begin (V504 = ('Idris.Idris2.TTImp.Elab.Check':'un--metaVar'(V0, V1, V3, V9, ('Idris.Idris2.Algebra.Semiring':'un--erased'('erased', {'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V500) -> fun (V501) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring__ZeroOneOmega'(V500, V501)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring__ZeroOneOmega'()), fun (V502) -> fun (V503) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring__ZeroOneOmega'(V502, V503)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring__ZeroOneOmega'())})), V8, V496, {'Idris.Core.TT.TType', V9}, V487))), case V504 of {'Idris.Prelude.Types.Left', E54} -> (fun (V505) -> {'Idris.Prelude.Types.Left', V505} end(E54)); {'Idris.Prelude.Types.Right', E55} -> (fun (V506) -> begin (V507 = ('Idris.Idris2.Core.Normalise':'un--gnf'(V0, V8, V506))), begin (V512 = ('Idris.Idris2.TTImp.Elab.Check':'un--metaVar'(V0, V1, V3, V9, ('Idris.Idris2.Algebra.Semiring':'un--erased'('erased', {'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V508) -> fun (V509) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring__ZeroOneOmega'(V508, V509)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring__ZeroOneOmega'()), fun (V510) -> fun (V511) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring__ZeroOneOmega'(V510, V511)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring__ZeroOneOmega'())})), V8, V499, {'Idris.Core.TT.TType', V9}, V487))), case V512 of {'Idris.Prelude.Types.Left', E56} -> (fun (V513) -> {'Idris.Prelude.Types.Left', V513} end(E56)); {'Idris.Prelude.Types.Right', E57} -> (fun (V514) -> begin (V515 = (('Idris.Idris2.TTImp.Elab.Check':'un--check'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V485, {'Idris.Prelude.Types.Just', V507}))(V487))), case V515 of {'Idris.Prelude.Types.Left', E58} -> (fun (V516) -> {'Idris.Prelude.Types.Left', V516} end(E58)); {'Idris.Prelude.Types.Right', E59} -> (fun (V517) -> case V517 of {'Idris.Builtin.MkPair', E60, E61} -> (fun (V518, V519) -> begin (V520 = {'Idris.Core.TT.App', V9, V10, V518}), begin (V549 = begin (V548 = (('Idris.Idris2.Erlang.Data.IORef':'un--readIORef'('erased', 'erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V521) -> fun (V522) -> fun (V523) -> fun (V524) -> fun (V525) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor__IO'('erased', 'erased', V523, V524, V525)) end end end end end, fun (V526) -> fun (V527) -> fun (V528) -> V527 end end end, fun (V529) -> fun (V530) -> fun (V531) -> fun (V532) -> fun (V533) -> begin (V534 = (V531(V533))), begin (V535 = (V532(V533))), (V534(V535)) end end end end end end end}, fun (V536) -> fun (V537) -> fun (V538) -> fun (V539) -> fun (V540) -> begin (V541 = (V538(V540))), ((V539(V541))(V540)) end end end end end end, fun (V542) -> fun (V543) -> fun (V544) -> begin (V545 = (V543(V544))), (V545(V544)) end end end end}, fun (V546) -> fun (V547) -> V547 end end}, V1))(V487))), {'Idris.Prelude.Types.Right', V548} end), case V549 of {'Idris.Prelude.Types.Left', E62} -> (fun (V550) -> {'Idris.Prelude.Types.Left', V550} end(E62)); {'Idris.Prelude.Types.Right', E63} -> (fun (V551) -> begin (V552 = (('Idris.Idris2.Core.Normalise':'un--nf'(V1, V0, V551, V8, V514))(V487))), case V552 of {'Idris.Prelude.Types.Left', E64} -> (fun (V553) -> {'Idris.Prelude.Types.Left', V553} end(E64)); {'Idris.Prelude.Types.Right', E65} -> (fun (V554) -> begin (V555 = ('Idris.Idris2.Core.Normalise':'un--gnf'(V0, V8, {'Idris.Core.TT.Bind', V9, V496, {'Idris.Core.TT.Pi', V9, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--top_Top__ZeroOneOmega'()), {'Idris.Core.TT.Explicit'}, V506}, ('Idris.Idris2.Core.TT':'dn--un--weaken_Weaken__Term'('erased', 'erased', V514))}))), begin (V556 = ('Idris.Idris2.Core.Normalise':'un--logGlue'(V0, V1, <<"elab.with"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> <<"Expected function type"/utf8>> end, V8, V555, V487))), case V556 of {'Idris.Prelude.Types.Left', E66} -> (fun (V557) -> {'Idris.Prelude.Types.Left', V557} end(E66)); {'Idris.Prelude.Types.Right', E67} -> (fun (V558) -> begin (V562 = (('Idris.Idris2.Prelude.Types':'un--maybe'('erased', 'erased', fun () -> fun (V559) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end end, fun () -> fun (V560) -> fun (V561) -> ('Idris.Idris2.Core.Normalise':'un--logGlue'(V0, V1, <<"elab.with"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> <<"Expected result type"/utf8>> end, V8, V560, V561)) end end end, V16))(V487))), case V562 of {'Idris.Prelude.Types.Left', E68} -> (fun (V563) -> {'Idris.Prelude.Types.Left', V563} end(E68)); {'Idris.Prelude.Types.Right', E69} -> (fun (V564) -> begin (V565 = (('un--checkAppWith'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V520, V554, {'Idris.Builtin.MkPair', V483, ('Idris.Idris2.Prelude.Types':'dn--un--+_Num__Nat'(('Idris.Idris2.Prelude.Types':'dn--un--fromInteger_Num__Nat'(1)), V484))}, V486, V14, V15, V16))(V487))), case V565 of {'Idris.Prelude.Types.Left', E70} -> (fun (V566) -> {'Idris.Prelude.Types.Left', V566} end(E70)); {'Idris.Prelude.Types.Right', E71} -> (fun (V567) -> begin (V568 = (('Idris.Idris2.TTImp.Elab.Check':'un--convert'(V0, V1, V3, V4, V9, V6, V8, ('Idris.Idris2.Core.Normalise':'un--glueBack'(V1, V0, V551, V8, V11)), V555))(V487))), case V568 of {'Idris.Prelude.Types.Left', E72} -> (fun (V569) -> {'Idris.Prelude.Types.Left', V569} end(E72)); {'Idris.Prelude.Types.Right', E73} -> (fun (V570) -> begin (V571 = {'Idris.Builtin.MkPair', V518, V519}), (('case--case block in checkAppWith-10748'(V483, V484, V485, V486, V0, V16, V15, V14, V11, V10, V9, V8, V7, V6, V5, V4, V3, V2, V1, V490, V493, V496, V499, V506, V507, V514, V518, V519, V571, V520, V551, V554, V555, V558, V564, V567, V570, case V570 of {'Idris.Core.Unify.MkUnifyResult', E74, E75, E76, E77} -> (fun (V572, V573, V574, V575) -> V572 end(E74, E75, E76, E77)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V487)) end end(E73)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E71)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E69)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E67)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E65)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E63)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E60, E61)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E59)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E57)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E55)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E53)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E51)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E49)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E47)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E44, E45)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E42, E43)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E38, E39, E40, E41)); {'Idris.Core.Value.NDelayed', E223, E224, E225} -> (fun (V576, V577, V578) -> case V578 of {'Idris.Core.Value.NBind', E264, E265, E266, E267} -> (fun (V579, V580, V581, V582) -> case V581 of {'Idris.Core.TT.Pi', E306, E307, E308, E309} -> (fun (V583, V584, V585, V586) -> ('un--checkAppWith'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, {'Idris.Core.TT.TForce', V576, V577, V10}, V578, V12, V13, V14, V15, V16)) end(E306, E307, E308, E309)); _ -> case V13 of [] -> case V14 of [] -> fun (V587) -> begin (V616 = begin (V615 = (('Idris.Idris2.Erlang.Data.IORef':'un--readIORef'('erased', 'erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V588) -> fun (V589) -> fun (V590) -> fun (V591) -> fun (V592) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor__IO'('erased', 'erased', V590, V591, V592)) end end end end end, fun (V593) -> fun (V594) -> fun (V595) -> V594 end end end, fun (V596) -> fun (V597) -> fun (V598) -> fun (V599) -> fun (V600) -> begin (V601 = (V598(V600))), begin (V602 = (V599(V600))), (V601(V602)) end end end end end end end}, fun (V603) -> fun (V604) -> fun (V605) -> fun (V606) -> fun (V607) -> begin (V608 = (V605(V607))), ((V606(V608))(V607)) end end end end end end, fun (V609) -> fun (V610) -> fun (V611) -> begin (V612 = (V610(V611))), (V612(V611)) end end end end}, fun (V613) -> fun (V614) -> V614 end end}, V1))(V587))), {'Idris.Prelude.Types.Right', V615} end), case V616 of {'Idris.Prelude.Types.Left', E304} -> (fun (V617) -> {'Idris.Prelude.Types.Left', V617} end(E304)); {'Idris.Prelude.Types.Right', E305} -> (fun (V618) -> (('Idris.Idris2.TTImp.Elab.Check':'un--checkExp'(V0, V1, V3, V4, V5, V6, V8, V9, V10, ('Idris.Idris2.Core.Normalise':'un--glueBack'(V1, V0, V618, V8, V11)), V16))(V587)) end(E305)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end; _ -> ('case--checkAppWith-10408'(V0, V16, V15, V14, V12, V11, V10, V9, V8, V7, V6, V5, V4, V3, V2, V1, ('Idris.Idris2.Data.List':'un--filter'('erased', fun (V619) -> ('nested--11008-10372--in--un--notInfer'(V0, V16, V15, V14, V12, V11, V10, V9, V8, V7, V6, V5, V4, V3, V2, V1, V619)) end, V14)))) end; _ -> case V12 of {'Idris.Builtin.MkPair', E268, E269} -> (fun (V620, V621) -> case V13 of [E270 | E271] -> (fun (V622, V623) -> fun (V624) -> begin (V625 = ('Idris.Idris2.Core.Normalise':'un--logNF'(V0, V1, <<"elab.with"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> <<"Function type"/utf8>> end, V8, V11, V624))), case V625 of {'Idris.Prelude.Types.Left', E272} -> (fun (V626) -> {'Idris.Prelude.Types.Left', V626} end(E272)); {'Idris.Prelude.Types.Right', E273} -> (fun (V627) -> begin (V628 = ('Idris.Idris2.Core.Context.Log':'un--logTerm'(V0, V1, <<"elab.with"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> <<"Function "/utf8>> end, V10, V624))), case V628 of {'Idris.Prelude.Types.Left', E274} -> (fun (V629) -> {'Idris.Prelude.Types.Left', V629} end(E274)); {'Idris.Prelude.Types.Right', E275} -> (fun (V630) -> begin (V631 = ('Idris.Idris2.Core.UnifyState':'un--genName'(V1, V3, <<"argTy"/utf8>>, V624))), case V631 of {'Idris.Prelude.Types.Left', E276} -> (fun (V632) -> {'Idris.Prelude.Types.Left', V632} end(E276)); {'Idris.Prelude.Types.Right', E277} -> (fun (V633) -> begin (V634 = ('Idris.Idris2.Core.UnifyState':'un--genName'(V1, V3, <<"retTy"/utf8>>, V624))), case V634 of {'Idris.Prelude.Types.Left', E278} -> (fun (V635) -> {'Idris.Prelude.Types.Left', V635} end(E278)); {'Idris.Prelude.Types.Right', E279} -> (fun (V636) -> begin (V641 = ('Idris.Idris2.TTImp.Elab.Check':'un--metaVar'(V0, V1, V3, V9, ('Idris.Idris2.Algebra.Semiring':'un--erased'('erased', {'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V637) -> fun (V638) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring__ZeroOneOmega'(V637, V638)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring__ZeroOneOmega'()), fun (V639) -> fun (V640) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring__ZeroOneOmega'(V639, V640)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring__ZeroOneOmega'())})), V8, V633, {'Idris.Core.TT.TType', V9}, V624))), case V641 of {'Idris.Prelude.Types.Left', E280} -> (fun (V642) -> {'Idris.Prelude.Types.Left', V642} end(E280)); {'Idris.Prelude.Types.Right', E281} -> (fun (V643) -> begin (V644 = ('Idris.Idris2.Core.Normalise':'un--gnf'(V0, V8, V643))), begin (V649 = ('Idris.Idris2.TTImp.Elab.Check':'un--metaVar'(V0, V1, V3, V9, ('Idris.Idris2.Algebra.Semiring':'un--erased'('erased', {'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V645) -> fun (V646) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring__ZeroOneOmega'(V645, V646)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring__ZeroOneOmega'()), fun (V647) -> fun (V648) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring__ZeroOneOmega'(V647, V648)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring__ZeroOneOmega'())})), V8, V636, {'Idris.Core.TT.TType', V9}, V624))), case V649 of {'Idris.Prelude.Types.Left', E282} -> (fun (V650) -> {'Idris.Prelude.Types.Left', V650} end(E282)); {'Idris.Prelude.Types.Right', E283} -> (fun (V651) -> begin (V652 = (('Idris.Idris2.TTImp.Elab.Check':'un--check'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V622, {'Idris.Prelude.Types.Just', V644}))(V624))), case V652 of {'Idris.Prelude.Types.Left', E284} -> (fun (V653) -> {'Idris.Prelude.Types.Left', V653} end(E284)); {'Idris.Prelude.Types.Right', E285} -> (fun (V654) -> case V654 of {'Idris.Builtin.MkPair', E286, E287} -> (fun (V655, V656) -> begin (V657 = {'Idris.Core.TT.App', V9, V10, V655}), begin (V686 = begin (V685 = (('Idris.Idris2.Erlang.Data.IORef':'un--readIORef'('erased', 'erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V658) -> fun (V659) -> fun (V660) -> fun (V661) -> fun (V662) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor__IO'('erased', 'erased', V660, V661, V662)) end end end end end, fun (V663) -> fun (V664) -> fun (V665) -> V664 end end end, fun (V666) -> fun (V667) -> fun (V668) -> fun (V669) -> fun (V670) -> begin (V671 = (V668(V670))), begin (V672 = (V669(V670))), (V671(V672)) end end end end end end end}, fun (V673) -> fun (V674) -> fun (V675) -> fun (V676) -> fun (V677) -> begin (V678 = (V675(V677))), ((V676(V678))(V677)) end end end end end end, fun (V679) -> fun (V680) -> fun (V681) -> begin (V682 = (V680(V681))), (V682(V681)) end end end end}, fun (V683) -> fun (V684) -> V684 end end}, V1))(V624))), {'Idris.Prelude.Types.Right', V685} end), case V686 of {'Idris.Prelude.Types.Left', E288} -> (fun (V687) -> {'Idris.Prelude.Types.Left', V687} end(E288)); {'Idris.Prelude.Types.Right', E289} -> (fun (V688) -> begin (V689 = (('Idris.Idris2.Core.Normalise':'un--nf'(V1, V0, V688, V8, V651))(V624))), case V689 of {'Idris.Prelude.Types.Left', E290} -> (fun (V690) -> {'Idris.Prelude.Types.Left', V690} end(E290)); {'Idris.Prelude.Types.Right', E291} -> (fun (V691) -> begin (V692 = ('Idris.Idris2.Core.Normalise':'un--gnf'(V0, V8, {'Idris.Core.TT.Bind', V9, V633, {'Idris.Core.TT.Pi', V9, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--top_Top__ZeroOneOmega'()), {'Idris.Core.TT.Explicit'}, V643}, ('Idris.Idris2.Core.TT':'dn--un--weaken_Weaken__Term'('erased', 'erased', V651))}))), begin (V693 = ('Idris.Idris2.Core.Normalise':'un--logGlue'(V0, V1, <<"elab.with"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> <<"Expected function type"/utf8>> end, V8, V692, V624))), case V693 of {'Idris.Prelude.Types.Left', E292} -> (fun (V694) -> {'Idris.Prelude.Types.Left', V694} end(E292)); {'Idris.Prelude.Types.Right', E293} -> (fun (V695) -> begin (V699 = (('Idris.Idris2.Prelude.Types':'un--maybe'('erased', 'erased', fun () -> fun (V696) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end end, fun () -> fun (V697) -> fun (V698) -> ('Idris.Idris2.Core.Normalise':'un--logGlue'(V0, V1, <<"elab.with"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> <<"Expected result type"/utf8>> end, V8, V697, V698)) end end end, V16))(V624))), case V699 of {'Idris.Prelude.Types.Left', E294} -> (fun (V700) -> {'Idris.Prelude.Types.Left', V700} end(E294)); {'Idris.Prelude.Types.Right', E295} -> (fun (V701) -> begin (V702 = (('un--checkAppWith'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V657, V691, {'Idris.Builtin.MkPair', V620, ('Idris.Idris2.Prelude.Types':'dn--un--+_Num__Nat'(('Idris.Idris2.Prelude.Types':'dn--un--fromInteger_Num__Nat'(1)), V621))}, V623, V14, V15, V16))(V624))), case V702 of {'Idris.Prelude.Types.Left', E296} -> (fun (V703) -> {'Idris.Prelude.Types.Left', V703} end(E296)); {'Idris.Prelude.Types.Right', E297} -> (fun (V704) -> begin (V705 = (('Idris.Idris2.TTImp.Elab.Check':'un--convert'(V0, V1, V3, V4, V9, V6, V8, ('Idris.Idris2.Core.Normalise':'un--glueBack'(V1, V0, V688, V8, V11)), V692))(V624))), case V705 of {'Idris.Prelude.Types.Left', E298} -> (fun (V706) -> {'Idris.Prelude.Types.Left', V706} end(E298)); {'Idris.Prelude.Types.Right', E299} -> (fun (V707) -> begin (V708 = {'Idris.Builtin.MkPair', V655, V656}), (('case--case block in checkAppWith-10748'(V620, V621, V622, V623, V0, V16, V15, V14, V11, V10, V9, V8, V7, V6, V5, V4, V3, V2, V1, V627, V630, V633, V636, V643, V644, V651, V655, V656, V708, V657, V688, V691, V692, V695, V701, V704, V707, case V707 of {'Idris.Core.Unify.MkUnifyResult', E300, E301, E302, E303} -> (fun (V709, V710, V711, V712) -> V709 end(E300, E301, E302, E303)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V624)) end end(E299)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E297)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E295)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E293)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E291)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E289)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E286, E287)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E285)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E283)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E281)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E279)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E277)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E275)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E273)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E270, E271)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E268, E269)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E264, E265, E266, E267)); _ -> case V13 of [] -> case V14 of [] -> fun (V713) -> begin (V742 = begin (V741 = (('Idris.Idris2.Erlang.Data.IORef':'un--readIORef'('erased', 'erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V714) -> fun (V715) -> fun (V716) -> fun (V717) -> fun (V718) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor__IO'('erased', 'erased', V716, V717, V718)) end end end end end, fun (V719) -> fun (V720) -> fun (V721) -> V720 end end end, fun (V722) -> fun (V723) -> fun (V724) -> fun (V725) -> fun (V726) -> begin (V727 = (V724(V726))), begin (V728 = (V725(V726))), (V727(V728)) end end end end end end end}, fun (V729) -> fun (V730) -> fun (V731) -> fun (V732) -> fun (V733) -> begin (V734 = (V731(V733))), ((V732(V734))(V733)) end end end end end end, fun (V735) -> fun (V736) -> fun (V737) -> begin (V738 = (V736(V737))), (V738(V737)) end end end end}, fun (V739) -> fun (V740) -> V740 end end}, V1))(V713))), {'Idris.Prelude.Types.Right', V741} end), case V742 of {'Idris.Prelude.Types.Left', E262} -> (fun (V743) -> {'Idris.Prelude.Types.Left', V743} end(E262)); {'Idris.Prelude.Types.Right', E263} -> (fun (V744) -> (('Idris.Idris2.TTImp.Elab.Check':'un--checkExp'(V0, V1, V3, V4, V5, V6, V8, V9, V10, ('Idris.Idris2.Core.Normalise':'un--glueBack'(V1, V0, V744, V8, V11)), V16))(V713)) end(E263)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end; _ -> ('case--checkAppWith-10408'(V0, V16, V15, V14, V12, V11, V10, V9, V8, V7, V6, V5, V4, V3, V2, V1, ('Idris.Idris2.Data.List':'un--filter'('erased', fun (V745) -> ('nested--11008-10372--in--un--notInfer'(V0, V16, V15, V14, V12, V11, V10, V9, V8, V7, V6, V5, V4, V3, V2, V1, V745)) end, V14)))) end; _ -> case V12 of {'Idris.Builtin.MkPair', E226, E227} -> (fun (V746, V747) -> case V13 of [E228 | E229] -> (fun (V748, V749) -> fun (V750) -> begin (V751 = ('Idris.Idris2.Core.Normalise':'un--logNF'(V0, V1, <<"elab.with"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> <<"Function type"/utf8>> end, V8, V11, V750))), case V751 of {'Idris.Prelude.Types.Left', E230} -> (fun (V752) -> {'Idris.Prelude.Types.Left', V752} end(E230)); {'Idris.Prelude.Types.Right', E231} -> (fun (V753) -> begin (V754 = ('Idris.Idris2.Core.Context.Log':'un--logTerm'(V0, V1, <<"elab.with"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> <<"Function "/utf8>> end, V10, V750))), case V754 of {'Idris.Prelude.Types.Left', E232} -> (fun (V755) -> {'Idris.Prelude.Types.Left', V755} end(E232)); {'Idris.Prelude.Types.Right', E233} -> (fun (V756) -> begin (V757 = ('Idris.Idris2.Core.UnifyState':'un--genName'(V1, V3, <<"argTy"/utf8>>, V750))), case V757 of {'Idris.Prelude.Types.Left', E234} -> (fun (V758) -> {'Idris.Prelude.Types.Left', V758} end(E234)); {'Idris.Prelude.Types.Right', E235} -> (fun (V759) -> begin (V760 = ('Idris.Idris2.Core.UnifyState':'un--genName'(V1, V3, <<"retTy"/utf8>>, V750))), case V760 of {'Idris.Prelude.Types.Left', E236} -> (fun (V761) -> {'Idris.Prelude.Types.Left', V761} end(E236)); {'Idris.Prelude.Types.Right', E237} -> (fun (V762) -> begin (V767 = ('Idris.Idris2.TTImp.Elab.Check':'un--metaVar'(V0, V1, V3, V9, ('Idris.Idris2.Algebra.Semiring':'un--erased'('erased', {'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V763) -> fun (V764) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring__ZeroOneOmega'(V763, V764)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring__ZeroOneOmega'()), fun (V765) -> fun (V766) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring__ZeroOneOmega'(V765, V766)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring__ZeroOneOmega'())})), V8, V759, {'Idris.Core.TT.TType', V9}, V750))), case V767 of {'Idris.Prelude.Types.Left', E238} -> (fun (V768) -> {'Idris.Prelude.Types.Left', V768} end(E238)); {'Idris.Prelude.Types.Right', E239} -> (fun (V769) -> begin (V770 = ('Idris.Idris2.Core.Normalise':'un--gnf'(V0, V8, V769))), begin (V775 = ('Idris.Idris2.TTImp.Elab.Check':'un--metaVar'(V0, V1, V3, V9, ('Idris.Idris2.Algebra.Semiring':'un--erased'('erased', {'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V771) -> fun (V772) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring__ZeroOneOmega'(V771, V772)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring__ZeroOneOmega'()), fun (V773) -> fun (V774) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring__ZeroOneOmega'(V773, V774)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring__ZeroOneOmega'())})), V8, V762, {'Idris.Core.TT.TType', V9}, V750))), case V775 of {'Idris.Prelude.Types.Left', E240} -> (fun (V776) -> {'Idris.Prelude.Types.Left', V776} end(E240)); {'Idris.Prelude.Types.Right', E241} -> (fun (V777) -> begin (V778 = (('Idris.Idris2.TTImp.Elab.Check':'un--check'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V748, {'Idris.Prelude.Types.Just', V770}))(V750))), case V778 of {'Idris.Prelude.Types.Left', E242} -> (fun (V779) -> {'Idris.Prelude.Types.Left', V779} end(E242)); {'Idris.Prelude.Types.Right', E243} -> (fun (V780) -> case V780 of {'Idris.Builtin.MkPair', E244, E245} -> (fun (V781, V782) -> begin (V783 = {'Idris.Core.TT.App', V9, V10, V781}), begin (V812 = begin (V811 = (('Idris.Idris2.Erlang.Data.IORef':'un--readIORef'('erased', 'erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V784) -> fun (V785) -> fun (V786) -> fun (V787) -> fun (V788) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor__IO'('erased', 'erased', V786, V787, V788)) end end end end end, fun (V789) -> fun (V790) -> fun (V791) -> V790 end end end, fun (V792) -> fun (V793) -> fun (V794) -> fun (V795) -> fun (V796) -> begin (V797 = (V794(V796))), begin (V798 = (V795(V796))), (V797(V798)) end end end end end end end}, fun (V799) -> fun (V800) -> fun (V801) -> fun (V802) -> fun (V803) -> begin (V804 = (V801(V803))), ((V802(V804))(V803)) end end end end end end, fun (V805) -> fun (V806) -> fun (V807) -> begin (V808 = (V806(V807))), (V808(V807)) end end end end}, fun (V809) -> fun (V810) -> V810 end end}, V1))(V750))), {'Idris.Prelude.Types.Right', V811} end), case V812 of {'Idris.Prelude.Types.Left', E246} -> (fun (V813) -> {'Idris.Prelude.Types.Left', V813} end(E246)); {'Idris.Prelude.Types.Right', E247} -> (fun (V814) -> begin (V815 = (('Idris.Idris2.Core.Normalise':'un--nf'(V1, V0, V814, V8, V777))(V750))), case V815 of {'Idris.Prelude.Types.Left', E248} -> (fun (V816) -> {'Idris.Prelude.Types.Left', V816} end(E248)); {'Idris.Prelude.Types.Right', E249} -> (fun (V817) -> begin (V818 = ('Idris.Idris2.Core.Normalise':'un--gnf'(V0, V8, {'Idris.Core.TT.Bind', V9, V759, {'Idris.Core.TT.Pi', V9, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--top_Top__ZeroOneOmega'()), {'Idris.Core.TT.Explicit'}, V769}, ('Idris.Idris2.Core.TT':'dn--un--weaken_Weaken__Term'('erased', 'erased', V777))}))), begin (V819 = ('Idris.Idris2.Core.Normalise':'un--logGlue'(V0, V1, <<"elab.with"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> <<"Expected function type"/utf8>> end, V8, V818, V750))), case V819 of {'Idris.Prelude.Types.Left', E250} -> (fun (V820) -> {'Idris.Prelude.Types.Left', V820} end(E250)); {'Idris.Prelude.Types.Right', E251} -> (fun (V821) -> begin (V825 = (('Idris.Idris2.Prelude.Types':'un--maybe'('erased', 'erased', fun () -> fun (V822) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end end, fun () -> fun (V823) -> fun (V824) -> ('Idris.Idris2.Core.Normalise':'un--logGlue'(V0, V1, <<"elab.with"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> <<"Expected result type"/utf8>> end, V8, V823, V824)) end end end, V16))(V750))), case V825 of {'Idris.Prelude.Types.Left', E252} -> (fun (V826) -> {'Idris.Prelude.Types.Left', V826} end(E252)); {'Idris.Prelude.Types.Right', E253} -> (fun (V827) -> begin (V828 = (('un--checkAppWith'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V783, V817, {'Idris.Builtin.MkPair', V746, ('Idris.Idris2.Prelude.Types':'dn--un--+_Num__Nat'(('Idris.Idris2.Prelude.Types':'dn--un--fromInteger_Num__Nat'(1)), V747))}, V749, V14, V15, V16))(V750))), case V828 of {'Idris.Prelude.Types.Left', E254} -> (fun (V829) -> {'Idris.Prelude.Types.Left', V829} end(E254)); {'Idris.Prelude.Types.Right', E255} -> (fun (V830) -> begin (V831 = (('Idris.Idris2.TTImp.Elab.Check':'un--convert'(V0, V1, V3, V4, V9, V6, V8, ('Idris.Idris2.Core.Normalise':'un--glueBack'(V1, V0, V814, V8, V11)), V818))(V750))), case V831 of {'Idris.Prelude.Types.Left', E256} -> (fun (V832) -> {'Idris.Prelude.Types.Left', V832} end(E256)); {'Idris.Prelude.Types.Right', E257} -> (fun (V833) -> begin (V834 = {'Idris.Builtin.MkPair', V781, V782}), (('case--case block in checkAppWith-10748'(V746, V747, V748, V749, V0, V16, V15, V14, V11, V10, V9, V8, V7, V6, V5, V4, V3, V2, V1, V753, V756, V759, V762, V769, V770, V777, V781, V782, V834, V783, V814, V817, V818, V821, V827, V830, V833, case V833 of {'Idris.Core.Unify.MkUnifyResult', E258, E259, E260, E261} -> (fun (V835, V836, V837, V838) -> V835 end(E258, E259, E260, E261)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V750)) end end(E257)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E255)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E253)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E251)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E249)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E247)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E244, E245)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E243)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E241)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E239)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E237)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E235)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E233)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E231)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E228, E229)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E226, E227)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E223, E224, E225)); _ -> case V13 of [] -> case V14 of [] -> fun (V839) -> begin (V868 = begin (V867 = (('Idris.Idris2.Erlang.Data.IORef':'un--readIORef'('erased', 'erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V840) -> fun (V841) -> fun (V842) -> fun (V843) -> fun (V844) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor__IO'('erased', 'erased', V842, V843, V844)) end end end end end, fun (V845) -> fun (V846) -> fun (V847) -> V846 end end end, fun (V848) -> fun (V849) -> fun (V850) -> fun (V851) -> fun (V852) -> begin (V853 = (V850(V852))), begin (V854 = (V851(V852))), (V853(V854)) end end end end end end end}, fun (V855) -> fun (V856) -> fun (V857) -> fun (V858) -> fun (V859) -> begin (V860 = (V857(V859))), ((V858(V860))(V859)) end end end end end end, fun (V861) -> fun (V862) -> fun (V863) -> begin (V864 = (V862(V863))), (V864(V863)) end end end end}, fun (V865) -> fun (V866) -> V866 end end}, V1))(V839))), {'Idris.Prelude.Types.Right', V867} end), case V868 of {'Idris.Prelude.Types.Left', E36} -> (fun (V869) -> {'Idris.Prelude.Types.Left', V869} end(E36)); {'Idris.Prelude.Types.Right', E37} -> (fun (V870) -> (('Idris.Idris2.TTImp.Elab.Check':'un--checkExp'(V0, V1, V3, V4, V5, V6, V8, V9, V10, ('Idris.Idris2.Core.Normalise':'un--glueBack'(V1, V0, V870, V8, V11)), V16))(V839)) end(E37)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end; _ -> ('case--checkAppWith-10408'(V0, V16, V15, V14, V12, V11, V10, V9, V8, V7, V6, V5, V4, V3, V2, V1, ('Idris.Idris2.Data.List':'un--filter'('erased', fun (V871) -> ('nested--11008-10372--in--un--notInfer'(V0, V16, V15, V14, V12, V11, V10, V9, V8, V7, V6, V5, V4, V3, V2, V1, V871)) end, V14)))) end; _ -> case V12 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V872, V873) -> case V13 of [E2 | E3] -> (fun (V874, V875) -> fun (V876) -> begin (V877 = ('Idris.Idris2.Core.Normalise':'un--logNF'(V0, V1, <<"elab.with"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> <<"Function type"/utf8>> end, V8, V11, V876))), case V877 of {'Idris.Prelude.Types.Left', E4} -> (fun (V878) -> {'Idris.Prelude.Types.Left', V878} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V879) -> begin (V880 = ('Idris.Idris2.Core.Context.Log':'un--logTerm'(V0, V1, <<"elab.with"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> <<"Function "/utf8>> end, V10, V876))), case V880 of {'Idris.Prelude.Types.Left', E6} -> (fun (V881) -> {'Idris.Prelude.Types.Left', V881} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V882) -> begin (V883 = ('Idris.Idris2.Core.UnifyState':'un--genName'(V1, V3, <<"argTy"/utf8>>, V876))), case V883 of {'Idris.Prelude.Types.Left', E8} -> (fun (V884) -> {'Idris.Prelude.Types.Left', V884} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V885) -> begin (V886 = ('Idris.Idris2.Core.UnifyState':'un--genName'(V1, V3, <<"retTy"/utf8>>, V876))), case V886 of {'Idris.Prelude.Types.Left', E10} -> (fun (V887) -> {'Idris.Prelude.Types.Left', V887} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V888) -> begin (V893 = ('Idris.Idris2.TTImp.Elab.Check':'un--metaVar'(V0, V1, V3, V9, ('Idris.Idris2.Algebra.Semiring':'un--erased'('erased', {'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V889) -> fun (V890) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring__ZeroOneOmega'(V889, V890)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring__ZeroOneOmega'()), fun (V891) -> fun (V892) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring__ZeroOneOmega'(V891, V892)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring__ZeroOneOmega'())})), V8, V885, {'Idris.Core.TT.TType', V9}, V876))), case V893 of {'Idris.Prelude.Types.Left', E12} -> (fun (V894) -> {'Idris.Prelude.Types.Left', V894} end(E12)); {'Idris.Prelude.Types.Right', E13} -> (fun (V895) -> begin (V896 = ('Idris.Idris2.Core.Normalise':'un--gnf'(V0, V8, V895))), begin (V901 = ('Idris.Idris2.TTImp.Elab.Check':'un--metaVar'(V0, V1, V3, V9, ('Idris.Idris2.Algebra.Semiring':'un--erased'('erased', {'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V897) -> fun (V898) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring__ZeroOneOmega'(V897, V898)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring__ZeroOneOmega'()), fun (V899) -> fun (V900) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring__ZeroOneOmega'(V899, V900)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring__ZeroOneOmega'())})), V8, V888, {'Idris.Core.TT.TType', V9}, V876))), case V901 of {'Idris.Prelude.Types.Left', E14} -> (fun (V902) -> {'Idris.Prelude.Types.Left', V902} end(E14)); {'Idris.Prelude.Types.Right', E15} -> (fun (V903) -> begin (V904 = (('Idris.Idris2.TTImp.Elab.Check':'un--check'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V874, {'Idris.Prelude.Types.Just', V896}))(V876))), case V904 of {'Idris.Prelude.Types.Left', E16} -> (fun (V905) -> {'Idris.Prelude.Types.Left', V905} end(E16)); {'Idris.Prelude.Types.Right', E17} -> (fun (V906) -> case V906 of {'Idris.Builtin.MkPair', E18, E19} -> (fun (V907, V908) -> begin (V909 = {'Idris.Core.TT.App', V9, V10, V907}), begin (V938 = begin (V937 = (('Idris.Idris2.Erlang.Data.IORef':'un--readIORef'('erased', 'erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V910) -> fun (V911) -> fun (V912) -> fun (V913) -> fun (V914) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor__IO'('erased', 'erased', V912, V913, V914)) end end end end end, fun (V915) -> fun (V916) -> fun (V917) -> V916 end end end, fun (V918) -> fun (V919) -> fun (V920) -> fun (V921) -> fun (V922) -> begin (V923 = (V920(V922))), begin (V924 = (V921(V922))), (V923(V924)) end end end end end end end}, fun (V925) -> fun (V926) -> fun (V927) -> fun (V928) -> fun (V929) -> begin (V930 = (V927(V929))), ((V928(V930))(V929)) end end end end end end, fun (V931) -> fun (V932) -> fun (V933) -> begin (V934 = (V932(V933))), (V934(V933)) end end end end}, fun (V935) -> fun (V936) -> V936 end end}, V1))(V876))), {'Idris.Prelude.Types.Right', V937} end), case V938 of {'Idris.Prelude.Types.Left', E20} -> (fun (V939) -> {'Idris.Prelude.Types.Left', V939} end(E20)); {'Idris.Prelude.Types.Right', E21} -> (fun (V940) -> begin (V941 = (('Idris.Idris2.Core.Normalise':'un--nf'(V1, V0, V940, V8, V903))(V876))), case V941 of {'Idris.Prelude.Types.Left', E22} -> (fun (V942) -> {'Idris.Prelude.Types.Left', V942} end(E22)); {'Idris.Prelude.Types.Right', E23} -> (fun (V943) -> begin (V944 = ('Idris.Idris2.Core.Normalise':'un--gnf'(V0, V8, {'Idris.Core.TT.Bind', V9, V885, {'Idris.Core.TT.Pi', V9, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--top_Top__ZeroOneOmega'()), {'Idris.Core.TT.Explicit'}, V895}, ('Idris.Idris2.Core.TT':'dn--un--weaken_Weaken__Term'('erased', 'erased', V903))}))), begin (V945 = ('Idris.Idris2.Core.Normalise':'un--logGlue'(V0, V1, <<"elab.with"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> <<"Expected function type"/utf8>> end, V8, V944, V876))), case V945 of {'Idris.Prelude.Types.Left', E24} -> (fun (V946) -> {'Idris.Prelude.Types.Left', V946} end(E24)); {'Idris.Prelude.Types.Right', E25} -> (fun (V947) -> begin (V951 = (('Idris.Idris2.Prelude.Types':'un--maybe'('erased', 'erased', fun () -> fun (V948) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end end, fun () -> fun (V949) -> fun (V950) -> ('Idris.Idris2.Core.Normalise':'un--logGlue'(V0, V1, <<"elab.with"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> <<"Expected result type"/utf8>> end, V8, V949, V950)) end end end, V16))(V876))), case V951 of {'Idris.Prelude.Types.Left', E26} -> (fun (V952) -> {'Idris.Prelude.Types.Left', V952} end(E26)); {'Idris.Prelude.Types.Right', E27} -> (fun (V953) -> begin (V954 = (('un--checkAppWith'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V909, V943, {'Idris.Builtin.MkPair', V872, ('Idris.Idris2.Prelude.Types':'dn--un--+_Num__Nat'(('Idris.Idris2.Prelude.Types':'dn--un--fromInteger_Num__Nat'(1)), V873))}, V875, V14, V15, V16))(V876))), case V954 of {'Idris.Prelude.Types.Left', E28} -> (fun (V955) -> {'Idris.Prelude.Types.Left', V955} end(E28)); {'Idris.Prelude.Types.Right', E29} -> (fun (V956) -> begin (V957 = (('Idris.Idris2.TTImp.Elab.Check':'un--convert'(V0, V1, V3, V4, V9, V6, V8, ('Idris.Idris2.Core.Normalise':'un--glueBack'(V1, V0, V940, V8, V11)), V944))(V876))), case V957 of {'Idris.Prelude.Types.Left', E30} -> (fun (V958) -> {'Idris.Prelude.Types.Left', V958} end(E30)); {'Idris.Prelude.Types.Right', E31} -> (fun (V959) -> begin (V960 = {'Idris.Builtin.MkPair', V907, V908}), (('case--case block in checkAppWith-10748'(V872, V873, V874, V875, V0, V16, V15, V14, V11, V10, V9, V8, V7, V6, V5, V4, V3, V2, V1, V879, V882, V885, V888, V895, V896, V903, V907, V908, V960, V909, V940, V943, V944, V947, V953, V956, V959, case V959 of {'Idris.Core.Unify.MkUnifyResult', E32, E33, E34, E35} -> (fun (V961, V962, V963, V964) -> V961 end(E32, E33, E34, E35)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V876)) end end(E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E27)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E25)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E23)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E18, E19)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E17)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end.
'un--checkApp'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13) -> case V10 of {'Idris.TTImp.TTImp.IApp', E6, E7, E8} -> (fun (V14, V15, V16) -> ('un--checkApp'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V14, V15, [V16 | V11], V12, V13)) end(E6, E7, E8)); {'Idris.TTImp.TTImp.IImplicitApp', E9, E10, E11, E12} -> (fun (V17, V18, V19, V20) -> ('un--checkApp'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V17, V18, V11, [{'Idris.Builtin.MkPair', V19, V20} | V12], V13)) end(E9, E10, E11, E12)); {'Idris.TTImp.TTImp.IVar', E13, E14} -> (fun (V21, V22) -> fun (V23) -> begin (V24 = (('un--getVarType'(V0, V1, V2, V4, V5, V7, V8, V9, V22))(V23))), case V24 of {'Idris.Prelude.Types.Left', E15} -> (fun (V25) -> {'Idris.Prelude.Types.Left', V25} end(E15)); {'Idris.Prelude.Types.Right', E16} -> (fun (V26) -> case V26 of {'Idris.Builtin.MkPair', E17, E18} -> (fun (V27, V28) -> case V28 of {'Idris.Builtin.MkPair', E19, E20} -> (fun (V29, V30) -> begin (V31 = (('Idris.Idris2.Core.Normalise':'un--getNF'('erased', V1, V30))(V23))), case V31 of {'Idris.Prelude.Types.Left', E21} -> (fun (V32) -> {'Idris.Prelude.Types.Left', V32} end(E21)); {'Idris.Prelude.Types.Right', E22} -> (fun (V33) -> begin (V34 = ('Idris.Idris2.Core.Context':'un--fromIntegerName'(V1, V23))), case V34 of {'Idris.Prelude.Types.Left', E23} -> (fun (V35) -> {'Idris.Prelude.Types.Left', V35} end(E23)); {'Idris.Prelude.Types.Right', E24} -> (fun (V36) -> begin (V37 = ('Idris.Idris2.Core.Context':'un--fromStringName'(V1, V23))), case V37 of {'Idris.Prelude.Types.Left', E25} -> (fun (V38) -> {'Idris.Prelude.Types.Left', V38} end(E25)); {'Idris.Prelude.Types.Right', E26} -> (fun (V39) -> begin (V40 = ('Idris.Idris2.Core.Context':'un--fromCharName'(V1, V23))), case V40 of {'Idris.Prelude.Types.Left', E27} -> (fun (V41) -> {'Idris.Prelude.Types.Left', V41} end(E27)); {'Idris.Prelude.Types.Right', E28} -> (fun (V42) -> begin (V44 = ('Idris.Idris2.Data.List':'un--mapMaybe'('erased', 'erased', fun (V43) -> V43 end, [V36 | [V39 | [V42 | []]]]))), begin (V51 = (('nested--17517-10971--in--un--updateElabInfo'(V0, V22, V21, V13, V12, V11, V9, V8, V7, V6, V5, V4, V3, V2, V1, V44, case V6 of {'Idris.TTImp.Elab.Check.MkElabInfo', E29, E30, E31, E32, E33, E34} -> (fun (V45, V46, V47, V48, V49, V50) -> V45 end(E29, E30, E31, E32, E33, E34)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V22, V11, V6))(V23))), case V51 of {'Idris.Prelude.Types.Left', E35} -> (fun (V52) -> {'Idris.Prelude.Types.Left', V52} end(E35)); {'Idris.Prelude.Types.Right', E36} -> (fun (V53) -> begin (V124 = ('Idris.Idris2.Core.Context.Log':'un--logC'(V1, <<"elab"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun (V54) -> begin (V83 = begin (V82 = (('Idris.Idris2.Erlang.Data.IORef':'un--readIORef'('erased', 'erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V55) -> fun (V56) -> fun (V57) -> fun (V58) -> fun (V59) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor__IO'('erased', 'erased', V57, V58, V59)) end end end end end, fun (V60) -> fun (V61) -> fun (V62) -> V61 end end end, fun (V63) -> fun (V64) -> fun (V65) -> fun (V66) -> fun (V67) -> begin (V68 = (V65(V67))), begin (V69 = (V66(V67))), (V68(V69)) end end end end end end end}, fun (V70) -> fun (V71) -> fun (V72) -> fun (V73) -> fun (V74) -> begin (V75 = (V72(V74))), ((V73(V75))(V74)) end end end end end end, fun (V76) -> fun (V77) -> fun (V78) -> begin (V79 = (V77(V78))), (V79(V78)) end end end end}, fun (V80) -> fun (V81) -> V81 end end}, V1))(V54))), {'Idris.Prelude.Types.Right', V82} end), case V83 of {'Idris.Prelude.Types.Left', E37} -> (fun (V84) -> {'Idris.Prelude.Types.Left', V84} end(E37)); {'Idris.Prelude.Types.Right', E38} -> (fun (V85) -> begin (V86 = ('Idris.Idris2.Core.Normalise':'dn--un--quote_Quote__NF'(V1, V0, V85, V8, V33, V54))), case V86 of {'Idris.Prelude.Types.Left', E39} -> (fun (V87) -> {'Idris.Prelude.Types.Left', V87} end(E39)); {'Idris.Prelude.Types.Right', E40} -> (fun (V88) -> begin (V105 = (('Idris.Idris2.Prelude.Types':'un--maybe'('erased', 'erased', fun () -> fun (V89) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}} end end, fun () -> fun (V90) -> fun (V91) -> begin (V92 = (('Idris.Idris2.Core.Normalise':'un--getTerm'('erased', V90))(V91))), case V92 of {'Idris.Prelude.Types.Left', E41} -> (fun (V93) -> {'Idris.Prelude.Types.Left', V93} end(E41)); {'Idris.Prelude.Types.Right', E42} -> (fun (V94) -> begin (V95 = ('Idris.Idris2.Core.Normalise':'un--normaliseHoles'(V1, V0, V85, V8, V94, V91))), case V95 of {'Idris.Prelude.Types.Left', E43} -> (fun (V96) -> {'Idris.Prelude.Types.Left', V96} end(E43)); {'Idris.Prelude.Types.Right', E44} -> (fun (V97) -> begin (V102 = ('Idris.Idris2.Core.Context':'un--toFullNames'('erased', V1, {'Idris.Core.Context.dn--un--__mkHasNames', fun (V98) -> fun (V99) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames__(Term $vars)'('erased', V98, V99)) end end, fun (V100) -> fun (V101) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames__(Term $vars)'('erased', V100, V101)) end end}, V97, V91))), case V102 of {'Idris.Prelude.Types.Left', E45} -> (fun (V103) -> {'Idris.Prelude.Types.Left', V103} end(E45)); {'Idris.Prelude.Types.Right', E46} -> (fun (V104) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Just', V104}} end(E46)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E44)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E42)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end, V13))(V54))), case V105 of {'Idris.Prelude.Types.Left', E47} -> (fun (V106) -> {'Idris.Prelude.Types.Left', V106} end(E47)); {'Idris.Prelude.Types.Right', E48} -> (fun (V107) -> begin (V108 = (('Idris.Idris2.Core.Context':'un--getFullName'(V1, V22))(V54))), case V108 of {'Idris.Prelude.Types.Left', E49} -> (fun (V109) -> {'Idris.Prelude.Types.Left', V109} end(E49)); {'Idris.Prelude.Types.Right', E50} -> (fun (V110) -> begin (V115 = ('Idris.Idris2.Core.Context':'un--toFullNames'('erased', V1, {'Idris.Core.Context.dn--un--__mkHasNames', fun (V111) -> fun (V112) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames__(Term $vars)'('erased', V111, V112)) end end, fun (V113) -> fun (V114) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames__(Term $vars)'('erased', V113, V114)) end end}, V88, V54))), case V115 of {'Idris.Prelude.Types.Left', E51} -> (fun (V116) -> {'Idris.Prelude.Types.Left', V116} end(E51)); {'Idris.Prelude.Types.Right', E52} -> (fun (V117) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"Checking application of "/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show__Name'(V110)), ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<" ("/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show__Name'(V22)), ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<")"/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<" to "/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show__(List $a)'('erased', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V118) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--show_Show__RawImp'(V118)) end, fun (V119) -> fun (V120) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--showPrec_Show__RawImp'(V119, V120)) end end}, V11)), ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"\x{a}\x{9}Function type "/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('Idris.Idris2.Core.TT':'dn--un--show_Show__(Term $vars)'(V0, V117)), ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"\x{a}\x{9}Expected app type "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show__(Maybe $a)'('erased', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V121) -> ('Idris.Idris2.Core.TT':'dn--un--show_Show__(Term $vars)'(V0, V121)) end, fun (V122) -> fun (V123) -> ('Idris.Idris2.Core.TT':'dn--un--showPrec_Show__(Term $vars)'(V0, V122, V123)) end end}, V107))))))))))))))))))))))} end(E52)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E50)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E48)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E40)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E38)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end, V23))), case V124 of {'Idris.Prelude.Types.Left', E53} -> (fun (V125) -> {'Idris.Prelude.Types.Left', V125} end(E53)); {'Idris.Prelude.Types.Right', E54} -> (fun (V126) -> begin (V132 = begin (V127 = {'Idris.Builtin.MkPair', V27, {'Idris.Builtin.MkPair', V29, V30}}), ('case--case block in checkApp-11702'(V0, V22, V21, V13, V12, V11, V9, V8, V7, V6, V5, V4, V3, V2, V1, V27, V29, V30, V127, V33, V36, V39, V42, V44, V53, V126, ('Idris.Idris2.Data.List':'un--lookup'('erased', 'erased', {'Idris.Prelude.EqOrd.dn--un--__mkEq', fun (V128) -> fun (V129) -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq__Name'(V128, V129)) end end, fun (V130) -> fun (V131) -> ('Idris.Idris2.Core.Name':'dn--un--/=_Eq__Name'(V130, V131)) end end}, V22, V7)))) end), begin (V133 = (('un--checkAppWith'(V0, V1, V2, V3, V4, V5, V53, V7, V8, V9, V27, V33, {'Idris.Builtin.MkPair', {'Idris.Prelude.Types.Just', V132}, V29}, V11, V12, 1, V13))(V23))), case V133 of {'Idris.Prelude.Types.Left', E55} -> (fun (V134) -> {'Idris.Prelude.Types.Left', V134} end(E55)); {'Idris.Prelude.Types.Right', E56} -> (fun (V135) -> ('nested--17517-10970--in--un--normalisePrims'(V0, V22, V21, V13, V12, V11, V9, V8, V7, V6, V5, V4, V3, V2, V1, V0, V44, V8, V135, V23)) end(E56)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E54)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E36)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E28)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E26)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E24)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E22)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E19, E20)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E17, E18)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E16)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E13, E14)); _ -> fun (V136) -> begin (V137 = (('Idris.Idris2.TTImp.Elab.Check':'un--checkImp'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V10, {'Idris.Prelude.Types.Nothing'}))(V136))), case V137 of {'Idris.Prelude.Types.Left', E0} -> (fun (V138) -> {'Idris.Prelude.Types.Left', V138} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V139) -> case V139 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V140, V141) -> begin (V142 = (('Idris.Idris2.Core.Normalise':'un--getNF'('erased', V1, V141))(V136))), case V142 of {'Idris.Prelude.Types.Left', E4} -> (fun (V143) -> {'Idris.Prelude.Types.Left', V143} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V144) -> (('un--checkAppWith'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V140, V144, {'Idris.Builtin.MkPair', {'Idris.Prelude.Types.Nothing'}, 0}, V11, V12, 1, V13))(V136)) end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end.
