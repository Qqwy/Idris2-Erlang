-module('Idris.Idris2.Text.Parser.Core').
-compile('no_auto_import').
-compile('inline').
-compile({'inline_size',24}).
-export([
  'case--parse-2352'/6,
  'case--doParse-2290'/8,
  'case--case block in doParse-2205'/13,
  'case--doParse-2145'/10,
  'case--case block in doParse-2051'/14,
  'case--doParse-1987'/11,
  'case--case block in doParse-1876'/14,
  'case--doParse-1852'/10,
  'case--doParse-1790'/9,
  'case--doParse-1677'/9,
  'case--doParse-1613'/7,
  'dn--un--map_Functor__((Grammar $tok) $c)'/6,
  'dn--un--__Impl_Functor_((Grammar $tok) $c)'/6,
  'un--terminal'/4,
  'un--seq'/7,
  'un--pure'/3,
  'un--peek'/1,
  'un--parse'/5,
  'un--nextIs'/3,
  'un--mustWork'/4,
  'un--mapToken'/6,
  'un--join'/5,
  'un--fatalError'/4,
  'un--fail'/4,
  'un--eof'/1,
  'un--doParse'/6,
  'un--commit'/1,
  'un--bounds'/4,
  'un-->>='/5,
  'un--<|>'/6,
  'un--<*>'/7,
  'un--<*'/7,
  'un--*>'/7
]).
'case--parse-2352'(V0, V1, V2, V3, V4, V5) -> case V5 of {'Idris.Text.Parser.Core.Failure', E0, E1, E2, E3} -> (fun (V6, V7, V8, V9) -> {'Idris.Prelude.Types.Left', {'Idris.Text.Parser.Core.Error', V8, V9}} end(E0, E1, E2, E3)); {'Idris.Text.Parser.Core.Res', E4, E5, E6} -> (fun (V10, V11, V12) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', case V11 of {'Idris.Text.Bounded.MkBounded', E7, E8, E9, E10, E11, E12} -> (fun (V13, V14, V15, V16, V17, V18) -> V13 end(E7, E8, E9, E10, E11, E12)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V12}} end(E4, E5, E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--doParse-2290'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V7 of {'Idris.Text.Parser.Core.Failure', E0, E1, E2, E3} -> (fun (V8, V9, V10, V11) -> {'Idris.Text.Parser.Core.Failure', V8, V9, V10, V11} end(E0, E1, E2, E3)); {'Idris.Text.Parser.Core.Res', E4, E5, E6} -> (fun (V12, V13, V14) -> {'Idris.Text.Parser.Core.Res', V12, ('Idris.Idris2.Prelude.Interfaces':'un--<$>'('erased', 'erased', 'erased', fun (V15) -> fun (V16) -> fun (V17) -> fun (V18) -> ('Idris.Idris2.Text.Bounded':'dn--un--map_Functor__WithBounds'('erased', 'erased', V17, V18)) end end end end, fun (V19) -> V13 end, V13)), V14} end(E4, E5, E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in doParse-2205'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12) -> case V12 of {'Idris.Text.Parser.Core.Failure', E0, E1, E2, E3} -> (fun (V13, V14, V15, V16) -> {'Idris.Text.Parser.Core.Failure', V13, V14, V15, V16} end(E0, E1, E2, E3)); {'Idris.Text.Parser.Core.Res', E4, E5, E6} -> (fun (V17, V18, V19) -> {'Idris.Text.Parser.Core.Res', V17, ('Idris.Idris2.Text.Bounded':'un--mergeBounds'('erased', 'erased', V10, V18)), V19} end(E4, E5, E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--doParse-2145'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9) -> case V9 of {'Idris.Text.Parser.Core.Failure', E0, E1, E2, E3} -> (fun (V10, V11, V12, V13) -> {'Idris.Text.Parser.Core.Failure', V10, V11, V12, V13} end(E0, E1, E2, E3)); {'Idris.Text.Parser.Core.Res', E4, E5, E6} -> (fun (V14, V15, V16) -> ('case--case block in doParse-2205'('erased', 'erased', 'erased', V3, V4, V5, V6, V7, 'erased', V16, V15, V14, ('un--doParse'('erased', 'erased', 'erased', V14, ((V4())(case V15 of {'Idris.Text.Bounded.MkBounded', E7, E8, E9, E10, E11, E12} -> (fun (V17, V18, V19, V20, V21, V22) -> V17 end(E7, E8, E9, E10, E11, E12)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)), V16)))) end(E4, E5, E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in doParse-2051'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13) -> case V13 of {'Idris.Text.Parser.Core.Failure', E0, E1, E2, E3} -> (fun (V14, V15, V16, V17) -> {'Idris.Text.Parser.Core.Failure', V14, V15, V16, V17} end(E0, E1, E2, E3)); {'Idris.Text.Parser.Core.Res', E4, E5, E6} -> (fun (V18, V19, V20) -> {'Idris.Text.Parser.Core.Res', V18, ('Idris.Idris2.Text.Bounded':'un--mergeBounds'('erased', 'erased', V11, V19)), V20} end(E4, E5, E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--doParse-1987'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10) -> case V10 of {'Idris.Text.Parser.Core.Failure', E0, E1, E2, E3} -> (fun (V11, V12, V13, V14) -> {'Idris.Text.Parser.Core.Failure', V11, V12, V13, V14} end(E0, E1, E2, E3)); {'Idris.Text.Parser.Core.Res', E4, E5, E6} -> (fun (V15, V16, V17) -> ('case--case block in doParse-2051'('erased', 'erased', 'erased', V3, V4, V5, V6, V7, V8, 'erased', V17, V16, V15, ('un--doParse'('erased', 'erased', 'erased', V15, (V5(case V16 of {'Idris.Text.Bounded.MkBounded', E7, E8, E9, E10, E11, E12} -> (fun (V18, V19, V20, V21, V22, V23) -> V18 end(E7, E8, E9, E10, E11, E12)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)), V17)))) end(E4, E5, E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in doParse-1876'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13) -> case V13 of 0 -> {'Idris.Text.Parser.Core.Failure', V7, V11, V10, V9}; 1 -> ('un--doParse'('erased', 'erased', 'erased', 1, (V3()), V6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--doParse-1852'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9) -> case V9 of {'Idris.Text.Parser.Core.Failure', E0, E1, E2, E3} -> (fun (V10, V11, V12, V13) -> ('case--case block in doParse-1876'('erased', 'erased', V2, V3, V4, V5, V6, V7, 'erased', V13, V12, V11, V10, ('Idris.Idris2.Prelude.Basics':'un--||'(V10, fun () -> V11 end)))) end(E0, E1, E2, E3)); {'Idris.Text.Parser.Core.Res', E4, E5, E6} -> (fun (V14, V15, V16) -> {'Idris.Text.Parser.Core.Res', V7, V15, V16} end(E4, E5, E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--doParse-1790'(V0, V1, V2, V3, V4, V5, V6, V7, V8) -> case V8 of 0 -> {'Idris.Text.Parser.Core.Res', V5, V3, [V3 | V4]}; 1 -> {'Idris.Text.Parser.Core.Failure', V5, 1, V2, [V3 | V4]}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--doParse-1677'(V0, V1, V2, V3, V4, V5, V6, V7, V8) -> case V8 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Text.Parser.Core.Failure', V6, 1, V3, [V4 | V5]} end()); {'Idris.Prelude.Types.Just', E0} -> (fun (V9) -> {'Idris.Text.Parser.Core.Res', V6, ('Idris.Idris2.Prelude.Interfaces':'un--<$>'('erased', 'erased', 'erased', fun (V10) -> fun (V11) -> fun (V12) -> fun (V13) -> ('Idris.Idris2.Text.Bounded':'dn--un--map_Functor__WithBounds'('erased', 'erased', V12, V13)) end end end end, fun (V14) -> V9 end, V4)), V5} end(E0)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--doParse-1613'(V0, V1, V2, V3, V4, V5, V6) -> case V6 of {'Idris.Text.Parser.Core.Failure', E0, E1, E2, E3} -> (fun (V7, V8, V9, V10) -> {'Idris.Text.Parser.Core.Failure', V7, 0, V9, V10} end(E0, E1, E2, E3)); _ -> V6 end.
'dn--un--map_Functor__((Grammar $tok) $c)'(V0, V1, V2, V3, V4, V5) -> case V3 of 1 -> case V5 of {'Idris.Text.Parser.Core.Empty', E78} -> (fun (V6) -> {'Idris.Text.Parser.Core.Empty', (V4(V6))} end(E78)); _ -> case V5 of {'Idris.Text.Parser.Core.Fail', E75, E76} -> (fun (V7, V8) -> {'Idris.Text.Parser.Core.Fail', V7, V8} end(E75, E76)); {'Idris.Text.Parser.Core.MustWork', E77} -> (fun (V9) -> {'Idris.Text.Parser.Core.MustWork', ('dn--un--map_Functor__((Grammar $tok) $c)'('erased', 'erased', 'erased', V3, V4, V9))} end(E77)); _ -> case V3 of 0 -> case V5 of {'Idris.Text.Parser.Core.Terminal', E73, E74} -> (fun (V10, V11) -> {'Idris.Text.Parser.Core.Terminal', V10, fun (V12) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__Maybe'('erased', 'erased', V4, (V11(V12)))) end} end(E73, E74)); _ -> case V5 of {'Idris.Text.Parser.Core.Alt', E69, E70, E71, E72} -> (fun (V13, V14, V15, V16) -> {'Idris.Text.Parser.Core.Alt', V13, V14, ('dn--un--map_Functor__((Grammar $tok) $c)'('erased', 'erased', 'erased', V13, V4, V15)), fun () -> ('dn--un--map_Functor__((Grammar $tok) $c)'('erased', 'erased', 'erased', V14, V4, (V16()))) end} end(E69, E70, E71, E72)); _ -> case V3 of 0 -> case V5 of {'Idris.Text.Parser.Core.SeqEat', E66, E67, E68} -> (fun (V17, V18, V19) -> {'Idris.Text.Parser.Core.SeqEat', V17, V18, fun () -> fun (V20) -> ('dn--un--map_Functor__((Grammar $tok) $c)'('erased', 'erased', 'erased', V17, V4, ((V19())(V20)))) end end} end(E66, E67, E68)); _ -> case V5 of {'Idris.Text.Parser.Core.SeqEmpty', E61, E62, E63, E64} -> (fun (V21, V22, V23, V24) -> {'Idris.Text.Parser.Core.SeqEmpty', V21, V22, V23, fun (V25) -> ('dn--un--map_Functor__((Grammar $tok) $c)'('erased', 'erased', 'erased', V22, V4, (V24(V25)))) end} end(E61, E62, E63, E64)); {'Idris.Text.Parser.Core.Bounds', E65} -> (fun (V26) -> {'Idris.Text.Parser.Core.SeqEmpty', V3, 1, {'Idris.Text.Parser.Core.Bounds', V26}, fun (V27) -> {'Idris.Text.Parser.Core.Empty', (V4(V27))} end} end(E65)); _ -> case V3 of 1 -> {'Idris.Text.Parser.Core.SeqEmpty', 1, 1, V5, fun (V28) -> {'Idris.Text.Parser.Core.Empty', (V4(V28))} end}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end; _ -> case V5 of {'Idris.Text.Parser.Core.SeqEmpty', E56, E57, E58, E59} -> (fun (V29, V30, V31, V32) -> {'Idris.Text.Parser.Core.SeqEmpty', V29, V30, V31, fun (V33) -> ('dn--un--map_Functor__((Grammar $tok) $c)'('erased', 'erased', 'erased', V30, V4, (V32(V33)))) end} end(E56, E57, E58, E59)); {'Idris.Text.Parser.Core.Bounds', E60} -> (fun (V34) -> {'Idris.Text.Parser.Core.SeqEmpty', V3, 1, {'Idris.Text.Parser.Core.Bounds', V34}, fun (V35) -> {'Idris.Text.Parser.Core.Empty', (V4(V35))} end} end(E60)); _ -> case V3 of 1 -> {'Idris.Text.Parser.Core.SeqEmpty', 1, 1, V5, fun (V36) -> {'Idris.Text.Parser.Core.Empty', (V4(V36))} end}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end; _ -> case V5 of {'Idris.Text.Parser.Core.Alt', E52, E53, E54, E55} -> (fun (V37, V38, V39, V40) -> {'Idris.Text.Parser.Core.Alt', V37, V38, ('dn--un--map_Functor__((Grammar $tok) $c)'('erased', 'erased', 'erased', V37, V4, V39)), fun () -> ('dn--un--map_Functor__((Grammar $tok) $c)'('erased', 'erased', 'erased', V38, V4, (V40()))) end} end(E52, E53, E54, E55)); _ -> case V3 of 0 -> case V5 of {'Idris.Text.Parser.Core.SeqEat', E49, E50, E51} -> (fun (V41, V42, V43) -> {'Idris.Text.Parser.Core.SeqEat', V41, V42, fun () -> fun (V44) -> ('dn--un--map_Functor__((Grammar $tok) $c)'('erased', 'erased', 'erased', V41, V4, ((V43())(V44)))) end end} end(E49, E50, E51)); _ -> case V5 of {'Idris.Text.Parser.Core.SeqEmpty', E44, E45, E46, E47} -> (fun (V45, V46, V47, V48) -> {'Idris.Text.Parser.Core.SeqEmpty', V45, V46, V47, fun (V49) -> ('dn--un--map_Functor__((Grammar $tok) $c)'('erased', 'erased', 'erased', V46, V4, (V48(V49)))) end} end(E44, E45, E46, E47)); {'Idris.Text.Parser.Core.Bounds', E48} -> (fun (V50) -> {'Idris.Text.Parser.Core.SeqEmpty', V3, 1, {'Idris.Text.Parser.Core.Bounds', V50}, fun (V51) -> {'Idris.Text.Parser.Core.Empty', (V4(V51))} end} end(E48)); _ -> case V3 of 1 -> {'Idris.Text.Parser.Core.SeqEmpty', 1, 1, V5, fun (V52) -> {'Idris.Text.Parser.Core.Empty', (V4(V52))} end}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end; _ -> case V5 of {'Idris.Text.Parser.Core.SeqEmpty', E39, E40, E41, E42} -> (fun (V53, V54, V55, V56) -> {'Idris.Text.Parser.Core.SeqEmpty', V53, V54, V55, fun (V57) -> ('dn--un--map_Functor__((Grammar $tok) $c)'('erased', 'erased', 'erased', V54, V4, (V56(V57)))) end} end(E39, E40, E41, E42)); {'Idris.Text.Parser.Core.Bounds', E43} -> (fun (V58) -> {'Idris.Text.Parser.Core.SeqEmpty', V3, 1, {'Idris.Text.Parser.Core.Bounds', V58}, fun (V59) -> {'Idris.Text.Parser.Core.Empty', (V4(V59))} end} end(E43)); _ -> case V3 of 1 -> {'Idris.Text.Parser.Core.SeqEmpty', 1, 1, V5, fun (V60) -> {'Idris.Text.Parser.Core.Empty', (V4(V60))} end}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end end end; _ -> case V5 of {'Idris.Text.Parser.Core.Fail', E36, E37} -> (fun (V61, V62) -> {'Idris.Text.Parser.Core.Fail', V61, V62} end(E36, E37)); {'Idris.Text.Parser.Core.MustWork', E38} -> (fun (V63) -> {'Idris.Text.Parser.Core.MustWork', ('dn--un--map_Functor__((Grammar $tok) $c)'('erased', 'erased', 'erased', V3, V4, V63))} end(E38)); _ -> case V3 of 0 -> case V5 of {'Idris.Text.Parser.Core.Terminal', E34, E35} -> (fun (V64, V65) -> {'Idris.Text.Parser.Core.Terminal', V64, fun (V66) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__Maybe'('erased', 'erased', V4, (V65(V66)))) end} end(E34, E35)); _ -> case V5 of {'Idris.Text.Parser.Core.Alt', E30, E31, E32, E33} -> (fun (V67, V68, V69, V70) -> {'Idris.Text.Parser.Core.Alt', V67, V68, ('dn--un--map_Functor__((Grammar $tok) $c)'('erased', 'erased', 'erased', V67, V4, V69)), fun () -> ('dn--un--map_Functor__((Grammar $tok) $c)'('erased', 'erased', 'erased', V68, V4, (V70()))) end} end(E30, E31, E32, E33)); _ -> case V3 of 0 -> case V5 of {'Idris.Text.Parser.Core.SeqEat', E27, E28, E29} -> (fun (V71, V72, V73) -> {'Idris.Text.Parser.Core.SeqEat', V71, V72, fun () -> fun (V74) -> ('dn--un--map_Functor__((Grammar $tok) $c)'('erased', 'erased', 'erased', V71, V4, ((V73())(V74)))) end end} end(E27, E28, E29)); _ -> case V5 of {'Idris.Text.Parser.Core.SeqEmpty', E22, E23, E24, E25} -> (fun (V75, V76, V77, V78) -> {'Idris.Text.Parser.Core.SeqEmpty', V75, V76, V77, fun (V79) -> ('dn--un--map_Functor__((Grammar $tok) $c)'('erased', 'erased', 'erased', V76, V4, (V78(V79)))) end} end(E22, E23, E24, E25)); {'Idris.Text.Parser.Core.Bounds', E26} -> (fun (V80) -> {'Idris.Text.Parser.Core.SeqEmpty', V3, 1, {'Idris.Text.Parser.Core.Bounds', V80}, fun (V81) -> {'Idris.Text.Parser.Core.Empty', (V4(V81))} end} end(E26)); _ -> case V3 of 1 -> {'Idris.Text.Parser.Core.SeqEmpty', 1, 1, V5, fun (V82) -> {'Idris.Text.Parser.Core.Empty', (V4(V82))} end}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end; _ -> case V5 of {'Idris.Text.Parser.Core.SeqEmpty', E17, E18, E19, E20} -> (fun (V83, V84, V85, V86) -> {'Idris.Text.Parser.Core.SeqEmpty', V83, V84, V85, fun (V87) -> ('dn--un--map_Functor__((Grammar $tok) $c)'('erased', 'erased', 'erased', V84, V4, (V86(V87)))) end} end(E17, E18, E19, E20)); {'Idris.Text.Parser.Core.Bounds', E21} -> (fun (V88) -> {'Idris.Text.Parser.Core.SeqEmpty', V3, 1, {'Idris.Text.Parser.Core.Bounds', V88}, fun (V89) -> {'Idris.Text.Parser.Core.Empty', (V4(V89))} end} end(E21)); _ -> case V3 of 1 -> {'Idris.Text.Parser.Core.SeqEmpty', 1, 1, V5, fun (V90) -> {'Idris.Text.Parser.Core.Empty', (V4(V90))} end}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end; _ -> case V5 of {'Idris.Text.Parser.Core.Alt', E13, E14, E15, E16} -> (fun (V91, V92, V93, V94) -> {'Idris.Text.Parser.Core.Alt', V91, V92, ('dn--un--map_Functor__((Grammar $tok) $c)'('erased', 'erased', 'erased', V91, V4, V93)), fun () -> ('dn--un--map_Functor__((Grammar $tok) $c)'('erased', 'erased', 'erased', V92, V4, (V94()))) end} end(E13, E14, E15, E16)); _ -> case V3 of 0 -> case V5 of {'Idris.Text.Parser.Core.SeqEat', E10, E11, E12} -> (fun (V95, V96, V97) -> {'Idris.Text.Parser.Core.SeqEat', V95, V96, fun () -> fun (V98) -> ('dn--un--map_Functor__((Grammar $tok) $c)'('erased', 'erased', 'erased', V95, V4, ((V97())(V98)))) end end} end(E10, E11, E12)); _ -> case V5 of {'Idris.Text.Parser.Core.SeqEmpty', E5, E6, E7, E8} -> (fun (V99, V100, V101, V102) -> {'Idris.Text.Parser.Core.SeqEmpty', V99, V100, V101, fun (V103) -> ('dn--un--map_Functor__((Grammar $tok) $c)'('erased', 'erased', 'erased', V100, V4, (V102(V103)))) end} end(E5, E6, E7, E8)); {'Idris.Text.Parser.Core.Bounds', E9} -> (fun (V104) -> {'Idris.Text.Parser.Core.SeqEmpty', V3, 1, {'Idris.Text.Parser.Core.Bounds', V104}, fun (V105) -> {'Idris.Text.Parser.Core.Empty', (V4(V105))} end} end(E9)); _ -> case V3 of 1 -> {'Idris.Text.Parser.Core.SeqEmpty', 1, 1, V5, fun (V106) -> {'Idris.Text.Parser.Core.Empty', (V4(V106))} end}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end; _ -> case V5 of {'Idris.Text.Parser.Core.SeqEmpty', E0, E1, E2, E3} -> (fun (V107, V108, V109, V110) -> {'Idris.Text.Parser.Core.SeqEmpty', V107, V108, V109, fun (V111) -> ('dn--un--map_Functor__((Grammar $tok) $c)'('erased', 'erased', 'erased', V108, V4, (V110(V111)))) end} end(E0, E1, E2, E3)); {'Idris.Text.Parser.Core.Bounds', E4} -> (fun (V112) -> {'Idris.Text.Parser.Core.SeqEmpty', V3, 1, {'Idris.Text.Parser.Core.Bounds', V112}, fun (V113) -> {'Idris.Text.Parser.Core.Empty', (V4(V113))} end} end(E4)); _ -> case V3 of 1 -> {'Idris.Text.Parser.Core.SeqEmpty', 1, 1, V5, fun (V114) -> {'Idris.Text.Parser.Core.Empty', (V4(V114))} end}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end end end.
'dn--un--__Impl_Functor_((Grammar $tok) $c)'(V0, V1, V2, V3, V4, V5) -> ('dn--un--map_Functor__((Grammar $tok) $c)'('erased', 'erased', 'erased', V1, V4, V5)).
'un--terminal'(V0, V1, V2, V3) -> {'Idris.Text.Parser.Core.Terminal', V2, V3}.
'un--seq'(V0, V1, V2, V3, V4, V5, V6) -> {'Idris.Text.Parser.Core.SeqEmpty', V3, V4, V5, V6}.
'un--pure'(V0, V1, V2) -> {'Idris.Text.Parser.Core.Empty', V2}.
'un--peek'(V0) -> {'Idris.Text.Parser.Core.NextIs', <<"Unrecognised token"/utf8>>, fun (V1) -> 0 end}.
'un--parse'(V0, V1, V2, V3, V4) -> ('case--parse-2352'('erased', 'erased', V2, V4, V3, ('un--doParse'('erased', 'erased', 'erased', 1, V3, V4)))).
'un--nextIs'(V0, V1, V2) -> {'Idris.Text.Parser.Core.NextIs', V1, V2}.
'un--mustWork'(V0, V1, V2, V3) -> {'Idris.Text.Parser.Core.MustWork', V3}.
'un--mapToken'(V0, V1, V2, V3, V4, V5) -> case V5 of {'Idris.Text.Parser.Core.Empty', E0} -> (fun (V6) -> {'Idris.Text.Parser.Core.Empty', V6} end(E0)); {'Idris.Text.Parser.Core.Terminal', E1, E2} -> (fun (V7, V8) -> {'Idris.Text.Parser.Core.Terminal', V7, fun (V9) -> (V8(('Idris.Idris2.Text.Bounded':'dn--un--map_Functor__WithBounds'('erased', 'erased', V4, V9)))) end} end(E1, E2)); {'Idris.Text.Parser.Core.NextIs', E3, E4} -> (fun (V10, V11) -> {'Idris.Text.Parser.Core.SeqEmpty', 1, 1, {'Idris.Text.Parser.Core.NextIs', V10, fun (V12) -> (V11(('Idris.Idris2.Text.Bounded':'dn--un--map_Functor__WithBounds'('erased', 'erased', V4, V12)))) end}, fun (V13) -> {'Idris.Text.Parser.Core.Empty', (V4(V13))} end} end(E3, E4)); {'Idris.Text.Parser.Core.EOF'} -> (fun () -> {'Idris.Text.Parser.Core.EOF'} end()); {'Idris.Text.Parser.Core.Fail', E5, E6} -> (fun (V14, V15) -> {'Idris.Text.Parser.Core.Fail', V14, V15} end(E5, E6)); {'Idris.Text.Parser.Core.MustWork', E7} -> (fun (V16) -> {'Idris.Text.Parser.Core.MustWork', ('un--mapToken'('erased', 'erased', 'erased', 'erased', V4, V16))} end(E7)); {'Idris.Text.Parser.Core.Commit'} -> (fun () -> {'Idris.Text.Parser.Core.Commit'} end()); {'Idris.Text.Parser.Core.SeqEat', E8, E9, E10} -> (fun (V17, V18, V19) -> {'Idris.Text.Parser.Core.SeqEat', V17, ('un--mapToken'('erased', 'erased', 'erased', 'erased', V4, V18)), fun () -> fun (V20) -> ('un--mapToken'('erased', 'erased', 'erased', 'erased', V4, ((V19())(V20)))) end end} end(E8, E9, E10)); {'Idris.Text.Parser.Core.SeqEmpty', E11, E12, E13, E14} -> (fun (V21, V22, V23, V24) -> {'Idris.Text.Parser.Core.SeqEmpty', V21, V22, ('un--mapToken'('erased', 'erased', 'erased', 'erased', V4, V23)), fun (V25) -> ('un--mapToken'('erased', 'erased', 'erased', 'erased', V4, (V24(V25)))) end} end(E11, E12, E13, E14)); {'Idris.Text.Parser.Core.Alt', E15, E16, E17, E18} -> (fun (V26, V27, V28, V29) -> {'Idris.Text.Parser.Core.Alt', V26, V27, ('un--mapToken'('erased', 'erased', 'erased', 'erased', V4, V28)), fun () -> ('un--mapToken'('erased', 'erased', 'erased', 'erased', V4, (V29()))) end} end(E15, E16, E17, E18)); {'Idris.Text.Parser.Core.Bounds', E19} -> (fun (V30) -> {'Idris.Text.Parser.Core.Bounds', ('un--mapToken'('erased', 'erased', 'erased', 'erased', V4, V30))} end(E19)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--join'(V0, V1, V2, V3, V4) -> case V2 of 1 -> {'Idris.Text.Parser.Core.SeqEmpty', 1, V3, V4, fun (V5) -> V5 end}; 0 -> {'Idris.Text.Parser.Core.SeqEat', V3, V4, fun () -> fun (V6) -> V6 end end}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--fatalError'(V0, V1, V2, V3) -> {'Idris.Text.Parser.Core.Fail', 0, V3}.
'un--fail'(V0, V1, V2, V3) -> {'Idris.Text.Parser.Core.Fail', 1, V3}.
'un--eof'(V0) -> {'Idris.Text.Parser.Core.EOF'}.
'un--doParse'(V0, V1, V2, V3, V4, V5) -> case V4 of {'Idris.Text.Parser.Core.Empty', E0} -> (fun (V6) -> {'Idris.Text.Parser.Core.Res', V3, ('Idris.Idris2.Text.Bounded':'un--irrelevantBounds'('erased', V6)), V5} end(E0)); {'Idris.Text.Parser.Core.Fail', E1, E2} -> (fun (V7, V8) -> {'Idris.Text.Parser.Core.Failure', V3, V7, V8, V5} end(E1, E2)); {'Idris.Text.Parser.Core.Commit'} -> (fun () -> {'Idris.Text.Parser.Core.Res', 0, ('Idris.Idris2.Text.Bounded':'un--irrelevantBounds'('erased', {'Idris.Builtin.MkUnit'})), V5} end()); {'Idris.Text.Parser.Core.MustWork', E3} -> (fun (V9) -> ('case--doParse-1613'('erased', 'erased', 'erased', V9, V5, V3, ('un--doParse'('erased', 'erased', 'erased', V3, V9, V5)))) end(E3)); {'Idris.Text.Parser.Core.Terminal', E4, E5} -> (fun (V10, V11) -> case V5 of [] -> {'Idris.Text.Parser.Core.Failure', V3, 1, <<"End of input"/utf8>>, []}; [E6 | E7] -> (fun (V12, V13) -> ('case--doParse-1677'('erased', 'erased', V11, V10, V12, V13, V3, 'erased', (V11(V12)))) end(E6, E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E4, E5)); {'Idris.Text.Parser.Core.EOF'} -> (fun () -> case V5 of [] -> {'Idris.Text.Parser.Core.Res', V3, ('Idris.Idris2.Text.Bounded':'un--irrelevantBounds'('erased', {'Idris.Builtin.MkUnit'})), []}; [E8 | E9] -> (fun (V14, V15) -> {'Idris.Text.Parser.Core.Failure', V3, 1, <<"Expected end of input"/utf8>>, [V14 | V15]} end(E8, E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end()); {'Idris.Text.Parser.Core.NextIs', E10, E11} -> (fun (V16, V17) -> case V5 of [] -> {'Idris.Text.Parser.Core.Failure', V3, 1, <<"End of input"/utf8>>, []}; [E12 | E13] -> (fun (V18, V19) -> ('case--doParse-1790'('erased', V17, V16, V18, V19, V3, 'erased', 'erased', (V17(V18)))) end(E12, E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E10, E11)); {'Idris.Text.Parser.Core.Alt', E14, E15, E16, E17} -> (fun (V20, V21, V22, V23) -> ('case--doParse-1852'('erased', 'erased', V21, V23, V20, V22, V5, V3, 'erased', ('un--doParse'('erased', 'erased', 'erased', 1, V22, V5)))) end(E14, E15, E16, E17)); {'Idris.Text.Parser.Core.SeqEmpty', E18, E19, E20, E21} -> (fun (V24, V25, V26, V27) -> ('case--doParse-1987'('erased', 'erased', 'erased', V24, V25, V27, V26, V5, V3, 'erased', ('un--doParse'('erased', 'erased', 'erased', V3, V26, V5)))) end(E18, E19, E20, E21)); {'Idris.Text.Parser.Core.SeqEat', E22, E23, E24} -> (fun (V28, V29, V30) -> ('case--doParse-2145'('erased', 'erased', 'erased', V28, V30, V29, V5, V3, 'erased', ('un--doParse'('erased', 'erased', 'erased', V3, V29, V5)))) end(E22, E23, E24)); {'Idris.Text.Parser.Core.Bounds', E25} -> (fun (V31) -> ('case--doParse-2290'('erased', 'erased', 'erased', V31, V5, V3, 'erased', ('un--doParse'('erased', 'erased', 'erased', V3, V31, V5)))) end(E25)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--commit'(V0) -> {'Idris.Text.Parser.Core.Commit'}.
'un--bounds'(V0, V1, V2, V3) -> {'Idris.Text.Parser.Core.Bounds', V3}.
'un-->>='(V0, V1, V2, V3, V4) -> case V3 of 1 -> fun (V5) -> fun (V6) -> {'Idris.Text.Parser.Core.SeqEmpty', 1, V4, V5, V6} end end; 0 -> fun (V7) -> fun (V8) -> {'Idris.Text.Parser.Core.SeqEat', V4, V7, V8} end end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--<|>'(V0, V1, V2, V3, V4, V5) -> {'Idris.Text.Parser.Core.Alt', V2, V3, V4, V5}.
'un--<*>'(V0, V1, V2, V3, V4, V5, V6) -> {'Idris.Text.Parser.Core.SeqEmpty', V3, V4, V5, fun (V7) -> ('dn--un--map_Functor__((Grammar $tok) $c)'('erased', 'erased', 'erased', V4, V7, V6)) end}.
'un--<*'(V0, V1, V2, V3, V4, V5, V6) -> {'Idris.Text.Parser.Core.SeqEmpty', V3, V4, ('dn--un--map_Functor__((Grammar $tok) $c)'('erased', 'erased', 'erased', V3, fun (V7) -> fun (V8) -> V7 end end, V5)), fun (V9) -> ('dn--un--map_Functor__((Grammar $tok) $c)'('erased', 'erased', 'erased', V4, V9, V6)) end}.
'un--*>'(V0, V1, V2, V3, V4, V5, V6) -> {'Idris.Text.Parser.Core.SeqEmpty', V3, V4, ('dn--un--map_Functor__((Grammar $tok) $c)'('erased', 'erased', 'erased', V3, fun (V7) -> fun (V8) -> V8 end end, V5)), fun (V9) -> ('dn--un--map_Functor__((Grammar $tok) $c)'('erased', 'erased', 'erased', V4, V9, V6)) end}.
