-module('Idris.Idris2.Idris.REPL').
-compile('no_auto_import').
-compile('inline').
-compile({'inline_size',24}).
-export([
  'case--displayResult-12160'/6,
  'case--displayResult-12017'/7,
  'case--handleMissing-11755'/2,
  'case--handleMissing\x{27}-11676'/2,
  'case--repl-11586'/10,
  'case--interpret-11415'/7,
  'case--parseRepl-11382'/2,
  'case--parseRepl,fnameCmd-11320'/6,
  'case--process-11120'/7,
  'case--process-11074'/7,
  'case--process-10990'/11,
  'case--process-10938'/13,
  'case--process-10695'/8,
  'case--case block in process-10579'/12,
  'case--process-10521'/8,
  'case--process-10393'/8,
  'case--process-10293'/7,
  'case--process-10218'/7,
  'case--process-10139'/7,
  'case--process-10079'/8,
  'case--process-9987'/9,
  'case--process-9897'/9,
  'case--case block in case block in process-9744'/22,
  'case--case block in process-9652'/12,
  'case--process-9559'/8,
  'case--case block in loadMainFile-9426'/13,
  'case--loadMainFile-9373'/8,
  'case--compileExp-9254'/10,
  'case--execExp-9116'/9,
  'case--case block in case block in case block in processEdit-8909'/15,
  'case--case block in case block in processEdit-8873'/13,
  'case--case block in processEdit-8843'/12,
  'case--processEdit-8818'/10,
  'case--case block in case block in case block in processEdit-8656'/17,
  'case--case block in case block in processEdit-8616'/15,
  'case--case block in processEdit-8582'/14,
  'case--processEdit-8553'/12,
  'case--case block in case block in case block in case block in processEdit-8304'/28,
  'case--case block in case block in case block in processEdit-8242'/27,
  'case--case block in case block in processEdit-8188'/25,
  'case--case block in case block in processEdit-8089'/23,
  'case--case block in processEdit-8023'/18,
  'case--processEdit-7971'/12,
  'case--case block in case block in processEdit-7840'/13,
  'case--case block in processEdit-7814'/11,
  'case--processEdit-7777'/6,
  'case--case block in case block in processEdit-7602'/18,
  'case--case block in case block in case block in case block in case block in processEdit-7356'/29,
  'case--case block in case block in case block in case block in processEdit-7286'/27,
  'case--case block in case block in case block in processEdit-7232'/25,
  'case--case block in case block in processEdit-7165'/20,
  'case--case block in processEdit-7086'/16,
  'case--processEdit-7037'/11,
  'case--case block in case block in processEdit-6892'/18,
  'case--case block in processEdit-6838'/11,
  'case--processEdit-6808'/8,
  'case--case block in case block in case block in processEdit-6597'/26,
  'case--case block in case block in case block in processEdit-6498'/25,
  'case--case block in case block in processEdit-6435'/22,
  'case--case block in processEdit-6340'/21,
  'case--case block in processEdit-6249'/19,
  'case--case block in case block in processEdit-6063'/27,
  'case--case block in case block in processEdit-5960'/26,
  'case--case block in processEdit-5900'/22,
  'case--processEdit-5816'/13,
  'case--case block in processEdit-5704'/10,
  'case--processEdit-5683'/9,
  'case--case block in processEdit-5565'/13,
  'case--processEdit-5523'/11,
  'case--processEdit-5449'/10,
  'case--processEdit-5383'/10,
  'case--case block in processEdit-5306'/12,
  'case--case block in processEdit-5201'/15,
  'case--processEdit-5165'/12,
  'case--case block in case block in nextGenDef-5014'/8,
  'case--case block in case block in nextGenDef-4942'/10,
  'case--case block in case block in nextGenDef-4873'/11,
  'case--case block in nextGenDef-4838'/8,
  'case--nextGenDef-4809'/6,
  'case--case block in case block in nextProofSearch-4768'/7,
  'case--case block in case block in nextProofSearch-4700'/9,
  'case--case block in nextProofSearch-4644'/7,
  'case--nextProofSearch-4617'/5,
  'case--addMadeLemma,insertInBlank-4477'/10,
  'case--proofSearch,replaceStr-4386'/8,
  'case--addClause-4308'/4,
  'case--case block in updateFile-4218'/5,
  'case--updateFile-4194'/4,
  'case--case block in findCG-4002'/5,
  'case--findCG-3940'/4,
  'case--setOpt-3864'/5,
  'case--setOpt-3845'/4,
  'case--setOpt-3806'/4,
  'case--setOpt-3767'/4,
  'case--setOpt-3728'/4,
  'case--setOpt-3707'/4,
  'case--displayPats-3610'/7,
  'case--showInfo-3257'/11,
  'nested--24932-4375--in--un--replaceStr'/7,
  'nested--33019-11538--in--un--prompt'/6,
  'nested--30914-9522--in--un--nfun'/8,
  'nested--33039-12276--in--un--makeSpace'/1,
  'nested--25013-4446--in--un--insertInBlank'/8,
  'nested--32808-11294--in--un--getLoad'/4,
  'nested--32808-11295--in--un--fnameCmd'/3,
  'nested--30538-9169--in--un--execDecl'/7,
  'nested--30914-9521--in--un--emode'/7,
  'nested--33039-12277--in--un--col'/5,
  'nested--33039-12278--in--un--cmdInfo'/1,
  'nested--25144-4563--in--un--addW'/7,
  'nested--25013-4447--in--un--addApp'/10,
  'un--updateFile'/3,
  'un--showInfo'/2,
  'un--setOpt'/3,
  'un--rtrim'/1,
  'un--replCmd'/6,
  'un--repl'/6,
  'un--proofSearch'/4,
  'un--processEdit'/6,
  'un--processCatch'/7,
  'un--process'/6,
  'un--printClause'/5,
  'un--parseRepl'/1,
  'un--parseEmptyCmd'/0,
  'un--parseCmd'/0,
  'un--nextProofSearch'/4,
  'un--nextGenDef'/5,
  'un--lookupDefTyName'/3,
  'un--loadMainFile'/7,
  'un--interpret'/6,
  'un--handleResult'/6,
  'un--handleMissing\x{27}'/1,
  'un--handleMissing'/1,
  'un--getOptions'/3,
  'un--findCG'/3,
  'un--execExp'/7,
  'un--execDecls'/6,
  'un--dropLamsTm'/4,
  'un--dropLams'/2,
  'un--displayType'/4,
  'un--displayTerm'/5,
  'un--displayResult'/6,
  'un--displayPats'/4,
  'un--displayPatTerm'/5,
  'un--displayHelp'/0,
  'un--displayErrors'/6,
  'un--displayClause'/4,
  'un--compileLib'/5,
  'un--compileExp'/8,
  'un--caseSplit'/3,
  'un--anyAt'/4,
  'un--addMadeLemma'/6,
  'un--addMadeCase'/4,
  'un--addClause'/3
]).
'case--displayResult-12160'(V0, V1, V2, V3, V4, V5) -> case V0 of 0 -> <<"Set color on"/utf8>>; 1 -> <<"Set color off"/utf8>>; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--displayResult-12017'(V0, V1, V2, V3, V4, V5, V6) -> case V6 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V7, V8) -> ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'('erased', ('Idris.Idris2.Core.Name':'dn--un--pretty_Pretty__Name'('erased', V7)), ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'('erased', ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty__String'('erased', <<"is"/utf8>>)), ('Idris.Idris2.Core.TT':'dn--un--pretty_Pretty__Totality'('erased', V8)))))) end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--handleMissing-11755'(V0, V1) -> case V0 of [E0 | E1] -> (fun (V2, V3) -> case V3 of [] -> ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'('erased', ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--fromString_FromString__(Doc $ann)'('erased', <<"function"/utf8>>)), ('Idris.Idris2.Idris.Pretty':'un--code'(('Idris.Idris2.Core.Name':'dn--un--pretty_Pretty__Name'('erased', V2)))))); _ -> ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'('erased', ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--fromString_FromString__(Doc $ann)'('erased', <<"functions:"/utf8>>)), ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'un--concatWith'('erased', fun (V4) -> fun (V5) -> ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'un--surround'('erased', ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--<+>_Semigroup__(Doc $ann)'('erased', ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Symbols':'un--comma'('erased')), ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Symbols':'un--space'('erased')))), V4, V5)) end end, ('Idris.Idris2.Prelude.Interfaces':'un--<$>'('erased', 'erased', 'erased', fun (V6) -> fun (V7) -> fun (V8) -> fun (V9) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', V8, V9)) end end end end, fun (V10) -> ('Idris.Idris2.Idris.Pretty':'un--code'(('Idris.Idris2.Core.Name':'dn--un--pretty_Pretty__Name'('erased', V10)))) end, V0)))))) end end(E0, E1)); _ -> ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'('erased', ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--fromString_FromString__(Doc $ann)'('erased', <<"functions:"/utf8>>)), ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'un--concatWith'('erased', fun (V11) -> fun (V12) -> ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'un--surround'('erased', ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--<+>_Semigroup__(Doc $ann)'('erased', ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Symbols':'un--comma'('erased')), ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Symbols':'un--space'('erased')))), V11, V12)) end end, ('Idris.Idris2.Prelude.Interfaces':'un--<$>'('erased', 'erased', 'erased', fun (V13) -> fun (V14) -> fun (V15) -> fun (V16) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', V15, V16)) end end end end, fun (V17) -> ('Idris.Idris2.Idris.Pretty':'un--code'(('Idris.Idris2.Core.Name':'dn--un--pretty_Pretty__Name'('erased', V17)))) end, V0)))))) end.
'case--handleMissing\x{27}-11676'(V0, V1) -> case V0 of [E0 | E1] -> (fun (V2, V3) -> case V3 of [] -> ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<" "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show__Name'(V2)))); _ -> ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"s: "/utf8>>, ('Idris.Idris2.Core.Name.Namespace':'un--showSep'(<<", "/utf8>>, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', fun (V4) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show__Name'(V4)) end, V0)))))) end end(E0, E1)); _ -> ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"s: "/utf8>>, ('Idris.Idris2.Core.Name.Namespace':'un--showSep'(<<", "/utf8>>, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', fun (V5) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show__Name'(V5)) end, V0)))))) end.
'case--repl-11586'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9) -> case V9 of 0 -> fun (V10) -> begin (V39 = begin (V38 = (('Idris.Idris2.Prelude.IO':'un--putStrLn'('erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V11) -> fun (V12) -> fun (V13) -> fun (V14) -> fun (V15) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor__IO'('erased', 'erased', V13, V14, V15)) end end end end end, fun (V16) -> fun (V17) -> fun (V18) -> V17 end end end, fun (V19) -> fun (V20) -> fun (V21) -> fun (V22) -> fun (V23) -> begin (V24 = (V21(V23))), begin (V25 = (V22(V23))), (V24(V25)) end end end end end end end}, fun (V26) -> fun (V27) -> fun (V28) -> fun (V29) -> fun (V30) -> begin (V31 = (V28(V30))), ((V29(V31))(V30)) end end end end end end, fun (V32) -> fun (V33) -> fun (V34) -> begin (V35 = (V33(V34))), (V35(V34)) end end end end}, fun (V36) -> fun (V37) -> V37 end end}, <<""/utf8>>))(V10))), {'Idris.Prelude.Types.Right', V38} end), case V39 of {'Idris.Prelude.Types.Left', E0} -> (fun (V40) -> {'Idris.Prelude.Types.Left', V40} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V41) -> ('Idris.Idris2.Idris.REPLCommon':'un--iputStrLn'(V0, ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty__String'('erased', <<"Bye for now!"/utf8>>)), V10)) end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end; 1 -> fun (V42) -> begin (V43 = (('un--interpret'(V4, V3, V2, V1, V0, V8))(V42))), case V43 of {'Idris.Prelude.Types.Left', E2} -> (fun (V44) -> {'Idris.Prelude.Types.Left', V44} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V45) -> (('un--handleResult'(V4, V3, V2, V1, V0, V45))(V42)) end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--interpret-11415'(V0, V1, V2, V3, V4, V5, V6) -> case V6 of {'Idris.Prelude.Types.Left', E0} -> (fun (V7) -> fun (V8) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.REPL.REPLError', ('Idris.Idris2.Parser.Support':'dn--un--pretty_Pretty__(ParseError $tok)'('erased', 'erased', {'Idris.Text.PrettyPrint.Prettyprinter.Doc.dn--un--__mkPretty', fun (V9) -> fun (V10) -> ('Idris.Idris2.Parser.Lexer.Source':'dn--un--pretty_Pretty__Token'('erased', V10)) end end, fun (V11) -> fun (V12) -> fun (V13) -> ('Idris.Idris2.Parser.Lexer.Source':'dn--un--prettyPrec_Pretty__Token'('erased', V12, V13)) end end end}, V7))}} end end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V14) -> case V14 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V15) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.REPL.Done'}} end end()); {'Idris.Prelude.Types.Just', E2} -> (fun (V16) -> fun (V17) -> begin (V18 = ('Idris.Idris2.Idris.REPLOpts':'un--setCurrentElabSource'(V1, V0, V17))), case V18 of {'Idris.Prelude.Types.Left', E3} -> (fun (V19) -> {'Idris.Prelude.Types.Left', V19} end(E3)); {'Idris.Prelude.Types.Right', E4} -> (fun (V20) -> ('un--processCatch'(V5, V4, V3, V2, V1, V16, V17)) end(E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--parseRepl-11382'(V0, V1) -> case V1 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> ('Idris.Idris2.Parser.Source':'un--runParser'('erased', 1, {'Idris.Prelude.Types.Nothing'}, V0, {'Idris.Text.Parser.Core.Alt', 1, 1, ('un--parseEmptyCmd'()), fun () -> ('un--parseCmd'()) end})) end()); {'Idris.Prelude.Types.Just', E0} -> (fun (V2) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Just', V2}} end(E0)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--parseRepl,fnameCmd-11320'(V0, V1, V2, V3, V4, V5) -> case V5 of 0 -> ('nested--32808-11294--in--un--getLoad'(V0, ('Idris.Idris2.Prelude.Types.Strings':'un--length'(V1)), V2, V4)); 1 -> ('nested--32808-11295--in--un--fnameCmd'(V0, V3, V4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--process-11120'(V0, V1, V2, V3, V4, V5, V6) -> case V6 of {'Idris.Core.Options.MkSessionOpts', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13} -> (fun (V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20) -> {'Idris.Core.Options.MkSessionOpts', V7, V8, V9, V10, [V0 | V11], V12, V13, V14, V15, V16, V17, V18, V19, V20} end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--process-11074'(V0, V1, V2, V3, V4, V5, V6) -> case V6 of {'Idris.Core.Options.MkPPOpts', E0, E1, E2} -> (fun (V7, V8, V9) -> {'Idris.Core.Options.MkPPOpts', V7, 1, V9} end(E0, E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--process-10990'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10) -> case V10 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V11, V12) -> case V12 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V13, V14) -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad__Maybe'('erased', 'erased', ('Idris.Idris2.Idris.IDEMode.Holes':'un--isHole'(V14)), fun (V15) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative__Maybe'('erased', {'Idris.Builtin.MkPair', V11, {'Idris.Builtin.MkPair', V14, V15}})) end)) end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--process-10938'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12) -> case V12 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V13, V14) -> case V14 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V15, V16) -> fun (V17) -> ('Idris.Idris2.Idris.IDEMode.Holes':'un--holeData'([], V4, V2, V5, {'Idris.Core.Env.Nil'}, V13, V16, case V15 of {'Idris.Core.Context.MkGlobalDef', E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24} -> (fun (V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38) -> V20 end(E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V17)) end end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--process-10695'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V7 of [] -> fun (V8) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable__Core_Error'('erased', {'Idris.Core.Core.UndefinedName', ('Idris.Idris2.Idris.REPLOpts':'un--replFC'()), V0}, V8)) end; _ -> fun (V9) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor__IO'('erased', 'erased', fun (V10) -> case V10 of {'Idris.Prelude.Types.Left', E0} -> (fun (V11) -> {'Idris.Prelude.Types.Left', V11} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V12) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.REPL.CheckedTotal', V12}} end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('Idris.Idris2.Core.Core':'un--traverse'('erased', 'erased', fun (V13) -> fun (V14) -> begin (V15 = ('Idris.Idris2.Core.Termination':'un--checkTotal'(V5, ('Idris.Idris2.Idris.REPLOpts':'un--replFC'()), V13, V14))), case V15 of {'Idris.Prelude.Types.Left', E2} -> (fun (V16) -> {'Idris.Prelude.Types.Left', V16} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V17) -> begin (V25 = begin (V18 = ('Idris.Idris2.Core.Context':'un--getTotality'(V5, ('Idris.Idris2.Idris.REPLOpts':'un--replFC'()), V13, V14))), case V18 of {'Idris.Prelude.Types.Left', E4} -> (fun (V19) -> {'Idris.Prelude.Types.Left', V19} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V20) -> ('Idris.Idris2.Core.Context':'un--toFullNames'('erased', V5, {'Idris.Core.Context.dn--un--__mkHasNames', fun (V21) -> fun (V22) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames__Totality'(V21, V22)) end end, fun (V23) -> fun (V24) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames__Totality'(V23, V24)) end end}, V20, V14)) end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V25 of {'Idris.Prelude.Types.Left', E6} -> (fun (V26) -> {'Idris.Prelude.Types.Left', V26} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V27) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V13, V27}} end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', fun (V28) -> ('Idris.Idris2.Builtin':'un--fst'('erased', 'erased', V28)) end, V7)))), V9)) end end.
'case--case block in process-10579'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11) -> case V11 of {'Idris.Core.TT.MissingCases', E0} -> (fun (V12) -> fun (V13) -> begin (V16 = (('Idris.Idris2.Core.Core':'un--traverse'('erased', 'erased', fun (V14) -> fun (V15) -> ('un--displayPatTerm'(V5, V3, V6, V14, V15)) end end, V12))(V13))), case V16 of {'Idris.Prelude.Types.Left', E1} -> (fun (V17) -> {'Idris.Prelude.Types.Left', V17} end(E1)); {'Idris.Prelude.Types.Right', E2} -> (fun (V18) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.REPL.CasesMissing', V9, V18}} end(E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0)); {'Idris.Core.TT.NonCoveringCall', E3} -> (fun (V19) -> fun (V20) -> begin (V22 = (('Idris.Idris2.Core.Core':'un--traverse'('erased', 'erased', fun (V21) -> ('Idris.Idris2.Core.Context':'un--getFullName'(V5, V21)) end, V19))(V20))), case V22 of {'Idris.Prelude.Types.Left', E4} -> (fun (V23) -> {'Idris.Prelude.Types.Left', V23} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V24) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.REPL.CallsNonCovering', V9, V24}} end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E3)); _ -> fun (V25) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.REPL.AllCasesCovered', V9}} end end.
'case--process-10521'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V7 of [] -> fun (V8) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable__Core_Error'('erased', {'Idris.Core.Core.UndefinedName', ('Idris.Idris2.Idris.REPLOpts':'un--replFC'()), V0}, V8)) end; _ -> fun (V9) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor__IO'('erased', 'erased', fun (V10) -> case V10 of {'Idris.Prelude.Types.Left', E0} -> (fun (V11) -> {'Idris.Prelude.Types.Left', V11} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V12) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.REPL.Missed', V12}} end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('Idris.Idris2.Core.Core':'un--traverse'('erased', 'erased', fun (V13) -> fun (V14) -> begin (V15 = ('Idris.Idris2.Core.Context':'un--getTotality'(V5, ('Idris.Idris2.Idris.REPLOpts':'un--replFC'()), V13, V14))), case V15 of {'Idris.Prelude.Types.Left', E2} -> (fun (V16) -> {'Idris.Prelude.Types.Left', V16} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V17) -> begin (V18 = V7), (('case--case block in process-10579'(V0, V1, V2, V3, V4, V5, V6, V7, V18, V13, V17, case V17 of {'Idris.Core.TT.MkTotality', E4, E5} -> (fun (V19, V20) -> V20 end(E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V14)) end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', fun (V21) -> ('Idris.Idris2.Builtin':'un--fst'('erased', 'erased', V21)) end, V7)))), V9)) end end.
'case--process-10393'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V7 of [E0 | E1] -> (fun (V8, V9) -> case V8 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V10, V11) -> case V11 of {'Idris.Builtin.MkPair', E4, E5} -> (fun (V12, V13) -> case V9 of [] -> fun (V14) -> begin (V15 = ('Idris.Idris2.Core.Unify':'un--search'([], V5, V4, ('Idris.Idris2.Idris.REPLOpts':'un--replFC'()), ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--top_Top__ZeroOneOmega'()), 1, ('Idris.Idris2.Prelude.Types':'dn--un--fromInteger_Num__Nat'(1000)), V10, V13, {'Idris.Core.Env.Nil'}, V14))), case V15 of {'Idris.Prelude.Types.Left', E6} -> (fun (V16) -> {'Idris.Prelude.Types.Left', V16} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V17) -> begin (V21 = begin (V18 = ('Idris.Idris2.Core.Normalise':'un--normaliseHoles'(V5, [], V6, {'Idris.Core.Env.Nil'}, V17, V14))), case V18 of {'Idris.Prelude.Types.Left', E8} -> (fun (V19) -> {'Idris.Prelude.Types.Left', V19} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V20) -> ('Idris.Idris2.Idris.Resugar':'un--resugar'([], V5, V3, {'Idris.Core.Env.Nil'}, V20, V14)) end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V21 of {'Idris.Prelude.Types.Left', E10} -> (fun (V22) -> {'Idris.Prelude.Types.Left', V22} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V23) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.REPL.ProofFound', V23}} end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end; _ -> fun (V24) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable__Core_Error'('erased', {'Idris.Core.Core.AmbiguousName', ('Idris.Idris2.Idris.REPLOpts':'un--replFC'()), ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', fun (V25) -> ('Idris.Idris2.Builtin':'un--fst'('erased', 'erased', V25)) end, V7))}, V24)) end end end(E4, E5)); _ -> fun (V26) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable__Core_Error'('erased', {'Idris.Core.Core.AmbiguousName', ('Idris.Idris2.Idris.REPLOpts':'un--replFC'()), ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', fun (V27) -> ('Idris.Idris2.Builtin':'un--fst'('erased', 'erased', V27)) end, V7))}, V26)) end end end(E2, E3)); _ -> fun (V28) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable__Core_Error'('erased', {'Idris.Core.Core.AmbiguousName', ('Idris.Idris2.Idris.REPLOpts':'un--replFC'()), ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', fun (V29) -> ('Idris.Idris2.Builtin':'un--fst'('erased', 'erased', V29)) end, V7))}, V28)) end end end(E0, E1)); [] -> fun (V30) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable__Core_Error'('erased', {'Idris.Core.Core.UndefinedName', ('Idris.Idris2.Idris.REPLOpts':'un--replFC'()), V0}, V30)) end; _ -> fun (V31) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable__Core_Error'('erased', {'Idris.Core.Core.AmbiguousName', ('Idris.Idris2.Idris.REPLOpts':'un--replFC'()), ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', fun (V32) -> ('Idris.Idris2.Builtin':'un--fst'('erased', 'erased', V32)) end, V7))}, V31)) end end.
'case--process-10293'(V0, V1, V2, V3, V4, V5, V6) -> case V6 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V7) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.REPL.NoFileLoaded'}} end end()); {'Idris.Prelude.Types.Just', E0} -> (fun (V8) -> begin (V24 = ('Idris.Idris2.Prelude.Types':'un--maybe'('erased', 'erased', fun () -> <<""/utf8>> end, fun () -> fun (V9) -> ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<" +"/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show__Int'(((V9 + 1) rem 9223372036854775808))))) end end, case V5 of {'Idris.Idris.REPLOpts.MkREPLOpts', E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14} -> (fun (V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23) -> V16 end(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), fun (V25) -> begin (V68 = begin (V67 = (('Idris.Idris2.Erlang.System':'un--system'('erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V26) -> fun (V27) -> fun (V28) -> fun (V29) -> fun (V30) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor__IO'('erased', 'erased', V28, V29, V30)) end end end end end, fun (V31) -> fun (V32) -> fun (V33) -> V32 end end end, fun (V34) -> fun (V35) -> fun (V36) -> fun (V37) -> fun (V38) -> begin (V39 = (V36(V38))), begin (V40 = (V37(V38))), (V39(V40)) end end end end end end end}, fun (V41) -> fun (V42) -> fun (V43) -> fun (V44) -> fun (V45) -> begin (V46 = (V43(V45))), ((V44(V46))(V45)) end end end end end end, fun (V47) -> fun (V48) -> fun (V49) -> begin (V50 = (V48(V49))), (V50(V49)) end end end end}, fun (V51) -> fun (V52) -> V52 end end}, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(case V5 of {'Idris.Idris.REPLOpts.MkREPLOpts', E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28} -> (fun (V53, V54, V55, V56, V57, V58, V59, V60, V61, V62, V63, V64, V65, V66) -> V58 end(E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<" "/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(V8, V24))))))))(V25))), {'Idris.Prelude.Types.Right', V67} end), case V68 of {'Idris.Prelude.Types.Left', E29} -> (fun (V69) -> {'Idris.Prelude.Types.Left', V69} end(E29)); {'Idris.Prelude.Types.Right', E30} -> (fun (V70) -> ('un--loadMainFile'(V4, V3, V2, V1, V0, V8, V25)) end(E30)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end(E0)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--process-10218'(V0, V1, V2, V3, V4, V5, V6) -> case V6 of {'Idris.Idris.REPLOpts.MkREPLOpts', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13} -> (fun (V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20) -> {'Idris.Idris.REPLOpts.MkREPLOpts', V7, V8, {'Idris.Prelude.Types.Just', V0}, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20} end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--process-10139'(V0, V1, V2, V3, V4, V5, V6) -> case V6 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V7) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.REPL.NoFileLoaded'}} end end()); {'Idris.Prelude.Types.Just', E0} -> (fun (V8) -> fun (V9) -> ('un--loadMainFile'(V4, V3, V2, V1, V0, V8, V9)) end end(E0)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--process-10079'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V7 of [] -> fun (V8) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable__Core_Error'('erased', {'Idris.Core.Core.UndefinedName', ('Idris.Idris2.Idris.REPLOpts':'un--replFC'()), V0}, V8)) end; _ -> fun (V9) -> begin (V11 = (('Idris.Idris2.Core.Core':'un--traverse'('erased', 'erased', fun (V10) -> ('un--displayPats'(V5, V3, V6, V10)) end, V7))(V9))), case V11 of {'Idris.Prelude.Types.Left', E0} -> (fun (V12) -> {'Idris.Prelude.Types.Left', V12} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V13) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.REPL.Printed', ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'un--vsep'('erased', V13))}} end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end.
'case--process-9987'(V0, V1, V2, V3, V4, V5, V6, V7, V8) -> case V8 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V9, V10) -> fun (V11) -> begin (V40 = begin (V39 = (('Idris.Idris2.Erlang.Data.IORef':'un--readIORef'('erased', 'erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V12) -> fun (V13) -> fun (V14) -> fun (V15) -> fun (V16) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor__IO'('erased', 'erased', V14, V15, V16)) end end end end end, fun (V17) -> fun (V18) -> fun (V19) -> V18 end end end, fun (V20) -> fun (V21) -> fun (V22) -> fun (V23) -> fun (V24) -> begin (V25 = (V22(V24))), begin (V26 = (V23(V24))), (V25(V26)) end end end end end end end}, fun (V27) -> fun (V28) -> fun (V29) -> fun (V30) -> fun (V31) -> begin (V32 = (V29(V31))), ((V30(V32))(V31)) end end end end end end, fun (V33) -> fun (V34) -> fun (V35) -> begin (V36 = (V34(V35))), (V36(V35)) end end end end}, fun (V37) -> fun (V38) -> V38 end end}, V5))(V11))), {'Idris.Prelude.Types.Right', V39} end), case V40 of {'Idris.Prelude.Types.Left', E2} -> (fun (V41) -> {'Idris.Prelude.Types.Left', V41} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V42) -> begin (V46 = begin (V43 = ('Idris.Idris2.Core.Normalise':'un--normaliseHoles'(V5, [], V42, {'Idris.Core.Env.Nil'}, V9, V11))), case V43 of {'Idris.Prelude.Types.Left', E4} -> (fun (V44) -> {'Idris.Prelude.Types.Left', V44} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V45) -> ('Idris.Idris2.Idris.Resugar':'un--resugar'([], V5, V3, {'Idris.Core.Env.Nil'}, V45, V11)) end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V46 of {'Idris.Prelude.Types.Left', E6} -> (fun (V47) -> {'Idris.Prelude.Types.Left', V47} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V48) -> begin (V49 = (('Idris.Idris2.Core.Normalise':'un--getTerm'('erased', V10))(V11))), case V49 of {'Idris.Prelude.Types.Left', E8} -> (fun (V50) -> {'Idris.Prelude.Types.Left', V50} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V51) -> begin (V55 = begin (V52 = (('Idris.Idris2.Core.Normalise':'un--normaliseScope'(V5, [], V42, {'Idris.Core.Env.Nil'}, V51))(V11))), case V52 of {'Idris.Prelude.Types.Left', E10} -> (fun (V53) -> {'Idris.Prelude.Types.Left', V53} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V54) -> ('Idris.Idris2.Idris.Resugar':'un--resugar'([], V5, V3, {'Idris.Core.Env.Nil'}, V54, V11)) end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V55 of {'Idris.Prelude.Types.Left', E12} -> (fun (V56) -> {'Idris.Prelude.Types.Left', V56} end(E12)); {'Idris.Prelude.Types.Right', E13} -> (fun (V57) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.REPL.TermChecked', V48, V57}} end(E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--process-9897'(V0, V1, V2, V3, V4, V5, V6, V7, V8) -> case V8 of [] -> fun (V9) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable__Core_Error'('erased', {'Idris.Core.Core.UndefinedName', V1, V0}, V9)) end; _ -> fun (V10) -> begin (V12 = (('Idris.Idris2.Core.Core':'un--traverse'('erased', 'erased', fun (V11) -> ('un--displayType'(V6, V4, V7, V11)) end, V8))(V10))), case V12 of {'Idris.Prelude.Types.Left', E0} -> (fun (V13) -> {'Idris.Prelude.Types.Left', V13} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V14) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.REPL.Printed', ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'un--vsep'('erased', V14))}} end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end.
'case--case block in case block in process-9744'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21) -> case V21 of 0 -> fun (V22) -> begin (V23 = (('Idris.Idris2.Core.Normalise':'un--getTerm'('erased', V12))(V22))), case V23 of {'Idris.Prelude.Types.Left', E0} -> (fun (V24) -> {'Idris.Prelude.Types.Left', V24} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V25) -> begin (V29 = begin (V26 = ((((V17(V15))({'Idris.Core.Env.Nil'}))(V25))(V22))), case V26 of {'Idris.Prelude.Types.Left', E2} -> (fun (V27) -> {'Idris.Prelude.Types.Left', V27} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V28) -> ('Idris.Idris2.Idris.Resugar':'un--resugar'([], V5, V3, {'Idris.Core.Env.Nil'}, V28, V22)) end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V29 of {'Idris.Prelude.Types.Left', E4} -> (fun (V30) -> {'Idris.Prelude.Types.Left', V30} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V31) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.REPL.Evaluated', V20, {'Idris.Prelude.Types.Just', V31}}} end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end; 1 -> fun (V32) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.REPL.Evaluated', V20, {'Idris.Prelude.Types.Nothing'}}} end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in process-9652'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11) -> case V11 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V12, V13) -> fun (V14) -> begin (V15 = ('Idris.Idris2.Core.Context.Log':'un--logTerm'([], V5, <<"repl.eval"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> <<"Elaborated input"/utf8>> end, V12, V14))), case V15 of {'Idris.Prelude.Types.Left', E2} -> (fun (V16) -> {'Idris.Prelude.Types.Left', V16} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V17) -> begin (V46 = begin (V45 = (('Idris.Idris2.Erlang.Data.IORef':'un--readIORef'('erased', 'erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V18) -> fun (V19) -> fun (V20) -> fun (V21) -> fun (V22) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor__IO'('erased', 'erased', V20, V21, V22)) end end end end end, fun (V23) -> fun (V24) -> fun (V25) -> V24 end end end, fun (V26) -> fun (V27) -> fun (V28) -> fun (V29) -> fun (V30) -> begin (V31 = (V28(V30))), begin (V32 = (V29(V30))), (V31(V32)) end end end end end end end}, fun (V33) -> fun (V34) -> fun (V35) -> fun (V36) -> fun (V37) -> begin (V38 = (V35(V37))), ((V36(V38))(V37)) end end end end end end, fun (V39) -> fun (V40) -> fun (V41) -> begin (V42 = (V40(V41))), (V42(V41)) end end end end}, fun (V43) -> fun (V44) -> V44 end end}, V5))(V14))), {'Idris.Prelude.Types.Right', V45} end), case V46 of {'Idris.Prelude.Types.Left', E4} -> (fun (V47) -> {'Idris.Prelude.Types.Left', V47} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V48) -> begin (V77 = begin (V76 = (('Idris.Idris2.Erlang.Data.IORef':'un--readIORef'('erased', 'erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V49) -> fun (V50) -> fun (V51) -> fun (V52) -> fun (V53) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor__IO'('erased', 'erased', V51, V52, V53)) end end end end end, fun (V54) -> fun (V55) -> fun (V56) -> V55 end end end, fun (V57) -> fun (V58) -> fun (V59) -> fun (V60) -> fun (V61) -> begin (V62 = (V59(V61))), begin (V63 = (V60(V61))), (V62(V63)) end end end end end end end}, fun (V64) -> fun (V65) -> fun (V66) -> fun (V67) -> fun (V68) -> begin (V69 = (V66(V68))), ((V67(V69))(V68)) end end end end end end, fun (V70) -> fun (V71) -> fun (V72) -> begin (V73 = (V71(V72))), (V73(V72)) end end end end}, fun (V74) -> fun (V75) -> V75 end end}, V1))(V14))), {'Idris.Prelude.Types.Right', V76} end), case V77 of {'Idris.Prelude.Types.Left', E6} -> (fun (V78) -> {'Idris.Prelude.Types.Left', V78} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V79) -> begin (V94 = ('nested--30914-9522--in--un--nfun'(V0, V1, V2, V3, V4, V5, [], case V79 of {'Idris.Idris.REPLOpts.MkREPLOpts', E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21} -> (fun (V80, V81, V82, V83, V84, V85, V86, V87, V88, V89, V90, V91, V92, V93) -> V81 end(E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), begin (V95 = ((((V94(V48))({'Idris.Core.Env.Nil'}))(V12))(V14))), case V95 of {'Idris.Prelude.Types.Left', E22} -> (fun (V96) -> {'Idris.Prelude.Types.Left', V96} end(E22)); {'Idris.Prelude.Types.Right', E23} -> (fun (V97) -> begin (V98 = (('Idris.Idris2.Core.Normalise':'un--logTermNF'([], V5, <<"repl.eval"/utf8>>, (1 + (1 + (1 + (1 + (1 + 0))))), fun () -> <<"Normalised"/utf8>> end, {'Idris.Core.Env.Nil'}, V97))(V14))), case V98 of {'Idris.Prelude.Types.Left', E24} -> (fun (V99) -> {'Idris.Prelude.Types.Left', V99} end(E24)); {'Idris.Prelude.Types.Right', E25} -> (fun (V100) -> begin (V101 = ('Idris.Idris2.Idris.Resugar':'un--resugar'([], V5, V3, {'Idris.Core.Env.Nil'}, V97, V14))), case V101 of {'Idris.Prelude.Types.Left', E26} -> (fun (V102) -> {'Idris.Prelude.Types.Left', V102} end(E26)); {'Idris.Prelude.Types.Right', E27} -> (fun (V103) -> begin (V104 = {'Idris.Builtin.MkPair', V12, V13}), (('case--case block in case block in process-9744'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V12, V13, V104, V17, V48, V79, V94, V97, V100, V103, case V79 of {'Idris.Idris.REPLOpts.MkREPLOpts', E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41} -> (fun (V105, V106, V107, V108, V109, V110, V111, V112, V113, V114, V115, V116, V117, V118) -> V105 end(E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V14)) end end(E27)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E25)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E23)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--process-9559'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V7 of {'Idris.Idris.Syntax.Execute'} -> (fun () -> fun (V8) -> begin (V9 = ('un--execExp'(V5, V4, V3, V2, V1, V0, V8))), case V9 of {'Idris.Prelude.Types.Left', E66} -> (fun (V10) -> {'Idris.Prelude.Types.Left', V10} end(E66)); {'Idris.Prelude.Types.Right', E67} -> (fun (V11) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.REPL.Executed', V0}} end(E67)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end()); _ -> fun (V12) -> begin (V13 = ('Idris.Idris2.Idris.Desugar':'un--desugar'(V3, V5, V2, V4, {'Idris.Idris.Desugar.AnyExpr'}, [], V0, V12))), case V13 of {'Idris.Prelude.Types.Left', E0} -> (fun (V14) -> {'Idris.Prelude.Types.Left', V14} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V15) -> begin (V16 = (('Idris.Idris2.Core.Context':'un--resolveName'(V5, {'Idris.Core.Name.UN', <<"[input]"/utf8>>}))(V12))), case V16 of {'Idris.Prelude.Types.Left', E2} -> (fun (V17) -> {'Idris.Prelude.Types.Left', V17} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V18) -> begin (V25 = ('Idris.Idris2.Core.Core':'dn--un--catch_Catchable__Core_Error'('erased', fun (V19) -> begin (V20 = ('Idris.Idris2.Core.Context':'un--hide'(V5, ('Idris.Idris2.Idris.REPLOpts':'un--replFC'()), {'Idris.Core.Name.NS', ('Idris.Idris2.Core.Name.Namespace':'un--primIONS'()), {'Idris.Core.Name.UN', <<"::"/utf8>>}}, V19))), case V20 of {'Idris.Prelude.Types.Left', E4} -> (fun (V21) -> {'Idris.Prelude.Types.Left', V21} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V22) -> ('Idris.Idris2.Core.Context':'un--hide'(V5, ('Idris.Idris2.Idris.REPLOpts':'un--replFC'()), {'Idris.Core.Name.NS', ('Idris.Idris2.Core.Name.Namespace':'un--primIONS'()), {'Idris.Core.Name.UN', <<"Nil"/utf8>>}}, V19)) end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end, fun (V23) -> fun (V24) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end end, V12))), case V25 of {'Idris.Prelude.Types.Left', E6} -> (fun (V26) -> {'Idris.Prelude.Types.Left', V26} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V27) -> begin (V42 = (('Idris.Idris2.TTImp.Elab':'un--elabTerm'([], V5, V2, V4, V18, ('nested--30914-9521--in--un--emode'(V0, V1, V2, V3, V4, V5, case V6 of {'Idris.Idris.REPLOpts.MkREPLOpts', E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21} -> (fun (V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41) -> V29 end(E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)), [], [], {'Idris.Core.Env.Nil'}, V15, {'Idris.Prelude.Types.Nothing'}))(V12))), case V42 of {'Idris.Prelude.Types.Left', E22} -> (fun (V43) -> {'Idris.Prelude.Types.Left', V43} end(E22)); {'Idris.Prelude.Types.Right', E23} -> (fun (V44) -> case V44 of {'Idris.Builtin.MkPair', E24, E25} -> (fun (V45, V46) -> begin (V47 = ('Idris.Idris2.Core.Context.Log':'un--logTerm'([], V5, <<"repl.eval"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> <<"Elaborated input"/utf8>> end, V45, V12))), case V47 of {'Idris.Prelude.Types.Left', E26} -> (fun (V48) -> {'Idris.Prelude.Types.Left', V48} end(E26)); {'Idris.Prelude.Types.Right', E27} -> (fun (V49) -> begin (V78 = begin (V77 = (('Idris.Idris2.Erlang.Data.IORef':'un--readIORef'('erased', 'erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V50) -> fun (V51) -> fun (V52) -> fun (V53) -> fun (V54) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor__IO'('erased', 'erased', V52, V53, V54)) end end end end end, fun (V55) -> fun (V56) -> fun (V57) -> V56 end end end, fun (V58) -> fun (V59) -> fun (V60) -> fun (V61) -> fun (V62) -> begin (V63 = (V60(V62))), begin (V64 = (V61(V62))), (V63(V64)) end end end end end end end}, fun (V65) -> fun (V66) -> fun (V67) -> fun (V68) -> fun (V69) -> begin (V70 = (V67(V69))), ((V68(V70))(V69)) end end end end end end, fun (V71) -> fun (V72) -> fun (V73) -> begin (V74 = (V72(V73))), (V74(V73)) end end end end}, fun (V75) -> fun (V76) -> V76 end end}, V5))(V12))), {'Idris.Prelude.Types.Right', V77} end), case V78 of {'Idris.Prelude.Types.Left', E28} -> (fun (V79) -> {'Idris.Prelude.Types.Left', V79} end(E28)); {'Idris.Prelude.Types.Right', E29} -> (fun (V80) -> begin (V109 = begin (V108 = (('Idris.Idris2.Erlang.Data.IORef':'un--readIORef'('erased', 'erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V81) -> fun (V82) -> fun (V83) -> fun (V84) -> fun (V85) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor__IO'('erased', 'erased', V83, V84, V85)) end end end end end, fun (V86) -> fun (V87) -> fun (V88) -> V87 end end end, fun (V89) -> fun (V90) -> fun (V91) -> fun (V92) -> fun (V93) -> begin (V94 = (V91(V93))), begin (V95 = (V92(V93))), (V94(V95)) end end end end end end end}, fun (V96) -> fun (V97) -> fun (V98) -> fun (V99) -> fun (V100) -> begin (V101 = (V98(V100))), ((V99(V101))(V100)) end end end end end end, fun (V102) -> fun (V103) -> fun (V104) -> begin (V105 = (V103(V104))), (V105(V104)) end end end end}, fun (V106) -> fun (V107) -> V107 end end}, V1))(V12))), {'Idris.Prelude.Types.Right', V108} end), case V109 of {'Idris.Prelude.Types.Left', E30} -> (fun (V110) -> {'Idris.Prelude.Types.Left', V110} end(E30)); {'Idris.Prelude.Types.Right', E31} -> (fun (V111) -> begin (V126 = ('nested--30914-9522--in--un--nfun'(V0, V1, V2, V3, V4, V5, [], case V111 of {'Idris.Idris.REPLOpts.MkREPLOpts', E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45} -> (fun (V112, V113, V114, V115, V116, V117, V118, V119, V120, V121, V122, V123, V124, V125) -> V113 end(E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), begin (V127 = ((((V126(V80))({'Idris.Core.Env.Nil'}))(V45))(V12))), case V127 of {'Idris.Prelude.Types.Left', E46} -> (fun (V128) -> {'Idris.Prelude.Types.Left', V128} end(E46)); {'Idris.Prelude.Types.Right', E47} -> (fun (V129) -> begin (V130 = (('Idris.Idris2.Core.Normalise':'un--logTermNF'([], V5, <<"repl.eval"/utf8>>, (1 + (1 + (1 + (1 + (1 + 0))))), fun () -> <<"Normalised"/utf8>> end, {'Idris.Core.Env.Nil'}, V129))(V12))), case V130 of {'Idris.Prelude.Types.Left', E48} -> (fun (V131) -> {'Idris.Prelude.Types.Left', V131} end(E48)); {'Idris.Prelude.Types.Right', E49} -> (fun (V132) -> begin (V133 = ('Idris.Idris2.Idris.Resugar':'un--resugar'([], V5, V3, {'Idris.Core.Env.Nil'}, V129, V12))), case V133 of {'Idris.Prelude.Types.Left', E50} -> (fun (V134) -> {'Idris.Prelude.Types.Left', V134} end(E50)); {'Idris.Prelude.Types.Right', E51} -> (fun (V135) -> begin (V136 = {'Idris.Builtin.MkPair', V45, V46}), (('case--case block in case block in process-9744'(V0, V1, V2, V3, V4, V5, V6, V7, V15, V18, V27, V45, V46, V136, V49, V80, V111, V126, V129, V132, V135, case V111 of {'Idris.Idris.REPLOpts.MkREPLOpts', E52, E53, E54, E55, E56, E57, E58, E59, E60, E61, E62, E63, E64, E65} -> (fun (V137, V138, V139, V140, V141, V142, V143, V144, V145, V146, V147, V148, V149, V150) -> V137 end(E52, E53, E54, E55, E56, E57, E58, E59, E60, E61, E62, E63, E64, E65)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V12)) end end(E51)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E49)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E47)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E27)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E24, E25)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E23)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end.
'case--case block in loadMainFile-9426'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12) -> case V9 of [] -> fun (V13) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.REPL.FileLoaded', V0}} end; _ -> fun (V14) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.REPL.ErrorsBuildingFile', V0, V9}} end end.
'case--loadMainFile-9373'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V7 of {'Idris.Prelude.Types.Right', E0} -> (fun (V8) -> fun (V9) -> begin (V11 = ('Idris.Idris2.Core.Context.Log':'un--logTime'('erased', V5, fun () -> <<"+ Build deps"/utf8>> end, fun (V10) -> ('Idris.Idris2.Idris.ModTree':'un--buildDeps'(V5, V3, V2, V4, V1, V0, V10)) end, V9))), case V11 of {'Idris.Prelude.Types.Left', E1} -> (fun (V12) -> {'Idris.Prelude.Types.Left', V12} end(E1)); {'Idris.Prelude.Types.Right', E2} -> (fun (V13) -> begin (V14 = (('Idris.Idris2.Idris.REPLCommon':'un--updateErrorLine'(V1, V13))(V9))), case V14 of {'Idris.Prelude.Types.Left', E3} -> (fun (V15) -> {'Idris.Prelude.Types.Left', V15} end(E3)); {'Idris.Prelude.Types.Right', E4} -> (fun (V16) -> begin (V17 = ('Idris.Idris2.Idris.REPLOpts':'un--setSource'(V1, V8, V9))), case V17 of {'Idris.Prelude.Types.Left', E5} -> (fun (V18) -> {'Idris.Prelude.Types.Left', V18} end(E5)); {'Idris.Prelude.Types.Right', E6} -> (fun (V19) -> begin (V20 = ('Idris.Idris2.Idris.REPLOpts':'un--resetProofState'(V1, V9))), case V20 of {'Idris.Prelude.Types.Left', E7} -> (fun (V21) -> {'Idris.Prelude.Types.Left', V21} end(E7)); {'Idris.Prelude.Types.Right', E8} -> (fun (V22) -> case V13 of [] -> {'Idris.Prelude.Types.Right', {'Idris.Idris.REPL.FileLoaded', V0}}; _ -> {'Idris.Prelude.Types.Right', {'Idris.Idris.REPL.ErrorsBuildingFile', V0, V13}} end end(E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0)); {'Idris.Prelude.Types.Left', E9} -> (fun (V23) -> fun (V24) -> begin (V25 = ('Idris.Idris2.Idris.REPLOpts':'un--setSource'(V1, <<""/utf8>>, V24))), case V25 of {'Idris.Prelude.Types.Left', E10} -> (fun (V26) -> {'Idris.Prelude.Types.Left', V26} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V27) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.REPL.ErrorLoadingFile', V0, V23}} end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--compileExp-9254'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9) -> case V9 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V10, V11) -> fun (V12) -> begin (V17 = ('Idris.Idris2.Core.LinearCheck':'un--linearCheck'([], V6, V5, ('Idris.Idris2.Idris.REPLOpts':'un--replFC'()), ('Idris.Idris2.Algebra.Semiring':'un--linear'('erased', {'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V13) -> fun (V14) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring__ZeroOneOmega'(V13, V14)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring__ZeroOneOmega'()), fun (V15) -> fun (V16) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring__ZeroOneOmega'(V15, V16)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring__ZeroOneOmega'())})), 0, {'Idris.Core.Env.Nil'}, V10, V12))), case V17 of {'Idris.Prelude.Types.Left', E2} -> (fun (V18) -> {'Idris.Prelude.Types.Left', V18} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V19) -> begin (V23 = begin (V20 = ('un--findCG'(V2, V6, V12))), case V20 of {'Idris.Prelude.Types.Left', E4} -> (fun (V21) -> {'Idris.Prelude.Types.Left', V21} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V22) -> ('Idris.Idris2.Compiler.Common':'un--cgCompileExpr'(V6, V22, V19, V0, V12)) end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V23 of {'Idris.Prelude.Types.Left', E6} -> (fun (V24) -> {'Idris.Prelude.Types.Left', V24} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V25) -> (('Idris.Idris2.Prelude.Types':'un--maybe'('erased', 'erased', fun () -> fun (V26) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.REPL.CompilationFailed'}} end end, fun () -> fun (V27) -> fun (V28) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.REPL.Compiled', V27}} end end end, V25))(V12)) end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--execExp-9116'(V0, V1, V2, V3, V4, V5, V6, V7, V8) -> case V8 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V9, V10) -> fun (V11) -> begin (V16 = ('Idris.Idris2.Core.LinearCheck':'un--linearCheck'([], V5, V4, ('Idris.Idris2.Idris.REPLOpts':'un--replFC'()), ('Idris.Idris2.Algebra.Semiring':'un--linear'('erased', {'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V12) -> fun (V13) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring__ZeroOneOmega'(V12, V13)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring__ZeroOneOmega'()), fun (V14) -> fun (V15) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring__ZeroOneOmega'(V14, V15)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring__ZeroOneOmega'())})), 0, {'Idris.Core.Env.Nil'}, V9, V11))), case V16 of {'Idris.Prelude.Types.Left', E2} -> (fun (V17) -> {'Idris.Prelude.Types.Left', V17} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V18) -> begin (V22 = begin (V19 = ('un--findCG'(V1, V5, V11))), case V19 of {'Idris.Prelude.Types.Left', E4} -> (fun (V20) -> {'Idris.Prelude.Types.Left', V20} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V21) -> ('Idris.Idris2.Compiler.Common':'un--cgExecuteExpr'(V5, V21, V18, V11)) end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V22 of {'Idris.Prelude.Types.Left', E6} -> (fun (V23) -> {'Idris.Prelude.Types.Left', V23} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V24) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.REPL.Executed', V0}} end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in case block in case block in processEdit-8909'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14) -> case V2 of 0 -> fun (V15) -> ('un--updateFile'(V3, fun (V16) -> ('un--addMadeCase'(V13, V14, ('Idris.Idris2.Prelude.Types':'dn--un--max_Ord__Nat'(('Idris.Idris2.Prelude.Types':'dn--un--fromInteger_Num__Nat'(0)), ('Idris.Idris2.Prelude.Types':'dn--un--cast_Cast__Int_Integer'(('Idris.Idris2.Prelude.Num':'dn--un---_Neg__Int'(V1, 1)))))), V16)) end, V15)) end; 1 -> fun (V17) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.REPL.MadeWith', V13, V14}} end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in case block in processEdit-8873'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12) -> case V12 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V13, V14) -> begin (V15 = ('Idris.Idris2.Data.Strings':'un--lines'(('Idris.Idris2.Idris.IDEMode.MakeClause':'un--makeWith'(V0, V11))))), case V2 of 0 -> fun (V16) -> ('un--updateFile'(V3, fun (V17) -> ('un--addMadeCase'(V13, V15, ('Idris.Idris2.Prelude.Types':'dn--un--max_Ord__Nat'(('Idris.Idris2.Prelude.Types':'dn--un--fromInteger_Num__Nat'(0)), ('Idris.Idris2.Prelude.Types':'dn--un--cast_Cast__Int_Integer'(('Idris.Idris2.Prelude.Num':'dn--un---_Neg__Int'(V1, 1)))))), V17)) end, V16)) end; 1 -> fun (V18) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.REPL.MadeWith', V13, V15}} end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in processEdit-8843'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11) -> case V11 of {'Idris.Prelude.Types.Right', E0} -> (fun (V12) -> ('case--case block in case block in processEdit-8873'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V12, ('Idris.Idris2.Parser.Unlit':'un--isLitLine'(V9)))) end(E0)); {'Idris.Prelude.Types.Left', E1} -> (fun (V13) -> fun (V14) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.REPL.EditError', ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'un--vsep'('erased', ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', fun (V15) -> ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'un--unsafeTextWithoutNewLines'('erased', V15)) end, ('Idris.Idris2.Data.Strings':'un--lines'(<<"Invalid literate Idris"/utf8>>))))))}} end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--processEdit-8818'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9) -> case V9 of {'Idris.Prelude.Types.Just', E0} -> (fun (V10) -> begin (V11 = {'Idris.Prelude.Types.Just', V10}), ('case--case block in processEdit-8843'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V10, V11, ('Idris.Idris2.Parser.Unlit':'un--unlit'(V8, V10)))) end end(E0)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V12) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.REPL.EditError', ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'un--vsep'('erased', ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', fun (V13) -> ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'un--unsafeTextWithoutNewLines'('erased', V13)) end, ('Idris.Idris2.Data.Strings':'un--lines'(<<"Source line not available"/utf8>>))))))}} end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in case block in case block in processEdit-8656'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16) -> case V2 of 0 -> fun (V17) -> ('un--updateFile'(V3, fun (V18) -> ('un--addMadeCase'(V15, V16, ('Idris.Idris2.Prelude.Types':'dn--un--max_Ord__Nat'(('Idris.Idris2.Prelude.Types':'dn--un--fromInteger_Num__Nat'(0)), ('Idris.Idris2.Prelude.Types':'dn--un--cast_Cast__Int_Integer'(('Idris.Idris2.Prelude.Num':'dn--un---_Neg__Int'(V1, 1)))))), V18)) end, V17)) end; 1 -> fun (V19) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.REPL.MadeCase', V15, V16}} end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in case block in processEdit-8616'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14) -> case V14 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V15, V16) -> begin (V17 = ('Idris.Idris2.Data.Strings':'un--lines'(('Idris.Idris2.Idris.IDEMode.MakeClause':'un--makeCase'(V10, V0, V13))))), case V2 of 0 -> fun (V18) -> ('un--updateFile'(V3, fun (V19) -> ('un--addMadeCase'(V15, V17, ('Idris.Idris2.Prelude.Types':'dn--un--max_Ord__Nat'(('Idris.Idris2.Prelude.Types':'dn--un--fromInteger_Num__Nat'(0)), ('Idris.Idris2.Prelude.Types':'dn--un--cast_Cast__Int_Integer'(('Idris.Idris2.Prelude.Num':'dn--un---_Neg__Int'(V1, 1)))))), V19)) end, V18)) end; 1 -> fun (V20) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.REPL.MadeCase', V15, V17}} end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in processEdit-8582'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13) -> case V13 of {'Idris.Prelude.Types.Right', E0} -> (fun (V14) -> ('case--case block in case block in processEdit-8616'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V14, ('Idris.Idris2.Parser.Unlit':'un--isLitLine'(V11)))) end(E0)); {'Idris.Prelude.Types.Left', E1} -> (fun (V15) -> fun (V16) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.REPL.EditError', ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'un--vsep'('erased', ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', fun (V17) -> ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'un--unsafeTextWithoutNewLines'('erased', V17)) end, ('Idris.Idris2.Data.Strings':'un--lines'(<<"Invalid literate Idris"/utf8>>))))))}} end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--processEdit-8553'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11) -> case V11 of {'Idris.Prelude.Types.Just', E0} -> (fun (V12) -> begin (V13 = {'Idris.Prelude.Types.Just', V12}), ('case--case block in processEdit-8582'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V12, V13, ('Idris.Idris2.Parser.Unlit':'un--unlit'(V8, V12)))) end end(E0)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V14) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.REPL.EditError', ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'un--vsep'('erased', ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', fun (V15) -> ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'un--unsafeTextWithoutNewLines'('erased', V15)) end, ('Idris.Idris2.Data.Strings':'un--lines'(<<"Source line not available"/utf8>>))))))}} end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in case block in case block in case block in processEdit-8304'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27) -> case V2 of 0 -> fun (V28) -> ('un--updateFile'(V3, fun (V29) -> ('un--addMadeLemma'(V27, V0, ('Idris.Idris2.Idris.Syntax':'dn--un--show_Show__PTerm'(V20)), V23, ('Idris.Idris2.Prelude.Types':'dn--un--max_Ord__Nat'(('Idris.Idris2.Prelude.Types':'dn--un--fromInteger_Num__Nat'(0)), ('Idris.Idris2.Prelude.Types':'dn--un--cast_Cast__Int_Integer'(('Idris.Idris2.Prelude.Num':'dn--un---_Neg__Int'(V1, 1)))))), V29)) end, V28)) end; 1 -> fun (V30) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.REPL.MadeLemma', V27, V0, V20, V23}} end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in case block in case block in processEdit-8242'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26) -> case V26 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V27, V28) -> case V2 of 0 -> fun (V29) -> ('un--updateFile'(V3, fun (V30) -> ('un--addMadeLemma'(V27, V0, ('Idris.Idris2.Idris.Syntax':'dn--un--show_Show__PTerm'(V20)), V23, ('Idris.Idris2.Prelude.Types':'dn--un--max_Ord__Nat'(('Idris.Idris2.Prelude.Types':'dn--un--fromInteger_Num__Nat'(0)), ('Idris.Idris2.Prelude.Types':'dn--un--cast_Cast__Int_Integer'(('Idris.Idris2.Prelude.Num':'dn--un---_Neg__Int'(V1, 1)))))), V30)) end, V29)) end; 1 -> fun (V31) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.REPL.MadeLemma', V27, V0, V20, V23}} end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in case block in processEdit-8188'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24) -> case V24 of {'Idris.Prelude.Types.Just', E0} -> (fun (V25) -> begin (V26 = {'Idris.Prelude.Types.Just', V25}), ('case--case block in case block in case block in processEdit-8242'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V25, V26, ('Idris.Idris2.Parser.Unlit':'un--isLitLine'(V25)))) end end(E0)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V27) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.REPL.EditError', ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'un--vsep'('erased', ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', fun (V28) -> ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'un--unsafeTextWithoutNewLines'('erased', V28)) end, ('Idris.Idris2.Data.Strings':'un--lines'(<<"Source line not found"/utf8>>))))))}} end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in case block in processEdit-8089'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22) -> case V10 of 0 -> ('Idris.Idris2.Idris.Resugar':'un--addBracket'(('Idris.Idris2.Idris.REPLOpts':'un--replFC'()), V21)); 1 -> V21; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in processEdit-8023'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17) -> case V17 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V18, V19) -> fun (V20) -> begin (V21 = ('Idris.Idris2.Idris.Resugar':'un--pterm'(V7, V5, V18, V20))), case V21 of {'Idris.Prelude.Types.Left', E2} -> (fun (V22) -> {'Idris.Prelude.Types.Left', V22} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V23) -> begin (V24 = ('Idris.Idris2.Idris.Resugar':'un--pterm'(V7, V5, V19, V20))), case V24 of {'Idris.Prelude.Types.Left', E4} -> (fun (V25) -> {'Idris.Prelude.Types.Left', V25} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V26) -> begin (V55 = begin (V54 = (('Idris.Idris2.Erlang.Data.IORef':'un--readIORef'('erased', 'erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V27) -> fun (V28) -> fun (V29) -> fun (V30) -> fun (V31) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor__IO'('erased', 'erased', V29, V30, V31)) end end end end end, fun (V32) -> fun (V33) -> fun (V34) -> V33 end end end, fun (V35) -> fun (V36) -> fun (V37) -> fun (V38) -> fun (V39) -> begin (V40 = (V37(V39))), begin (V41 = (V38(V39))), (V40(V41)) end end end end end end end}, fun (V42) -> fun (V43) -> fun (V44) -> fun (V45) -> fun (V46) -> begin (V47 = (V44(V46))), ((V45(V47))(V46)) end end end end end end, fun (V48) -> fun (V49) -> fun (V50) -> begin (V51 = (V49(V50))), (V51(V50)) end end end end}, fun (V52) -> fun (V53) -> V53 end end}, V3))(V20))), {'Idris.Prelude.Types.Right', V54} end), case V55 of {'Idris.Prelude.Types.Left', E6} -> (fun (V56) -> {'Idris.Prelude.Types.Left', V56} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V57) -> begin (V58 = ('Idris.Idris2.Idris.Syntax':'dn--un--show_Show__PTerm'(case V10 of 0 -> ('Idris.Idris2.Idris.Resugar':'un--addBracket'(('Idris.Idris2.Idris.REPLOpts':'un--replFC'()), V26)); 1 -> V26; _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), begin (V59 = ('Idris.Idris2.Idris.REPLOpts':'un--getSourceLine'(V3, V1, V20))), case V59 of {'Idris.Prelude.Types.Left', E8} -> (fun (V60) -> {'Idris.Prelude.Types.Left', V60} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V61) -> begin (V62 = {'Idris.Builtin.MkPair', V18, V19}), case V61 of {'Idris.Prelude.Types.Just', E10} -> (fun (V63) -> begin (V64 = {'Idris.Prelude.Types.Just', V63}), (('case--case block in case block in case block in processEdit-8242'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V18, V19, V62, V23, V26, V57, V58, V63, V64, ('Idris.Idris2.Parser.Unlit':'un--isLitLine'(V63))))(V20)) end end(E10)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', {'Idris.Idris.REPL.EditError', ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'un--vsep'('erased', ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', fun (V65) -> ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'un--unsafeTextWithoutNewLines'('erased', V65)) end, ('Idris.Idris2.Data.Strings':'un--lines'(<<"Source line not found"/utf8>>))))))}} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--processEdit-7971'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11) -> case V11 of [E0 | E1] -> (fun (V12, V13) -> case V12 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V14, V15) -> case V15 of {'Idris.Builtin.MkPair', E4, E5} -> (fun (V16, V17) -> case V17 of {'Idris.Builtin.MkPair', E6, E7} -> (fun (V18, V19) -> case V18 of {'Idris.Core.Context.Hole', E8, E9} -> (fun (V20, V21) -> case V13 of [] -> fun (V22) -> begin (V23 = ('Idris.Idris2.TTImp.Interactive.MakeLemma':'un--makeLemma'(V4, V7, ('Idris.Idris2.Idris.REPLOpts':'un--replFC'()), V0, V20, V19, V22))), case V23 of {'Idris.Prelude.Types.Left', E10} -> (fun (V24) -> {'Idris.Prelude.Types.Left', V24} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V25) -> begin (V26 = [{'Idris.Builtin.MkPair', V14, {'Idris.Builtin.MkPair', V16, {'Idris.Builtin.MkPair', {'Idris.Core.Context.Hole', V20, V21}, V19}}} | []]), case V25 of {'Idris.Builtin.MkPair', E12, E13} -> (fun (V27, V28) -> begin (V29 = ('Idris.Idris2.Idris.Resugar':'un--pterm'(V7, V5, V27, V22))), case V29 of {'Idris.Prelude.Types.Left', E14} -> (fun (V30) -> {'Idris.Prelude.Types.Left', V30} end(E14)); {'Idris.Prelude.Types.Right', E15} -> (fun (V31) -> begin (V32 = ('Idris.Idris2.Idris.Resugar':'un--pterm'(V7, V5, V28, V22))), case V32 of {'Idris.Prelude.Types.Left', E16} -> (fun (V33) -> {'Idris.Prelude.Types.Left', V33} end(E16)); {'Idris.Prelude.Types.Right', E17} -> (fun (V34) -> begin (V63 = begin (V62 = (('Idris.Idris2.Erlang.Data.IORef':'un--readIORef'('erased', 'erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V35) -> fun (V36) -> fun (V37) -> fun (V38) -> fun (V39) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor__IO'('erased', 'erased', V37, V38, V39)) end end end end end, fun (V40) -> fun (V41) -> fun (V42) -> V41 end end end, fun (V43) -> fun (V44) -> fun (V45) -> fun (V46) -> fun (V47) -> begin (V48 = (V45(V47))), begin (V49 = (V46(V47))), (V48(V49)) end end end end end end end}, fun (V50) -> fun (V51) -> fun (V52) -> fun (V53) -> fun (V54) -> begin (V55 = (V52(V54))), ((V53(V55))(V54)) end end end end end end, fun (V56) -> fun (V57) -> fun (V58) -> begin (V59 = (V57(V58))), (V59(V58)) end end end end}, fun (V60) -> fun (V61) -> V61 end end}, V3))(V22))), {'Idris.Prelude.Types.Right', V62} end), case V63 of {'Idris.Prelude.Types.Left', E18} -> (fun (V64) -> {'Idris.Prelude.Types.Left', V64} end(E18)); {'Idris.Prelude.Types.Right', E19} -> (fun (V65) -> begin (V66 = ('Idris.Idris2.Idris.Syntax':'dn--un--show_Show__PTerm'(case V10 of 0 -> ('Idris.Idris2.Idris.Resugar':'un--addBracket'(('Idris.Idris2.Idris.REPLOpts':'un--replFC'()), V34)); 1 -> V34; _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), begin (V67 = ('Idris.Idris2.Idris.REPLOpts':'un--getSourceLine'(V3, V1, V22))), case V67 of {'Idris.Prelude.Types.Left', E20} -> (fun (V68) -> {'Idris.Prelude.Types.Left', V68} end(E20)); {'Idris.Prelude.Types.Right', E21} -> (fun (V69) -> begin (V70 = {'Idris.Builtin.MkPair', V27, V28}), case V69 of {'Idris.Prelude.Types.Just', E22} -> (fun (V71) -> begin (V72 = {'Idris.Prelude.Types.Just', V71}), (('case--case block in case block in case block in processEdit-8242'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V21, V14, V16, V20, V19, V26, V27, V28, V70, V31, V34, V65, V66, V71, V72, ('Idris.Idris2.Parser.Unlit':'un--isLitLine'(V71))))(V22)) end end(E22)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', {'Idris.Idris.REPL.EditError', ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'un--vsep'('erased', ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', fun (V73) -> ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'un--unsafeTextWithoutNewLines'('erased', V73)) end, ('Idris.Idris2.Data.Strings':'un--lines'(<<"Source line not found"/utf8>>))))))}} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E19)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E17)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E12, E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end; _ -> fun (V74) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.REPL.EditError', ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'un--vsep'('erased', ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', fun (V75) -> ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'un--unsafeTextWithoutNewLines'('erased', V75)) end, ('Idris.Idris2.Data.Strings':'un--lines'(<<"Can\x{27}t make lifted definition"/utf8>>))))))}} end end end(E8, E9)); _ -> fun (V76) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.REPL.EditError', ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'un--vsep'('erased', ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', fun (V77) -> ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'un--unsafeTextWithoutNewLines'('erased', V77)) end, ('Idris.Idris2.Data.Strings':'un--lines'(<<"Can\x{27}t make lifted definition"/utf8>>))))))}} end end end(E6, E7)); _ -> fun (V78) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.REPL.EditError', ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'un--vsep'('erased', ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', fun (V79) -> ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'un--unsafeTextWithoutNewLines'('erased', V79)) end, ('Idris.Idris2.Data.Strings':'un--lines'(<<"Can\x{27}t make lifted definition"/utf8>>))))))}} end end end(E4, E5)); _ -> fun (V80) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.REPL.EditError', ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'un--vsep'('erased', ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', fun (V81) -> ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'un--unsafeTextWithoutNewLines'('erased', V81)) end, ('Idris.Idris2.Data.Strings':'un--lines'(<<"Can\x{27}t make lifted definition"/utf8>>))))))}} end end end(E2, E3)); _ -> fun (V82) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.REPL.EditError', ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'un--vsep'('erased', ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', fun (V83) -> ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'un--unsafeTextWithoutNewLines'('erased', V83)) end, ('Idris.Idris2.Data.Strings':'un--lines'(<<"Can\x{27}t make lifted definition"/utf8>>))))))}} end end end(E0, E1)); _ -> fun (V84) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.REPL.EditError', ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'un--vsep'('erased', ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', fun (V85) -> ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'un--unsafeTextWithoutNewLines'('erased', V85)) end, ('Idris.Idris2.Data.Strings':'un--lines'(<<"Can\x{27}t make lifted definition"/utf8>>))))))}} end end.
'case--case block in case block in processEdit-7840'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12) -> case V12 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V13, V14) -> fun (V15) -> begin (V17 = (('Idris.Idris2.Core.Core':'un--traverse'('erased', 'erased', fun (V16) -> ('un--printClause'(V4, V2, V13, V9, V16)) end, V7))(V15))), case V17 of {'Idris.Prelude.Types.Left', E2} -> (fun (V18) -> {'Idris.Prelude.Types.Left', V18} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V19) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.REPL.DisplayEdit', ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'un--vsep'('erased', ('Idris.Idris2.Prelude.Interfaces':'un--<$>'('erased', 'erased', 'erased', fun (V20) -> fun (V21) -> fun (V22) -> fun (V23) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', V22, V23)) end end end end, fun (V24) -> ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty__String'('erased', V24)) end, V19))))}} end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in processEdit-7814'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10) -> case V10 of {'Idris.Prelude.Types.Just', E0} -> (fun (V11) -> begin (V12 = {'Idris.Prelude.Types.Just', V11}), ('case--case block in case block in processEdit-7840'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V11, V12, ('Idris.Idris2.Parser.Unlit':'un--isLitLine'(V11)))) end end(E0)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V13) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.REPL.EditError', ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'un--vsep'('erased', ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', fun (V14) -> ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'un--unsafeTextWithoutNewLines'('erased', V14)) end, ('Idris.Idris2.Data.Strings':'un--lines'(<<"Source line not found"/utf8>>))))))}} end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--processEdit-7777'(V0, V1, V2, V3, V4, V5) -> case V5 of {'Idris.Prelude.Types.Just', E0} -> (fun (V6) -> case V6 of {'Idris.Builtin.MkPair', E1, E2} -> (fun (V7, V8) -> case V8 of {'Idris.Builtin.MkPair', E3, E4} -> (fun (V9, V10) -> begin (V11 = ('Idris.Idris2.Prelude.Types':'dn--un--cast_Cast__Int_Integer'(('Idris.Idris2.Builtin':'un--snd'('erased', 'erased', ('Idris.Idris2.Core.FC':'un--startPos'(V9))))))), fun (V12) -> begin (V13 = ('Idris.Idris2.Idris.REPLOpts':'un--getSourceLine'(V0, V7, V12))), case V13 of {'Idris.Prelude.Types.Left', E5} -> (fun (V14) -> {'Idris.Prelude.Types.Left', V14} end(E5)); {'Idris.Prelude.Types.Right', E6} -> (fun (V15) -> begin (V16 = {'Idris.Prelude.Types.Just', {'Idris.Builtin.MkPair', V7, {'Idris.Builtin.MkPair', V9, V10}}}), case V15 of {'Idris.Prelude.Types.Just', E7} -> (fun (V17) -> begin (V18 = {'Idris.Prelude.Types.Just', V17}), (('case--case block in case block in processEdit-7840'(V0, V1, V2, V3, V4, V7, V9, V10, V16, V11, V17, V18, ('Idris.Idris2.Parser.Unlit':'un--isLitLine'(V17))))(V12)) end end(E7)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', {'Idris.Idris.REPL.EditError', ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'un--vsep'('erased', ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', fun (V19) -> ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'un--unsafeTextWithoutNewLines'('erased', V19)) end, ('Idris.Idris2.Data.Strings':'un--lines'(<<"Source line not found"/utf8>>))))))}} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end(E3, E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V20) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.REPL.EditError', ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'un--vsep'('erased', ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', fun (V21) -> ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'un--unsafeTextWithoutNewLines'('erased', V21)) end, ('Idris.Idris2.Data.Strings':'un--lines'(<<"No more results"/utf8>>))))))}} end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in case block in processEdit-7602'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17) -> case V17 of {'Idris.Idris.REPLOpts.MkREPLOpts', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13} -> (fun (V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31) -> {'Idris.Idris.REPLOpts.MkREPLOpts', V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, {'Idris.Prelude.Types.Just', {'Idris.Builtin.MkPair', V2, V16}}, V29, V30, V31} end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in case block in case block in case block in case block in processEdit-7356'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28) -> case V3 of 0 -> fun (V29) -> ('un--updateFile'(V4, fun (V30) -> ('un--addClause'(('Idris.Idris2.Data.Strings':'un--unlines'(V28)), ('Idris.Idris2.Prelude.Types':'dn--un--cast_Cast__Int_Integer'(V2)), V30)) end, V29)) end; 1 -> fun (V31) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.REPL.DisplayEdit', ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'un--vsep'('erased', ('Idris.Idris2.Prelude.Interfaces':'un--<$>'('erased', 'erased', 'erased', fun (V32) -> fun (V33) -> fun (V34) -> fun (V35) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', V34, V35)) end end end end, fun (V36) -> ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty__String'('erased', V36)) end, V28))))}} end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in case block in case block in case block in processEdit-7286'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26) -> case V26 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V27, V28) -> fun (V29) -> begin (V31 = (('Idris.Idris2.Core.Core':'un--traverse'('erased', 'erased', fun (V30) -> ('un--printClause'(V8, V6, V27, V23, V30)) end, V21))(V29))), case V31 of {'Idris.Prelude.Types.Left', E2} -> (fun (V32) -> {'Idris.Prelude.Types.Left', V32} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V33) -> case V3 of 0 -> ('un--updateFile'(V4, fun (V34) -> ('un--addClause'(('Idris.Idris2.Data.Strings':'un--unlines'(V33)), ('Idris.Idris2.Prelude.Types':'dn--un--cast_Cast__Int_Integer'(V2)), V34)) end, V29)); 1 -> {'Idris.Prelude.Types.Right', {'Idris.Idris.REPL.DisplayEdit', ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'un--vsep'('erased', ('Idris.Idris2.Prelude.Interfaces':'un--<$>'('erased', 'erased', 'erased', fun (V35) -> fun (V36) -> fun (V37) -> fun (V38) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', V37, V38)) end end end end, fun (V39) -> ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty__String'('erased', V39)) end, V33))))}}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in case block in case block in processEdit-7232'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24) -> case V24 of {'Idris.Prelude.Types.Just', E0} -> (fun (V25) -> begin (V26 = {'Idris.Prelude.Types.Just', V25}), ('case--case block in case block in case block in case block in processEdit-7286'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V25, V26, ('Idris.Idris2.Parser.Unlit':'un--isLitLine'(V25)))) end end(E0)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V27) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.REPL.EditError', ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'un--vsep'('erased', ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', fun (V28) -> ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'un--unsafeTextWithoutNewLines'('erased', V28)) end, ('Idris.Idris2.Data.Strings':'un--lines'(<<"Source line not found"/utf8>>))))))}} end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in case block in processEdit-7165'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19) -> case V19 of {'Idris.Prelude.Types.Just', E0} -> (fun (V20) -> case V20 of {'Idris.Builtin.MkPair', E1, E2} -> (fun (V21, V22) -> case V22 of {'Idris.Builtin.MkPair', E3, E4} -> (fun (V23, V24) -> begin (V25 = ('Idris.Idris2.Prelude.Types':'dn--un--cast_Cast__Int_Integer'(('Idris.Idris2.Builtin':'un--snd'('erased', 'erased', ('Idris.Idris2.Core.FC':'un--startPos'(V23))))))), fun (V26) -> begin (V27 = ('Idris.Idris2.Idris.REPLOpts':'un--getSourceLine'(V4, V2, V26))), case V27 of {'Idris.Prelude.Types.Left', E5} -> (fun (V28) -> {'Idris.Prelude.Types.Left', V28} end(E5)); {'Idris.Prelude.Types.Right', E6} -> (fun (V29) -> begin (V30 = {'Idris.Prelude.Types.Just', {'Idris.Builtin.MkPair', V21, {'Idris.Builtin.MkPair', V23, V24}}}), case V29 of {'Idris.Prelude.Types.Just', E7} -> (fun (V31) -> begin (V32 = {'Idris.Prelude.Types.Just', V31}), (('case--case block in case block in case block in case block in processEdit-7286'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V21, V23, V24, V30, V25, V31, V32, ('Idris.Idris2.Parser.Unlit':'un--isLitLine'(V31))))(V26)) end end(E7)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', {'Idris.Idris.REPL.EditError', ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'un--vsep'('erased', ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', fun (V33) -> ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'un--unsafeTextWithoutNewLines'('erased', V33)) end, ('Idris.Idris2.Data.Strings':'un--lines'(<<"Source line not found"/utf8>>))))))}} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end(E3, E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V34) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.REPL.EditError', ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'un--vsep'('erased', ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', fun (V35) -> ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'un--unsafeTextWithoutNewLines'('erased', V35)) end, ('Idris.Idris2.Data.Strings':'un--lines'(<<"No search results"/utf8>>))))))}} end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in processEdit-7086'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15) -> case V15 of {'Idris.Prelude.Types.Just', E0} -> (fun (V16) -> case V16 of {'Idris.Core.Context.None'} -> (fun () -> begin (V22 = fun (V17) -> ('Idris.Idris2.TTImp.Interactive.GenerateDef':'un--makeDefSort'(V8, V5, V7, fun (V18) -> fun (V19) -> ('Idris.Idris2.Core.FC':'un--onLine'(('Idris.Idris2.Prelude.Num':'dn--un---_Neg__Int'(V2, 1)), V18)) end end, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))))))))), fun (V20) -> fun (V21) -> ('Idris.Idris2.TTImp.Interactive.GenerateDef':'un--mostUsed'(V20, V21)) end end, V13, V17)) end), fun (V23) -> begin (V52 = begin (V51 = (('Idris.Idris2.Erlang.Data.IORef':'un--readIORef'('erased', 'erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V24) -> fun (V25) -> fun (V26) -> fun (V27) -> fun (V28) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor__IO'('erased', 'erased', V26, V27, V28)) end end end end end, fun (V29) -> fun (V30) -> fun (V31) -> V30 end end end, fun (V32) -> fun (V33) -> fun (V34) -> fun (V35) -> fun (V36) -> begin (V37 = (V34(V36))), begin (V38 = (V35(V36))), (V37(V38)) end end end end end end end}, fun (V39) -> fun (V40) -> fun (V41) -> fun (V42) -> fun (V43) -> begin (V44 = (V41(V43))), ((V42(V44))(V43)) end end end end end end, fun (V45) -> fun (V46) -> fun (V47) -> begin (V48 = (V46(V47))), (V48(V47)) end end end end}, fun (V49) -> fun (V50) -> V50 end end}, V4))(V23))), {'Idris.Prelude.Types.Right', V51} end), case V52 of {'Idris.Prelude.Types.Left', E1} -> (fun (V53) -> {'Idris.Prelude.Types.Left', V53} end(E1)); {'Idris.Prelude.Types.Right', E2} -> (fun (V54) -> begin (V97 = begin (V96 = (('Idris.Idris2.Erlang.Data.IORef':'un--writeIORef'('erased', 'erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V55) -> fun (V56) -> fun (V57) -> fun (V58) -> fun (V59) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor__IO'('erased', 'erased', V57, V58, V59)) end end end end end, fun (V60) -> fun (V61) -> fun (V62) -> V61 end end end, fun (V63) -> fun (V64) -> fun (V65) -> fun (V66) -> fun (V67) -> begin (V68 = (V65(V67))), begin (V69 = (V66(V67))), (V68(V69)) end end end end end end end}, fun (V70) -> fun (V71) -> fun (V72) -> fun (V73) -> fun (V74) -> begin (V75 = (V72(V74))), ((V73(V75))(V74)) end end end end end end, fun (V76) -> fun (V77) -> fun (V78) -> begin (V79 = (V77(V78))), (V79(V78)) end end end end}, fun (V80) -> fun (V81) -> V81 end end}, V4, case V54 of {'Idris.Idris.REPLOpts.MkREPLOpts', E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16} -> (fun (V82, V83, V84, V85, V86, V87, V88, V89, V90, V91, V92, V93, V94, V95) -> {'Idris.Idris.REPLOpts.MkREPLOpts', V82, V83, V84, V85, V86, V87, V88, V89, V90, V91, {'Idris.Prelude.Types.Just', {'Idris.Builtin.MkPair', V2, V22}}, V93, V94, V95} end(E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V23))), {'Idris.Prelude.Types.Right', V96} end), case V97 of {'Idris.Prelude.Types.Left', E17} -> (fun (V98) -> {'Idris.Prelude.Types.Left', V98} end(E17)); {'Idris.Prelude.Types.Right', E18} -> (fun (V99) -> begin (V100 = ('un--nextGenDef'(V8, V7, V4, V0, V23))), case V100 of {'Idris.Prelude.Types.Left', E19} -> (fun (V101) -> {'Idris.Prelude.Types.Left', V101} end(E19)); {'Idris.Prelude.Types.Right', E20} -> (fun (V102) -> begin (V103 = {'Idris.Prelude.Types.Just', {'Idris.Core.Context.None'}}), case V102 of {'Idris.Prelude.Types.Just', E21} -> (fun (V104) -> case V104 of {'Idris.Builtin.MkPair', E22, E23} -> (fun (V105, V106) -> case V106 of {'Idris.Builtin.MkPair', E24, E25} -> (fun (V107, V108) -> begin (V109 = ('Idris.Idris2.Prelude.Types':'dn--un--cast_Cast__Int_Integer'(('Idris.Idris2.Builtin':'un--snd'('erased', 'erased', ('Idris.Idris2.Core.FC':'un--startPos'(V107))))))), begin (V110 = ('Idris.Idris2.Idris.REPLOpts':'un--getSourceLine'(V4, V2, V23))), case V110 of {'Idris.Prelude.Types.Left', E26} -> (fun (V111) -> {'Idris.Prelude.Types.Left', V111} end(E26)); {'Idris.Prelude.Types.Right', E27} -> (fun (V112) -> begin (V113 = {'Idris.Prelude.Types.Just', {'Idris.Builtin.MkPair', V105, {'Idris.Builtin.MkPair', V107, V108}}}), case V112 of {'Idris.Prelude.Types.Just', E28} -> (fun (V114) -> begin (V115 = {'Idris.Prelude.Types.Just', V114}), (('case--case block in case block in case block in case block in processEdit-7286'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V103, V22, V54, V99, V105, V107, V108, V113, V109, V114, V115, ('Idris.Idris2.Parser.Unlit':'un--isLitLine'(V114))))(V23)) end end(E28)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', {'Idris.Idris.REPL.EditError', ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'un--vsep'('erased', ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', fun (V116) -> ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'un--unsafeTextWithoutNewLines'('erased', V116)) end, ('Idris.Idris2.Data.Strings':'un--lines'(<<"Source line not found"/utf8>>))))))}} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E27)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E24, E25)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E22, E23)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E21)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', {'Idris.Idris.REPL.EditError', ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'un--vsep'('erased', ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', fun (V117) -> ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'un--unsafeTextWithoutNewLines'('erased', V117)) end, ('Idris.Idris2.Data.Strings':'un--lines'(<<"No search results"/utf8>>))))))}} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E20)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E18)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end()); _ -> fun (V118) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.REPL.EditError', ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'un--vsep'('erased', ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', fun (V119) -> ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'un--unsafeTextWithoutNewLines'('erased', V119)) end, ('Idris.Idris2.Data.Strings':'un--lines'(<<"Already defined"/utf8>>))))))}} end end end(E0)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V120) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.REPL.EditError', ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'('erased', ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--fromString_FromString__(Doc $ann)'('erased', <<"Can\x{27}t find declaration for"/utf8>>)), ('Idris.Idris2.Core.Name':'dn--un--pretty_Pretty__Name'('erased', V1))))}} end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--processEdit-7037'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10) -> case V10 of {'Idris.Prelude.Types.Just', E0} -> (fun (V11) -> case V11 of {'Idris.Builtin.MkPair', E1, E2} -> (fun (V12, V13) -> case V13 of {'Idris.Builtin.MkPair', E3, E4} -> (fun (V14, V15) -> case V15 of {'Idris.Builtin.MkPair', E5, E6} -> (fun (V16, V17) -> fun (V18) -> begin (V45 = ('Idris.Idris2.Core.Context':'un--lookupDefExact'(V14, case V9 of {'Idris.Core.Context.MkDefs', E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32} -> (fun (V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44) -> V19 end(E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V18))), case V45 of {'Idris.Prelude.Types.Left', E33} -> (fun (V46) -> {'Idris.Prelude.Types.Left', V46} end(E33)); {'Idris.Prelude.Types.Right', E34} -> (fun (V47) -> begin (V48 = {'Idris.Prelude.Types.Just', {'Idris.Builtin.MkPair', V12, {'Idris.Builtin.MkPair', V14, {'Idris.Builtin.MkPair', V16, V17}}}}), case V47 of {'Idris.Prelude.Types.Just', E35} -> (fun (V49) -> case V49 of {'Idris.Core.Context.None'} -> (fun () -> begin (V55 = fun (V50) -> ('Idris.Idris2.TTImp.Interactive.GenerateDef':'un--makeDefSort'(V8, V5, V7, fun (V51) -> fun (V52) -> ('Idris.Idris2.Core.FC':'un--onLine'(('Idris.Idris2.Prelude.Num':'dn--un---_Neg__Int'(V2, 1)), V51)) end end, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))))))))), fun (V53) -> fun (V54) -> ('Idris.Idris2.TTImp.Interactive.GenerateDef':'un--mostUsed'(V53, V54)) end end, V14, V50)) end), begin (V84 = begin (V83 = (('Idris.Idris2.Erlang.Data.IORef':'un--readIORef'('erased', 'erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V56) -> fun (V57) -> fun (V58) -> fun (V59) -> fun (V60) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor__IO'('erased', 'erased', V58, V59, V60)) end end end end end, fun (V61) -> fun (V62) -> fun (V63) -> V62 end end end, fun (V64) -> fun (V65) -> fun (V66) -> fun (V67) -> fun (V68) -> begin (V69 = (V66(V68))), begin (V70 = (V67(V68))), (V69(V70)) end end end end end end end}, fun (V71) -> fun (V72) -> fun (V73) -> fun (V74) -> fun (V75) -> begin (V76 = (V73(V75))), ((V74(V76))(V75)) end end end end end end, fun (V77) -> fun (V78) -> fun (V79) -> begin (V80 = (V78(V79))), (V80(V79)) end end end end}, fun (V81) -> fun (V82) -> V82 end end}, V4))(V18))), {'Idris.Prelude.Types.Right', V83} end), case V84 of {'Idris.Prelude.Types.Left', E36} -> (fun (V85) -> {'Idris.Prelude.Types.Left', V85} end(E36)); {'Idris.Prelude.Types.Right', E37} -> (fun (V86) -> begin (V129 = begin (V128 = (('Idris.Idris2.Erlang.Data.IORef':'un--writeIORef'('erased', 'erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V87) -> fun (V88) -> fun (V89) -> fun (V90) -> fun (V91) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor__IO'('erased', 'erased', V89, V90, V91)) end end end end end, fun (V92) -> fun (V93) -> fun (V94) -> V93 end end end, fun (V95) -> fun (V96) -> fun (V97) -> fun (V98) -> fun (V99) -> begin (V100 = (V97(V99))), begin (V101 = (V98(V99))), (V100(V101)) end end end end end end end}, fun (V102) -> fun (V103) -> fun (V104) -> fun (V105) -> fun (V106) -> begin (V107 = (V104(V106))), ((V105(V107))(V106)) end end end end end end, fun (V108) -> fun (V109) -> fun (V110) -> begin (V111 = (V109(V110))), (V111(V110)) end end end end}, fun (V112) -> fun (V113) -> V113 end end}, V4, case V86 of {'Idris.Idris.REPLOpts.MkREPLOpts', E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51} -> (fun (V114, V115, V116, V117, V118, V119, V120, V121, V122, V123, V124, V125, V126, V127) -> {'Idris.Idris.REPLOpts.MkREPLOpts', V114, V115, V116, V117, V118, V119, V120, V121, V122, V123, {'Idris.Prelude.Types.Just', {'Idris.Builtin.MkPair', V2, V55}}, V125, V126, V127} end(E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V18))), {'Idris.Prelude.Types.Right', V128} end), case V129 of {'Idris.Prelude.Types.Left', E52} -> (fun (V130) -> {'Idris.Prelude.Types.Left', V130} end(E52)); {'Idris.Prelude.Types.Right', E53} -> (fun (V131) -> begin (V132 = ('un--nextGenDef'(V8, V7, V4, V0, V18))), case V132 of {'Idris.Prelude.Types.Left', E54} -> (fun (V133) -> {'Idris.Prelude.Types.Left', V133} end(E54)); {'Idris.Prelude.Types.Right', E55} -> (fun (V134) -> begin (V135 = {'Idris.Prelude.Types.Just', {'Idris.Core.Context.None'}}), case V134 of {'Idris.Prelude.Types.Just', E56} -> (fun (V136) -> case V136 of {'Idris.Builtin.MkPair', E57, E58} -> (fun (V137, V138) -> case V138 of {'Idris.Builtin.MkPair', E59, E60} -> (fun (V139, V140) -> begin (V141 = ('Idris.Idris2.Prelude.Types':'dn--un--cast_Cast__Int_Integer'(('Idris.Idris2.Builtin':'un--snd'('erased', 'erased', ('Idris.Idris2.Core.FC':'un--startPos'(V139))))))), begin (V142 = ('Idris.Idris2.Idris.REPLOpts':'un--getSourceLine'(V4, V2, V18))), case V142 of {'Idris.Prelude.Types.Left', E61} -> (fun (V143) -> {'Idris.Prelude.Types.Left', V143} end(E61)); {'Idris.Prelude.Types.Right', E62} -> (fun (V144) -> begin (V145 = {'Idris.Prelude.Types.Just', {'Idris.Builtin.MkPair', V137, {'Idris.Builtin.MkPair', V139, V140}}}), case V144 of {'Idris.Prelude.Types.Just', E63} -> (fun (V146) -> begin (V147 = {'Idris.Prelude.Types.Just', V146}), (('case--case block in case block in case block in case block in processEdit-7286'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V17, V16, V12, V14, V48, V135, V55, V86, V131, V137, V139, V140, V145, V141, V146, V147, ('Idris.Idris2.Parser.Unlit':'un--isLitLine'(V146))))(V18)) end end(E63)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', {'Idris.Idris.REPL.EditError', ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'un--vsep'('erased', ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', fun (V148) -> ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'un--unsafeTextWithoutNewLines'('erased', V148)) end, ('Idris.Idris2.Data.Strings':'un--lines'(<<"Source line not found"/utf8>>))))))}} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E62)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E59, E60)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E57, E58)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E56)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', {'Idris.Idris.REPL.EditError', ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'un--vsep'('erased', ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', fun (V149) -> ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'un--unsafeTextWithoutNewLines'('erased', V149)) end, ('Idris.Idris2.Data.Strings':'un--lines'(<<"No search results"/utf8>>))))))}} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E55)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E53)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E37)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end()); _ -> {'Idris.Prelude.Types.Right', {'Idris.Idris.REPL.EditError', ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'un--vsep'('erased', ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', fun (V150) -> ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'un--unsafeTextWithoutNewLines'('erased', V150)) end, ('Idris.Idris2.Data.Strings':'un--lines'(<<"Already defined"/utf8>>))))))}} end end(E35)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', {'Idris.Idris.REPL.EditError', ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'('erased', ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--fromString_FromString__(Doc $ann)'('erased', <<"Can\x{27}t find declaration for"/utf8>>)), ('Idris.Idris2.Core.Name':'dn--un--pretty_Pretty__Name'('erased', V1))))}} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E34)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E5, E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E3, E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V151) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.REPL.EditError', ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'('erased', ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--fromString_FromString__(Doc $ann)'('erased', <<"Can\x{27}t find declaration for"/utf8>>)), ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'('erased', ('Idris.Idris2.Core.Name':'dn--un--pretty_Pretty__Name'('erased', V1)), ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'('erased', ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--fromString_FromString__(Doc $ann)'('erased', <<"on line"/utf8>>)), ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty__Int'('erased', V2))))))))}} end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in case block in processEdit-6892'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17) -> case V15 of 0 -> ('Idris.Idris2.Idris.Resugar':'un--addBracket'(('Idris.Idris2.Idris.REPLOpts':'un--replFC'()), V17)); 1 -> V17; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in processEdit-6838'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10) -> case V10 of [E0 | E1] -> (fun (V11, V12) -> case V11 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V13, V14) -> case V14 of {'Idris.Builtin.MkPair', E4, E5} -> (fun (V15, V16) -> case V16 of {'Idris.Core.Context.Hole', E6, E7} -> (fun (V17, V18) -> case V12 of [] -> begin (V30 = ('Idris.Idris2.Data.List':'un--elemBy'('erased', fun (V19) -> fun (V20) -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq__Name'(('Idris.Idris2.Core.Name':'un--dropNS'(V19)), ('Idris.Idris2.Core.Name':'un--dropNS'(V20)))) end end, V7, case V6 of {'Idris.Idris.Syntax.MkSyntax', E8, E9, E10, E11, E12, E13, E14, E15, E16} -> (fun (V21, V22, V23, V24, V25, V26, V27, V28, V29) -> V27 end(E8, E9, E10, E11, E12, E13, E14, E15, E16)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), begin (V31 = ('un--dropLams'(V17, V8))), fun (V32) -> begin (V33 = ('Idris.Idris2.Idris.Resugar':'un--pterm'(V4, V2, V31, V32))), case V33 of {'Idris.Prelude.Types.Left', E17} -> (fun (V34) -> {'Idris.Prelude.Types.Left', V34} end(E17)); {'Idris.Prelude.Types.Right', E18} -> (fun (V35) -> begin (V36 = case V30 of 0 -> ('Idris.Idris2.Idris.Resugar':'un--addBracket'(('Idris.Idris2.Idris.REPLOpts':'un--replFC'()), V35)); 1 -> V35; _ -> ('erlang':'throw'("Error: Unreachable branch")) end), {'Idris.Prelude.Types.Right', {'Idris.Idris.REPL.DisplayEdit', ('Idris.Idris2.Idris.Pretty':'un--prettyTerm'(V36))}} end end(E18)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end; _ -> fun (V37) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.REPL.EditError', ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'un--vsep'('erased', ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', fun (V38) -> ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'un--unsafeTextWithoutNewLines'('erased', V38)) end, ('Idris.Idris2.Data.Strings':'un--lines'(<<"Not a searchable hole"/utf8>>))))))}} end end end(E6, E7)); _ -> fun (V39) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.REPL.EditError', ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'un--vsep'('erased', ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', fun (V40) -> ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'un--unsafeTextWithoutNewLines'('erased', V40)) end, ('Idris.Idris2.Data.Strings':'un--lines'(<<"Not a searchable hole"/utf8>>))))))}} end end end(E4, E5)); _ -> fun (V41) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.REPL.EditError', ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'un--vsep'('erased', ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', fun (V42) -> ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'un--unsafeTextWithoutNewLines'('erased', V42)) end, ('Idris.Idris2.Data.Strings':'un--lines'(<<"Not a searchable hole"/utf8>>))))))}} end end end(E2, E3)); _ -> fun (V43) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.REPL.EditError', ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'un--vsep'('erased', ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', fun (V44) -> ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'un--unsafeTextWithoutNewLines'('erased', V44)) end, ('Idris.Idris2.Data.Strings':'un--lines'(<<"Not a searchable hole"/utf8>>))))))}} end end end(E0, E1)); _ -> fun (V45) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.REPL.EditError', ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'un--vsep'('erased', ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', fun (V46) -> ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'un--unsafeTextWithoutNewLines'('erased', V46)) end, ('Idris.Idris2.Data.Strings':'un--lines'(<<"Not a searchable hole"/utf8>>))))))}} end end.
'case--processEdit-6808'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V7 of {'Idris.Prelude.Types.Just', E0} -> (fun (V8) -> case V8 of {'Idris.Builtin.MkPair', E1, E2} -> (fun (V9, V10) -> fun (V11) -> begin (V38 = ('Idris.Idris2.Core.Context':'un--lookupDefName'(V9, case V5 of {'Idris.Core.Context.MkDefs', E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28} -> (fun (V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37) -> V12 end(E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V11))), case V38 of {'Idris.Prelude.Types.Left', E29} -> (fun (V39) -> {'Idris.Prelude.Types.Left', V39} end(E29)); {'Idris.Prelude.Types.Right', E30} -> (fun (V40) -> case V40 of [E31 | E32] -> (fun (V41, V42) -> case V41 of {'Idris.Builtin.MkPair', E33, E34} -> (fun (V43, V44) -> case V44 of {'Idris.Builtin.MkPair', E35, E36} -> (fun (V45, V46) -> case V46 of {'Idris.Core.Context.Hole', E37, E38} -> (fun (V47, V48) -> case V42 of [] -> begin (V60 = ('Idris.Idris2.Data.List':'un--elemBy'('erased', fun (V49) -> fun (V50) -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq__Name'(('Idris.Idris2.Core.Name':'un--dropNS'(V49)), ('Idris.Idris2.Core.Name':'un--dropNS'(V50)))) end end, V9, case V6 of {'Idris.Idris.Syntax.MkSyntax', E39, E40, E41, E42, E43, E44, E45, E46, E47} -> (fun (V51, V52, V53, V54, V55, V56, V57, V58, V59) -> V57 end(E39, E40, E41, E42, E43, E44, E45, E46, E47)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), begin (V61 = ('un--dropLams'(V47, V10))), begin (V62 = ('Idris.Idris2.Idris.Resugar':'un--pterm'(V4, V2, V61, V11))), case V62 of {'Idris.Prelude.Types.Left', E48} -> (fun (V63) -> {'Idris.Prelude.Types.Left', V63} end(E48)); {'Idris.Prelude.Types.Right', E49} -> (fun (V64) -> begin (V65 = case V60 of 0 -> ('Idris.Idris2.Idris.Resugar':'un--addBracket'(('Idris.Idris2.Idris.REPLOpts':'un--replFC'()), V64)); 1 -> V64; _ -> ('erlang':'throw'("Error: Unreachable branch")) end), {'Idris.Prelude.Types.Right', {'Idris.Idris.REPL.DisplayEdit', ('Idris.Idris2.Idris.Pretty':'un--prettyTerm'(V65))}} end end(E49)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end; _ -> {'Idris.Prelude.Types.Right', {'Idris.Idris.REPL.EditError', ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'un--vsep'('erased', ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', fun (V66) -> ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'un--unsafeTextWithoutNewLines'('erased', V66)) end, ('Idris.Idris2.Data.Strings':'un--lines'(<<"Not a searchable hole"/utf8>>))))))}} end end(E37, E38)); _ -> {'Idris.Prelude.Types.Right', {'Idris.Idris.REPL.EditError', ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'un--vsep'('erased', ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', fun (V67) -> ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'un--unsafeTextWithoutNewLines'('erased', V67)) end, ('Idris.Idris2.Data.Strings':'un--lines'(<<"Not a searchable hole"/utf8>>))))))}} end end(E35, E36)); _ -> {'Idris.Prelude.Types.Right', {'Idris.Idris.REPL.EditError', ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'un--vsep'('erased', ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', fun (V68) -> ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'un--unsafeTextWithoutNewLines'('erased', V68)) end, ('Idris.Idris2.Data.Strings':'un--lines'(<<"Not a searchable hole"/utf8>>))))))}} end end(E33, E34)); _ -> {'Idris.Prelude.Types.Right', {'Idris.Idris.REPL.EditError', ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'un--vsep'('erased', ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', fun (V69) -> ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'un--unsafeTextWithoutNewLines'('erased', V69)) end, ('Idris.Idris2.Data.Strings':'un--lines'(<<"Not a searchable hole"/utf8>>))))))}} end end(E31, E32)); _ -> {'Idris.Prelude.Types.Right', {'Idris.Idris.REPL.EditError', ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'un--vsep'('erased', ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', fun (V70) -> ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'un--unsafeTextWithoutNewLines'('erased', V70)) end, ('Idris.Idris2.Data.Strings':'un--lines'(<<"Not a searchable hole"/utf8>>))))))}} end end(E30)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V71) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.REPL.EditError', ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'un--vsep'('erased', ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', fun (V72) -> ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'un--unsafeTextWithoutNewLines'('erased', V72)) end, ('Idris.Idris2.Data.Strings':'un--lines'(<<"No more results"/utf8>>))))))}} end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in case block in case block in processEdit-6597'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25) -> case V3 of 0 -> fun (V26) -> ('un--updateFile'(V4, fun (V27) -> ('un--proofSearch'(V1, ('Idris.Idris2.Idris.Syntax':'dn--un--show_Show__PTerm'(V25)), ('Idris.Idris2.Prelude.Types':'dn--un--cast_Cast__Int_Integer'(('Idris.Idris2.Prelude.Num':'dn--un---_Neg__Int'(V2, 1)))), V27)) end, V26)) end; 1 -> fun (V28) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.REPL.DisplayEdit', ('Idris.Idris2.Idris.Pretty':'un--prettyTerm'(V25))}} end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in case block in case block in processEdit-6498'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24) -> case V11 of 0 -> ('Idris.Idris2.Idris.Resugar':'un--addBracket'(('Idris.Idris2.Idris.REPLOpts':'un--replFC'()), V24)); 1 -> V24; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in case block in processEdit-6435'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21) -> case V21 of {'Idris.Builtin.DPair.MkDPair', E0, E1} -> (fun (V22, V23) -> case V23 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V24, V25) -> fun (V26) -> begin (V27 = ('Idris.Idris2.Idris.Resugar':'un--resugar'(V22, V8, V6, V24, V25, V26))), case V27 of {'Idris.Prelude.Types.Left', E4} -> (fun (V28) -> {'Idris.Prelude.Types.Left', V28} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V29) -> begin (V30 = case V11 of 0 -> ('Idris.Idris2.Idris.Resugar':'un--addBracket'(('Idris.Idris2.Idris.REPLOpts':'un--replFC'()), V29)); 1 -> V29; _ -> ('erlang':'throw'("Error: Unreachable branch")) end), case V3 of 0 -> ('un--updateFile'(V4, fun (V31) -> ('un--proofSearch'(V1, ('Idris.Idris2.Idris.Syntax':'dn--un--show_Show__PTerm'(V30)), ('Idris.Idris2.Prelude.Types':'dn--un--cast_Cast__Int_Integer'(('Idris.Idris2.Prelude.Num':'dn--un---_Neg__Int'(V2, 1)))), V31)) end, V26)); 1 -> {'Idris.Prelude.Types.Right', {'Idris.Idris.REPL.DisplayEdit', ('Idris.Idris2.Idris.Pretty':'un--prettyTerm'(V30))}}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in processEdit-6340'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20) -> case V20 of {'Idris.Core.Context.NotHole'} -> (fun () -> fun (V21) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.REPL.EditError', ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'un--vsep'('erased', ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', fun (V22) -> ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'un--unsafeTextWithoutNewLines'('erased', V22)) end, ('Idris.Idris2.Data.Strings':'un--lines'(<<"Not a searchable hole"/utf8>>))))))}} end end()); {'Idris.Core.Context.SolvedHole', E0} -> (fun (V23) -> ('case--case block in case block in processEdit-6435'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V23, ('un--dropLamsTm'([], V23, {'Idris.Core.Env.Nil'}, V17)))) end(E0)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in processEdit-6249'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18) -> case V18 of {'Idris.Idris.REPLOpts.MkREPLOpts', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13} -> (fun (V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32) -> {'Idris.Idris.REPLOpts.MkREPLOpts', V19, V20, V21, V22, V23, V24, V25, V26, V27, {'Idris.Prelude.Types.Just', {'Idris.Builtin.MkPair', V1, V17}}, V29, V30, V31, V32} end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in case block in processEdit-6063'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26) -> case V3 of 0 -> fun (V27) -> ('un--updateFile'(V4, fun (V28) -> ('un--proofSearch'(V1, ('Idris.Idris2.Idris.Syntax':'dn--un--show_Show__PTerm'(V26)), ('Idris.Idris2.Prelude.Types':'dn--un--cast_Cast__Int_Integer'(('Idris.Idris2.Prelude.Num':'dn--un---_Neg__Int'(V2, 1)))), V28)) end, V27)) end; 1 -> fun (V29) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.REPL.DisplayEdit', ('Idris.Idris2.Idris.Pretty':'un--prettyTerm'(V26))}} end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in case block in processEdit-5960'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25) -> case V11 of 0 -> ('Idris.Idris2.Idris.Resugar':'un--addBracket'(('Idris.Idris2.Idris.REPLOpts':'un--replFC'()), V25)); 1 -> V25; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in processEdit-5900'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21) -> case V21 of {'Idris.Prelude.Types.Just', E0} -> (fun (V22) -> case V22 of {'Idris.Builtin.MkPair', E1, E2} -> (fun (V23, V24) -> begin (V25 = ('un--dropLams'(V15, V24))), fun (V26) -> begin (V27 = ('Idris.Idris2.Idris.Resugar':'un--pterm'(V8, V6, V25, V26))), case V27 of {'Idris.Prelude.Types.Left', E3} -> (fun (V28) -> {'Idris.Prelude.Types.Left', V28} end(E3)); {'Idris.Prelude.Types.Right', E4} -> (fun (V29) -> begin (V30 = case V11 of 0 -> ('Idris.Idris2.Idris.Resugar':'un--addBracket'(('Idris.Idris2.Idris.REPLOpts':'un--replFC'()), V29)); 1 -> V29; _ -> ('erlang':'throw'("Error: Unreachable branch")) end), case V3 of 0 -> ('un--updateFile'(V4, fun (V31) -> ('un--proofSearch'(V1, ('Idris.Idris2.Idris.Syntax':'dn--un--show_Show__PTerm'(V30)), ('Idris.Idris2.Prelude.Types':'dn--un--cast_Cast__Int_Integer'(('Idris.Idris2.Prelude.Num':'dn--un---_Neg__Int'(V2, 1)))), V31)) end, V26)); 1 -> {'Idris.Prelude.Types.Right', {'Idris.Idris.REPL.DisplayEdit', ('Idris.Idris2.Idris.Pretty':'un--prettyTerm'(V30))}}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end(E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V32) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.REPL.EditError', ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'un--vsep'('erased', ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', fun (V33) -> ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'un--unsafeTextWithoutNewLines'('erased', V33)) end, ('Idris.Idris2.Data.Strings':'un--lines'(<<"No search results"/utf8>>))))))}} end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--processEdit-5816'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12) -> case V12 of [E0 | E1] -> (fun (V13, V14) -> case V13 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V15, V16) -> case V16 of {'Idris.Builtin.MkPair', E4, E5} -> (fun (V17, V18) -> case V18 of {'Idris.Core.Context.Hole', E6, E7} -> (fun (V19, V20) -> case V14 of [] -> begin (V22 = fun (V21) -> ('Idris.Idris2.TTImp.Interactive.ExprSearch':'un--exprSearch'(V8, V5, V7, ('Idris.Idris2.Idris.REPLOpts':'un--replFC'()), V1, [], V21)) end), fun (V23) -> begin (V52 = begin (V51 = (('Idris.Idris2.Erlang.Data.IORef':'un--readIORef'('erased', 'erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V24) -> fun (V25) -> fun (V26) -> fun (V27) -> fun (V28) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor__IO'('erased', 'erased', V26, V27, V28)) end end end end end, fun (V29) -> fun (V30) -> fun (V31) -> V30 end end end, fun (V32) -> fun (V33) -> fun (V34) -> fun (V35) -> fun (V36) -> begin (V37 = (V34(V36))), begin (V38 = (V35(V36))), (V37(V38)) end end end end end end end}, fun (V39) -> fun (V40) -> fun (V41) -> fun (V42) -> fun (V43) -> begin (V44 = (V41(V43))), ((V42(V44))(V43)) end end end end end end, fun (V45) -> fun (V46) -> fun (V47) -> begin (V48 = (V46(V47))), (V48(V47)) end end end end}, fun (V49) -> fun (V50) -> V50 end end}, V4))(V23))), {'Idris.Prelude.Types.Right', V51} end), case V52 of {'Idris.Prelude.Types.Left', E8} -> (fun (V53) -> {'Idris.Prelude.Types.Left', V53} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V54) -> begin (V97 = begin (V96 = (('Idris.Idris2.Erlang.Data.IORef':'un--writeIORef'('erased', 'erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V55) -> fun (V56) -> fun (V57) -> fun (V58) -> fun (V59) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor__IO'('erased', 'erased', V57, V58, V59)) end end end end end, fun (V60) -> fun (V61) -> fun (V62) -> V61 end end end, fun (V63) -> fun (V64) -> fun (V65) -> fun (V66) -> fun (V67) -> begin (V68 = (V65(V67))), begin (V69 = (V66(V67))), (V68(V69)) end end end end end end end}, fun (V70) -> fun (V71) -> fun (V72) -> fun (V73) -> fun (V74) -> begin (V75 = (V72(V74))), ((V73(V75))(V74)) end end end end end end, fun (V76) -> fun (V77) -> fun (V78) -> begin (V79 = (V77(V78))), (V79(V78)) end end end end}, fun (V80) -> fun (V81) -> V81 end end}, V4, case V54 of {'Idris.Idris.REPLOpts.MkREPLOpts', E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23} -> (fun (V82, V83, V84, V85, V86, V87, V88, V89, V90, V91, V92, V93, V94, V95) -> {'Idris.Idris.REPLOpts.MkREPLOpts', V82, V83, V84, V85, V86, V87, V88, V89, V90, {'Idris.Prelude.Types.Just', {'Idris.Builtin.MkPair', V1, V22}}, V92, V93, V94, V95} end(E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V23))), {'Idris.Prelude.Types.Right', V96} end), case V97 of {'Idris.Prelude.Types.Left', E24} -> (fun (V98) -> {'Idris.Prelude.Types.Left', V98} end(E24)); {'Idris.Prelude.Types.Right', E25} -> (fun (V99) -> begin (V128 = begin (V127 = (('Idris.Idris2.Erlang.Data.IORef':'un--readIORef'('erased', 'erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V100) -> fun (V101) -> fun (V102) -> fun (V103) -> fun (V104) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor__IO'('erased', 'erased', V102, V103, V104)) end end end end end, fun (V105) -> fun (V106) -> fun (V107) -> V106 end end end, fun (V108) -> fun (V109) -> fun (V110) -> fun (V111) -> fun (V112) -> begin (V113 = (V110(V112))), begin (V114 = (V111(V112))), (V113(V114)) end end end end end end end}, fun (V115) -> fun (V116) -> fun (V117) -> fun (V118) -> fun (V119) -> begin (V120 = (V117(V119))), ((V118(V120))(V119)) end end end end end end, fun (V121) -> fun (V122) -> fun (V123) -> begin (V124 = (V122(V123))), (V124(V123)) end end end end}, fun (V125) -> fun (V126) -> V126 end end}, V8))(V23))), {'Idris.Prelude.Types.Right', V127} end), case V128 of {'Idris.Prelude.Types.Left', E26} -> (fun (V129) -> {'Idris.Prelude.Types.Left', V129} end(E26)); {'Idris.Prelude.Types.Right', E27} -> (fun (V130) -> begin (V131 = ('un--nextProofSearch'(V8, V7, V4, V23))), case V131 of {'Idris.Prelude.Types.Left', E28} -> (fun (V132) -> {'Idris.Prelude.Types.Left', V132} end(E28)); {'Idris.Prelude.Types.Right', E29} -> (fun (V133) -> case V133 of {'Idris.Prelude.Types.Just', E30} -> (fun (V134) -> case V134 of {'Idris.Builtin.MkPair', E31, E32} -> (fun (V135, V136) -> begin (V137 = ('un--dropLams'(V19, V136))), begin (V138 = ('Idris.Idris2.Idris.Resugar':'un--pterm'(V8, V6, V137, V23))), case V138 of {'Idris.Prelude.Types.Left', E33} -> (fun (V139) -> {'Idris.Prelude.Types.Left', V139} end(E33)); {'Idris.Prelude.Types.Right', E34} -> (fun (V140) -> begin (V141 = case V11 of 0 -> ('Idris.Idris2.Idris.Resugar':'un--addBracket'(('Idris.Idris2.Idris.REPLOpts':'un--replFC'()), V140)); 1 -> V140; _ -> ('erlang':'throw'("Error: Unreachable branch")) end), case V3 of 0 -> ('un--updateFile'(V4, fun (V142) -> ('un--proofSearch'(V1, ('Idris.Idris2.Idris.Syntax':'dn--un--show_Show__PTerm'(V141)), ('Idris.Idris2.Prelude.Types':'dn--un--cast_Cast__Int_Integer'(('Idris.Idris2.Prelude.Num':'dn--un---_Neg__Int'(V2, 1)))), V142)) end, V23)); 1 -> {'Idris.Prelude.Types.Right', {'Idris.Idris.REPL.DisplayEdit', ('Idris.Idris2.Idris.Pretty':'un--prettyTerm'(V141))}}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E34)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E31, E32)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E30)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', {'Idris.Idris.REPL.EditError', ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'un--vsep'('erased', ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', fun (V143) -> ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'un--unsafeTextWithoutNewLines'('erased', V143)) end, ('Idris.Idris2.Data.Strings':'un--lines'(<<"No search results"/utf8>>))))))}} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E27)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E25)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end; _ -> fun (V144) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.REPL.EditError', ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'un--vsep'('erased', ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', fun (V145) -> ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'un--unsafeTextWithoutNewLines'('erased', V145)) end, ('Idris.Idris2.Data.Strings':'un--lines'(<<"Not a searchable hole"/utf8>>))))))}} end end end(E6, E7)); {'Idris.Core.Context.PMDef', E35, E36, E37, E38, E39} -> (fun (V146, V147, V148, V149, V150) -> case V147 of [] -> case V148 of {'Idris.Core.CaseTree.STerm', E40, E41} -> (fun (V151, V152) -> case V14 of [] -> begin (V153 = [{'Idris.Builtin.MkPair', V15, {'Idris.Builtin.MkPair', V17, {'Idris.Core.Context.PMDef', V146, [], {'Idris.Core.CaseTree.STerm', V151, V152}, V149, V150}}} | []]), ('case--case block in processEdit-6340'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V149, V150, V151, V15, V17, V152, V146, V153, case V146 of {'Idris.Core.Context.MkPMDefInfo', E42, E43} -> (fun (V154, V155) -> V154 end(E42, E43)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)) end; _ -> fun (V156) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.REPL.EditError', ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'un--vsep'('erased', ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', fun (V157) -> ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'un--unsafeTextWithoutNewLines'('erased', V157)) end, ('Idris.Idris2.Data.Strings':'un--lines'(<<"Not a searchable hole"/utf8>>))))))}} end end end(E40, E41)); _ -> fun (V158) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.REPL.EditError', ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'un--vsep'('erased', ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', fun (V159) -> ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'un--unsafeTextWithoutNewLines'('erased', V159)) end, ('Idris.Idris2.Data.Strings':'un--lines'(<<"Not a searchable hole"/utf8>>))))))}} end end; _ -> fun (V160) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.REPL.EditError', ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'un--vsep'('erased', ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', fun (V161) -> ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'un--unsafeTextWithoutNewLines'('erased', V161)) end, ('Idris.Idris2.Data.Strings':'un--lines'(<<"Not a searchable hole"/utf8>>))))))}} end end end(E35, E36, E37, E38, E39)); _ -> fun (V162) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.REPL.EditError', ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'un--vsep'('erased', ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', fun (V163) -> ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'un--unsafeTextWithoutNewLines'('erased', V163)) end, ('Idris.Idris2.Data.Strings':'un--lines'(<<"Not a searchable hole"/utf8>>))))))}} end end end(E4, E5)); _ -> fun (V164) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.REPL.EditError', ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'un--vsep'('erased', ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', fun (V165) -> ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'un--unsafeTextWithoutNewLines'('erased', V165)) end, ('Idris.Idris2.Data.Strings':'un--lines'(<<"Not a searchable hole"/utf8>>))))))}} end end end(E2, E3)); _ -> fun (V166) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.REPL.EditError', ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'un--vsep'('erased', ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', fun (V167) -> ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'un--unsafeTextWithoutNewLines'('erased', V167)) end, ('Idris.Idris2.Data.Strings':'un--lines'(<<"Not a searchable hole"/utf8>>))))))}} end end end(E0, E1)); [] -> fun (V168) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.REPL.EditError', ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'('erased', ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--fromString_FromString__(Doc $ann)'('erased', <<"Unknown name"/utf8>>)), ('Idris.Idris2.Core.Name':'dn--un--pretty_Pretty__Name'('erased', V1))))}} end; _ -> fun (V169) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.REPL.EditError', ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'un--vsep'('erased', ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', fun (V170) -> ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'un--unsafeTextWithoutNewLines'('erased', V170)) end, ('Idris.Idris2.Data.Strings':'un--lines'(<<"Not a searchable hole"/utf8>>))))))}} end end.
'case--case block in processEdit-5704'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9) -> case V2 of 0 -> fun (V10) -> ('un--updateFile'(V3, fun (V11) -> ('un--addClause'(V8, ('Idris.Idris2.Prelude.Types':'dn--un--cast_Cast__Int_Integer'(V1)), V11)) end, V10)) end; 1 -> fun (V12) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.REPL.DisplayEdit', ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty__String'('erased', V8))}} end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--processEdit-5683'(V0, V1, V2, V3, V4, V5, V6, V7, V8) -> case V8 of {'Idris.Prelude.Types.Just', E0} -> (fun (V9) -> case V2 of 0 -> fun (V10) -> ('un--updateFile'(V3, fun (V11) -> ('un--addClause'(V9, ('Idris.Idris2.Prelude.Types':'dn--un--cast_Cast__Int_Integer'(V1)), V11)) end, V10)) end; 1 -> fun (V12) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.REPL.DisplayEdit', ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty__String'('erased', V9))}} end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V13) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.REPL.EditError', ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'('erased', ('Idris.Idris2.Core.Name':'dn--un--pretty_Pretty__Name'('erased', V0)), ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Util':'un--reflow'('erased', <<"not defined here"/utf8>>))))}} end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in processEdit-5565'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12) -> case V3 of 0 -> fun (V13) -> ('un--updateFile'(V4, fun (V14) -> ('un--caseSplit'(('Idris.Idris2.Data.Strings':'un--unlines'(V12)), ('Idris.Idris2.Prelude.Types':'dn--un--cast_Cast__Int_Integer'(('Idris.Idris2.Prelude.Num':'dn--un---_Neg__Int'(V2, 1)))), V14)) end, V13)) end; 1 -> fun (V15) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.REPL.DisplayEdit', ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'un--vsep'('erased', ('Idris.Idris2.Prelude.Interfaces':'un--<$>'('erased', 'erased', 'erased', fun (V16) -> fun (V17) -> fun (V18) -> fun (V19) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', V18, V19)) end end end end, fun (V20) -> ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty__String'('erased', V20)) end, V12))))}} end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--processEdit-5523'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10) -> case V10 of {'Idris.TTImp.Interactive.CaseSplit.OK', E0} -> (fun (V11) -> fun (V12) -> begin (V13 = ('Idris.Idris2.Idris.IDEMode.CaseSplit':'un--updateCase'(V8, V6, V4, V11, ('Idris.Idris2.Prelude.Num':'dn--un---_Neg__Int'(V2, 1)), ('Idris.Idris2.Prelude.Num':'dn--un---_Neg__Int'(V1, 1)), V12))), case V13 of {'Idris.Prelude.Types.Left', E1} -> (fun (V14) -> {'Idris.Prelude.Types.Left', V14} end(E1)); {'Idris.Prelude.Types.Right', E2} -> (fun (V15) -> case V3 of 0 -> ('un--updateFile'(V4, fun (V16) -> ('un--caseSplit'(('Idris.Idris2.Data.Strings':'un--unlines'(V15)), ('Idris.Idris2.Prelude.Types':'dn--un--cast_Cast__Int_Integer'(('Idris.Idris2.Prelude.Num':'dn--un---_Neg__Int'(V2, 1)))), V16)) end, V12)); 1 -> {'Idris.Prelude.Types.Right', {'Idris.Idris.REPL.DisplayEdit', ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'un--vsep'('erased', ('Idris.Idris2.Prelude.Interfaces':'un--<$>'('erased', 'erased', 'erased', fun (V17) -> fun (V18) -> fun (V19) -> fun (V20) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', V19, V20)) end end end end, fun (V21) -> ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty__String'('erased', V21)) end, V15))))}}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0)); {'Idris.TTImp.Interactive.CaseSplit.SplitFail', E3} -> (fun (V22) -> fun (V23) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.REPL.EditError', ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty__String'('erased', ('Idris.Idris2.TTImp.Interactive.CaseSplit':'dn--un--show_Show__SplitError'(V22))))}} end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--processEdit-5449'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9) -> case V9 of 0 -> fun (V10) -> ('Idris.Idris2.Core.FC':'un--within'({'Idris.Builtin.MkPair', ('Idris.Idris2.Prelude.Num':'dn--un---_Neg__Int'(V2, 1)), ('Idris.Idris2.Prelude.Num':'dn--un---_Neg__Int'(V1, 1))}, V10)) end; 1 -> fun (V11) -> ('Idris.Idris2.Core.FC':'un--onLine'(('Idris.Idris2.Prelude.Num':'dn--un---_Neg__Int'(V2, 1)), V11)) end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--processEdit-5383'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9) -> case V9 of [] -> fun (V10) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'un--emptyDoc'('erased'))} end; _ -> fun (V11) -> begin (V13 = (('Idris.Idris2.Core.Core':'un--traverse'('erased', 'erased', fun (V12) -> ('un--displayType'(V7, V5, V8, V12)) end, V9))(V11))), case V13 of {'Idris.Prelude.Types.Left', E0} -> (fun (V14) -> {'Idris.Prelude.Types.Left', V14} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V15) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'un--vsep'('erased', V15))} end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end.
'case--case block in processEdit-5306'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11) -> case V10 of {'Idris.Text.PrettyPrint.Prettyprinter.Doc.Empty'} -> (fun () -> fun (V12) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable__Core_Error'('erased', {'Idris.Core.Core.UndefinedName', {'Idris.Core.FC.MkFC', <<"(interactive)"/utf8>>, {'Idris.Builtin.MkPair', 0, 0}, {'Idris.Builtin.MkPair', 0, 0}}, V0}, V12)) end end()); _ -> fun (V13) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.REPL.DisplayEdit', V10}} end end.
'case--case block in processEdit-5201'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14) -> case V10 of {'Idris.Text.PrettyPrint.Prettyprinter.Doc.Empty'} -> (fun () -> fun (V15) -> begin (V16 = ('un--displayTerm'(V7, V5, V8, V13, V15))), case V16 of {'Idris.Prelude.Types.Left', E0} -> (fun (V17) -> {'Idris.Prelude.Types.Left', V17} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V18) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.REPL.DisplayEdit', ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'('erased', ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty__String'('erased', ('Idris.Idris2.Core.Name':'un--nameRoot'(V11)))), ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'('erased', ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Symbols':'un--colon'('erased')), V18))))}} end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end()); _ -> fun (V19) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.REPL.DisplayEdit', ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'un--emptyDoc'('erased'))}} end end.
'case--processEdit-5165'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11) -> case V11 of {'Idris.Prelude.Types.Just', E0} -> (fun (V12) -> case V12 of {'Idris.Builtin.MkPair', E1, E2} -> (fun (V13, V14) -> case V14 of {'Idris.Builtin.MkPair', E3, E4} -> (fun (V15, V16) -> case V10 of {'Idris.Text.PrettyPrint.Prettyprinter.Doc.Empty'} -> (fun () -> fun (V17) -> begin (V18 = ('un--displayTerm'(V7, V5, V8, V16, V17))), case V18 of {'Idris.Prelude.Types.Left', E5} -> (fun (V19) -> {'Idris.Prelude.Types.Left', V19} end(E5)); {'Idris.Prelude.Types.Right', E6} -> (fun (V20) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.REPL.DisplayEdit', ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'('erased', ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty__String'('erased', ('Idris.Idris2.Core.Name':'un--nameRoot'(V13)))), ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'('erased', ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Symbols':'un--colon'('erased')), V20))))}} end(E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end()); _ -> fun (V21) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.REPL.DisplayEdit', ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'un--emptyDoc'('erased'))}} end end end(E3, E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> case V10 of {'Idris.Text.PrettyPrint.Prettyprinter.Doc.Empty'} -> (fun () -> fun (V22) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable__Core_Error'('erased', {'Idris.Core.Core.UndefinedName', {'Idris.Core.FC.MkFC', <<"(interactive)"/utf8>>, {'Idris.Builtin.MkPair', 0, 0}, {'Idris.Builtin.MkPair', 0, 0}}, V0}, V22)) end end()); _ -> fun (V23) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.REPL.DisplayEdit', V10}} end end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in case block in nextGenDef-5014'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V4 of {'Idris.Idris.REPLOpts.MkREPLOpts', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13} -> (fun (V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21) -> {'Idris.Idris.REPLOpts.MkREPLOpts', V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, {'Idris.Prelude.Types.Nothing'}, V19, V20, V21} end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in case block in nextGenDef-4942'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9) -> case V4 of {'Idris.Idris.REPLOpts.MkREPLOpts', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13} -> (fun (V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23) -> {'Idris.Idris.REPLOpts.MkREPLOpts', V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, {'Idris.Prelude.Types.Just', {'Idris.Builtin.MkPair', V5, V8}}, V21, V22, V23} end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in case block in nextGenDef-4873'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10) -> case V0 of 0 -> fun (V11) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Just', {'Idris.Builtin.MkPair', V5, V7}}} end; _ -> begin (V12 = (V0 - 1)), fun (V13) -> ('un--nextGenDef'(V3, V2, V1, V12, V13)) end end end.
'case--case block in nextGenDef-4838'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V7 of {'Idris.Prelude.Types.Just', E0} -> (fun (V8) -> case V8 of {'Idris.Builtin.MkPair', E1, E2} -> (fun (V9, V10) -> fun (V11) -> begin (V54 = begin (V53 = (('Idris.Idris2.Erlang.Data.IORef':'un--writeIORef'('erased', 'erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V12) -> fun (V13) -> fun (V14) -> fun (V15) -> fun (V16) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor__IO'('erased', 'erased', V14, V15, V16)) end end end end end, fun (V17) -> fun (V18) -> fun (V19) -> V18 end end end, fun (V20) -> fun (V21) -> fun (V22) -> fun (V23) -> fun (V24) -> begin (V25 = (V22(V24))), begin (V26 = (V23(V24))), (V25(V26)) end end end end end end end}, fun (V27) -> fun (V28) -> fun (V29) -> fun (V30) -> fun (V31) -> begin (V32 = (V29(V31))), ((V30(V32))(V31)) end end end end end end, fun (V33) -> fun (V34) -> fun (V35) -> begin (V36 = (V34(V35))), (V36(V35)) end end end end}, fun (V37) -> fun (V38) -> V38 end end}, V1, case V4 of {'Idris.Idris.REPLOpts.MkREPLOpts', E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16} -> (fun (V39, V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52) -> {'Idris.Idris.REPLOpts.MkREPLOpts', V39, V40, V41, V42, V43, V44, V45, V46, V47, V48, {'Idris.Prelude.Types.Just', {'Idris.Builtin.MkPair', V5, V10}}, V50, V51, V52} end(E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V11))), {'Idris.Prelude.Types.Right', V53} end), case V54 of {'Idris.Prelude.Types.Left', E17} -> (fun (V55) -> {'Idris.Prelude.Types.Left', V55} end(E17)); {'Idris.Prelude.Types.Right', E18} -> (fun (V56) -> case V0 of 0 -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Just', {'Idris.Builtin.MkPair', V5, V9}}}; _ -> begin (V57 = (V0 - 1)), ('un--nextGenDef'(V3, V2, V1, V57, V11)) end end end(E18)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V58) -> begin (V101 = begin (V100 = (('Idris.Idris2.Erlang.Data.IORef':'un--writeIORef'('erased', 'erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V59) -> fun (V60) -> fun (V61) -> fun (V62) -> fun (V63) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor__IO'('erased', 'erased', V61, V62, V63)) end end end end end, fun (V64) -> fun (V65) -> fun (V66) -> V65 end end end, fun (V67) -> fun (V68) -> fun (V69) -> fun (V70) -> fun (V71) -> begin (V72 = (V69(V71))), begin (V73 = (V70(V71))), (V72(V73)) end end end end end end end}, fun (V74) -> fun (V75) -> fun (V76) -> fun (V77) -> fun (V78) -> begin (V79 = (V76(V78))), ((V77(V79))(V78)) end end end end end end, fun (V80) -> fun (V81) -> fun (V82) -> begin (V83 = (V81(V82))), (V83(V82)) end end end end}, fun (V84) -> fun (V85) -> V85 end end}, V1, case V4 of {'Idris.Idris.REPLOpts.MkREPLOpts', E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32} -> (fun (V86, V87, V88, V89, V90, V91, V92, V93, V94, V95, V96, V97, V98, V99) -> {'Idris.Idris.REPLOpts.MkREPLOpts', V86, V87, V88, V89, V90, V91, V92, V93, V94, V95, {'Idris.Prelude.Types.Nothing'}, V97, V98, V99} end(E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V58))), {'Idris.Prelude.Types.Right', V100} end), case V101 of {'Idris.Prelude.Types.Left', E33} -> (fun (V102) -> {'Idris.Prelude.Types.Left', V102} end(E33)); {'Idris.Prelude.Types.Right', E34} -> (fun (V103) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}} end(E34)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--nextGenDef-4809'(V0, V1, V2, V3, V4, V5) -> case V5 of {'Idris.Prelude.Types.Just', E0} -> (fun (V6) -> case V6 of {'Idris.Builtin.MkPair', E1, E2} -> (fun (V7, V8) -> fun (V9) -> begin (V10 = ('Idris.Idris2.TTImp.Interactive.ExprSearch':'un--nextResult'('erased', V3, V2, V8, V9))), case V10 of {'Idris.Prelude.Types.Left', E3} -> (fun (V11) -> {'Idris.Prelude.Types.Left', V11} end(E3)); {'Idris.Prelude.Types.Right', E4} -> (fun (V12) -> case V12 of {'Idris.Prelude.Types.Just', E5} -> (fun (V13) -> case V13 of {'Idris.Builtin.MkPair', E6, E7} -> (fun (V14, V15) -> begin (V58 = begin (V57 = (('Idris.Idris2.Erlang.Data.IORef':'un--writeIORef'('erased', 'erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V16) -> fun (V17) -> fun (V18) -> fun (V19) -> fun (V20) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor__IO'('erased', 'erased', V18, V19, V20)) end end end end end, fun (V21) -> fun (V22) -> fun (V23) -> V22 end end end, fun (V24) -> fun (V25) -> fun (V26) -> fun (V27) -> fun (V28) -> begin (V29 = (V26(V28))), begin (V30 = (V27(V28))), (V29(V30)) end end end end end end end}, fun (V31) -> fun (V32) -> fun (V33) -> fun (V34) -> fun (V35) -> begin (V36 = (V33(V35))), ((V34(V36))(V35)) end end end end end end, fun (V37) -> fun (V38) -> fun (V39) -> begin (V40 = (V38(V39))), (V40(V39)) end end end end}, fun (V41) -> fun (V42) -> V42 end end}, V1, case V4 of {'Idris.Idris.REPLOpts.MkREPLOpts', E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21} -> (fun (V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56) -> {'Idris.Idris.REPLOpts.MkREPLOpts', V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, {'Idris.Prelude.Types.Just', {'Idris.Builtin.MkPair', V7, V15}}, V54, V55, V56} end(E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V9))), {'Idris.Prelude.Types.Right', V57} end), case V58 of {'Idris.Prelude.Types.Left', E22} -> (fun (V59) -> {'Idris.Prelude.Types.Left', V59} end(E22)); {'Idris.Prelude.Types.Right', E23} -> (fun (V60) -> case V0 of 0 -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Just', {'Idris.Builtin.MkPair', V7, V14}}}; _ -> begin (V61 = (V0 - 1)), ('un--nextGenDef'(V3, V2, V1, V61, V9)) end end end(E23)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E6, E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E5)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> begin (V104 = begin (V103 = (('Idris.Idris2.Erlang.Data.IORef':'un--writeIORef'('erased', 'erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V62) -> fun (V63) -> fun (V64) -> fun (V65) -> fun (V66) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor__IO'('erased', 'erased', V64, V65, V66)) end end end end end, fun (V67) -> fun (V68) -> fun (V69) -> V68 end end end, fun (V70) -> fun (V71) -> fun (V72) -> fun (V73) -> fun (V74) -> begin (V75 = (V72(V74))), begin (V76 = (V73(V74))), (V75(V76)) end end end end end end end}, fun (V77) -> fun (V78) -> fun (V79) -> fun (V80) -> fun (V81) -> begin (V82 = (V79(V81))), ((V80(V82))(V81)) end end end end end end, fun (V83) -> fun (V84) -> fun (V85) -> begin (V86 = (V84(V85))), (V86(V85)) end end end end}, fun (V87) -> fun (V88) -> V88 end end}, V1, case V4 of {'Idris.Idris.REPLOpts.MkREPLOpts', E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37} -> (fun (V89, V90, V91, V92, V93, V94, V95, V96, V97, V98, V99, V100, V101, V102) -> {'Idris.Idris.REPLOpts.MkREPLOpts', V89, V90, V91, V92, V93, V94, V95, V96, V97, V98, {'Idris.Prelude.Types.Nothing'}, V100, V101, V102} end(E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V9))), {'Idris.Prelude.Types.Right', V103} end), case V104 of {'Idris.Prelude.Types.Left', E38} -> (fun (V105) -> {'Idris.Prelude.Types.Left', V105} end(E38)); {'Idris.Prelude.Types.Right', E39} -> (fun (V106) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}} end(E39)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V107) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}} end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in case block in nextProofSearch-4768'(V0, V1, V2, V3, V4, V5, V6) -> case V3 of {'Idris.Idris.REPLOpts.MkREPLOpts', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13} -> (fun (V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20) -> {'Idris.Idris.REPLOpts.MkREPLOpts', V7, V8, V9, V10, V11, V12, V13, V14, V15, {'Idris.Prelude.Types.Nothing'}, V17, V18, V19, V20} end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in case block in nextProofSearch-4700'(V0, V1, V2, V3, V4, V5, V6, V7, V8) -> case V3 of {'Idris.Idris.REPLOpts.MkREPLOpts', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13} -> (fun (V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22) -> {'Idris.Idris.REPLOpts.MkREPLOpts', V9, V10, V11, V12, V13, V14, V15, V16, V17, {'Idris.Prelude.Types.Just', {'Idris.Builtin.MkPair', V4, V7}}, V19, V20, V21, V22} end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in nextProofSearch-4644'(V0, V1, V2, V3, V4, V5, V6) -> case V6 of {'Idris.Prelude.Types.Just', E0} -> (fun (V7) -> case V7 of {'Idris.Builtin.MkPair', E1, E2} -> (fun (V8, V9) -> fun (V10) -> begin (V53 = begin (V52 = (('Idris.Idris2.Erlang.Data.IORef':'un--writeIORef'('erased', 'erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V11) -> fun (V12) -> fun (V13) -> fun (V14) -> fun (V15) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor__IO'('erased', 'erased', V13, V14, V15)) end end end end end, fun (V16) -> fun (V17) -> fun (V18) -> V17 end end end, fun (V19) -> fun (V20) -> fun (V21) -> fun (V22) -> fun (V23) -> begin (V24 = (V21(V23))), begin (V25 = (V22(V23))), (V24(V25)) end end end end end end end}, fun (V26) -> fun (V27) -> fun (V28) -> fun (V29) -> fun (V30) -> begin (V31 = (V28(V30))), ((V29(V31))(V30)) end end end end end end, fun (V32) -> fun (V33) -> fun (V34) -> begin (V35 = (V33(V34))), (V35(V34)) end end end end}, fun (V36) -> fun (V37) -> V37 end end}, V0, case V3 of {'Idris.Idris.REPLOpts.MkREPLOpts', E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16} -> (fun (V38, V39, V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51) -> {'Idris.Idris.REPLOpts.MkREPLOpts', V38, V39, V40, V41, V42, V43, V44, V45, V46, {'Idris.Prelude.Types.Just', {'Idris.Builtin.MkPair', V4, V9}}, V48, V49, V50, V51} end(E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V10))), {'Idris.Prelude.Types.Right', V52} end), case V53 of {'Idris.Prelude.Types.Left', E17} -> (fun (V54) -> {'Idris.Prelude.Types.Left', V54} end(E17)); {'Idris.Prelude.Types.Right', E18} -> (fun (V55) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Just', {'Idris.Builtin.MkPair', V4, V8}}} end(E18)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V56) -> begin (V99 = begin (V98 = (('Idris.Idris2.Erlang.Data.IORef':'un--writeIORef'('erased', 'erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V57) -> fun (V58) -> fun (V59) -> fun (V60) -> fun (V61) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor__IO'('erased', 'erased', V59, V60, V61)) end end end end end, fun (V62) -> fun (V63) -> fun (V64) -> V63 end end end, fun (V65) -> fun (V66) -> fun (V67) -> fun (V68) -> fun (V69) -> begin (V70 = (V67(V69))), begin (V71 = (V68(V69))), (V70(V71)) end end end end end end end}, fun (V72) -> fun (V73) -> fun (V74) -> fun (V75) -> fun (V76) -> begin (V77 = (V74(V76))), ((V75(V77))(V76)) end end end end end end, fun (V78) -> fun (V79) -> fun (V80) -> begin (V81 = (V79(V80))), (V81(V80)) end end end end}, fun (V82) -> fun (V83) -> V83 end end}, V0, case V3 of {'Idris.Idris.REPLOpts.MkREPLOpts', E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32} -> (fun (V84, V85, V86, V87, V88, V89, V90, V91, V92, V93, V94, V95, V96, V97) -> {'Idris.Idris.REPLOpts.MkREPLOpts', V84, V85, V86, V87, V88, V89, V90, V91, V92, {'Idris.Prelude.Types.Nothing'}, V94, V95, V96, V97} end(E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V56))), {'Idris.Prelude.Types.Right', V98} end), case V99 of {'Idris.Prelude.Types.Left', E33} -> (fun (V100) -> {'Idris.Prelude.Types.Left', V100} end(E33)); {'Idris.Prelude.Types.Right', E34} -> (fun (V101) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}} end(E34)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--nextProofSearch-4617'(V0, V1, V2, V3, V4) -> case V4 of {'Idris.Prelude.Types.Just', E0} -> (fun (V5) -> case V5 of {'Idris.Builtin.MkPair', E1, E2} -> (fun (V6, V7) -> fun (V8) -> begin (V9 = ('Idris.Idris2.TTImp.Interactive.ExprSearch':'un--nextResult'('erased', V2, V1, V7, V8))), case V9 of {'Idris.Prelude.Types.Left', E3} -> (fun (V10) -> {'Idris.Prelude.Types.Left', V10} end(E3)); {'Idris.Prelude.Types.Right', E4} -> (fun (V11) -> case V11 of {'Idris.Prelude.Types.Just', E5} -> (fun (V12) -> case V12 of {'Idris.Builtin.MkPair', E6, E7} -> (fun (V13, V14) -> begin (V57 = begin (V56 = (('Idris.Idris2.Erlang.Data.IORef':'un--writeIORef'('erased', 'erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V15) -> fun (V16) -> fun (V17) -> fun (V18) -> fun (V19) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor__IO'('erased', 'erased', V17, V18, V19)) end end end end end, fun (V20) -> fun (V21) -> fun (V22) -> V21 end end end, fun (V23) -> fun (V24) -> fun (V25) -> fun (V26) -> fun (V27) -> begin (V28 = (V25(V27))), begin (V29 = (V26(V27))), (V28(V29)) end end end end end end end}, fun (V30) -> fun (V31) -> fun (V32) -> fun (V33) -> fun (V34) -> begin (V35 = (V32(V34))), ((V33(V35))(V34)) end end end end end end, fun (V36) -> fun (V37) -> fun (V38) -> begin (V39 = (V37(V38))), (V39(V38)) end end end end}, fun (V40) -> fun (V41) -> V41 end end}, V0, case V3 of {'Idris.Idris.REPLOpts.MkREPLOpts', E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21} -> (fun (V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55) -> {'Idris.Idris.REPLOpts.MkREPLOpts', V42, V43, V44, V45, V46, V47, V48, V49, V50, {'Idris.Prelude.Types.Just', {'Idris.Builtin.MkPair', V6, V14}}, V52, V53, V54, V55} end(E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V8))), {'Idris.Prelude.Types.Right', V56} end), case V57 of {'Idris.Prelude.Types.Left', E22} -> (fun (V58) -> {'Idris.Prelude.Types.Left', V58} end(E22)); {'Idris.Prelude.Types.Right', E23} -> (fun (V59) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Just', {'Idris.Builtin.MkPair', V6, V13}}} end(E23)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E6, E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E5)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> begin (V102 = begin (V101 = (('Idris.Idris2.Erlang.Data.IORef':'un--writeIORef'('erased', 'erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V60) -> fun (V61) -> fun (V62) -> fun (V63) -> fun (V64) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor__IO'('erased', 'erased', V62, V63, V64)) end end end end end, fun (V65) -> fun (V66) -> fun (V67) -> V66 end end end, fun (V68) -> fun (V69) -> fun (V70) -> fun (V71) -> fun (V72) -> begin (V73 = (V70(V72))), begin (V74 = (V71(V72))), (V73(V74)) end end end end end end end}, fun (V75) -> fun (V76) -> fun (V77) -> fun (V78) -> fun (V79) -> begin (V80 = (V77(V79))), ((V78(V80))(V79)) end end end end end end, fun (V81) -> fun (V82) -> fun (V83) -> begin (V84 = (V82(V83))), (V84(V83)) end end end end}, fun (V85) -> fun (V86) -> V86 end end}, V0, case V3 of {'Idris.Idris.REPLOpts.MkREPLOpts', E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37} -> (fun (V87, V88, V89, V90, V91, V92, V93, V94, V95, V96, V97, V98, V99, V100) -> {'Idris.Idris.REPLOpts.MkREPLOpts', V87, V88, V89, V90, V91, V92, V93, V94, V95, {'Idris.Prelude.Types.Nothing'}, V97, V98, V99, V100} end(E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V8))), {'Idris.Prelude.Types.Right', V101} end), case V102 of {'Idris.Prelude.Types.Left', E38} -> (fun (V103) -> {'Idris.Prelude.Types.Left', V103} end(E38)); {'Idris.Prelude.Types.Right', E39} -> (fun (V104) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}} end(E39)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V105) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}} end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--addMadeLemma,insertInBlank-4477'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9) -> case V9 of 0 -> [('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"\x{a}"/utf8>>, ('Idris.Idris2.Parser.Unlit':'un--relit'(V8, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show__Name'(V4)), ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<" : "/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(V3, <<"\x{a}"/utf8>>)))))))))) | V7]; 1 -> [V6 | ('nested--25013-4446--in--un--insertInBlank'(V0, V1, V2, V3, V4, V5, V8, V7))]; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--proofSearch,replaceStr-4386'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V7 of 0 -> ('Idris.Idris2.Prelude.Types.Strings':'un--++'(V5, ('Idris.Idris2.Prelude.Types':'un--pack'(('Idris.Idris2.Data.List':'un--drop'('erased', ('Idris.Idris2.Prelude.Types.Strings':'un--length'(V6)), ('Idris.Idris2.Prelude.Types':'un--unpack'(V4)))))))); 1 -> ('Idris.Idris2.Prelude.Types':'un--strCons'(('erlang':'hd'(('string':'next_grapheme'(V4)))), ('nested--24932-4375--in--un--replaceStr'(V0, V1, V2, V3, V6, V5, case ('string':'next_grapheme'(V4)) of [E0 | E1] when (erlang:'is_binary'(E1)) -> (fun (V8, V9) -> V9 end(E0, E1)); _ -> <<""/utf8>> end)))); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--addClause-4308'(V0, V1, V2, V3) -> case V3 of 0 -> [('un--rtrim'(V2)) | [V0 | V1]]; 1 -> [V0 | ('un--addClause'(V2, 0, V1))]; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in updateFile-4218'(V0, V1, V2, V3, V4) -> case V4 of {'Idris.Prelude.Types.Right', E0} -> (fun (V5) -> fun (V6) -> begin (V35 = begin (V34 = (('Idris.Idris2.Erlang.System.File':'un--writeFile'('erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V7) -> fun (V8) -> fun (V9) -> fun (V10) -> fun (V11) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor__IO'('erased', 'erased', V9, V10, V11)) end end end end end, fun (V12) -> fun (V13) -> fun (V14) -> V13 end end end, fun (V15) -> fun (V16) -> fun (V17) -> fun (V18) -> fun (V19) -> begin (V20 = (V17(V19))), begin (V21 = (V18(V19))), (V20(V21)) end end end end end end end}, fun (V22) -> fun (V23) -> fun (V24) -> fun (V25) -> fun (V26) -> begin (V27 = (V24(V26))), ((V25(V27))(V26)) end end end end end end, fun (V28) -> fun (V29) -> fun (V30) -> begin (V31 = (V29(V30))), (V31(V30)) end end end end}, fun (V32) -> fun (V33) -> V33 end end}, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(V3, <<"~"/utf8>>)), V5))(V6))), {'Idris.Prelude.Types.Right', V34} end), case V35 of {'Idris.Prelude.Types.Left', E1} -> (fun (V36) -> {'Idris.Prelude.Types.Left', V36} end(E1)); {'Idris.Prelude.Types.Right', E2} -> (fun (V37) -> begin (V66 = begin (V65 = (('Idris.Idris2.Erlang.System.File':'un--writeFile'('erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V38) -> fun (V39) -> fun (V40) -> fun (V41) -> fun (V42) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor__IO'('erased', 'erased', V40, V41, V42)) end end end end end, fun (V43) -> fun (V44) -> fun (V45) -> V44 end end end, fun (V46) -> fun (V47) -> fun (V48) -> fun (V49) -> fun (V50) -> begin (V51 = (V48(V50))), begin (V52 = (V49(V50))), (V51(V52)) end end end end end end end}, fun (V53) -> fun (V54) -> fun (V55) -> fun (V56) -> fun (V57) -> begin (V58 = (V55(V57))), ((V56(V58))(V57)) end end end end end end, fun (V59) -> fun (V60) -> fun (V61) -> begin (V62 = (V60(V61))), (V62(V61)) end end end end}, fun (V63) -> fun (V64) -> V64 end end}, V3, ('Idris.Idris2.Data.Strings':'un--unlines'((V0(('Idris.Idris2.Data.Strings':'un--lines'(V5))))))))(V6))), {'Idris.Prelude.Types.Right', V65} end), case V66 of {'Idris.Prelude.Types.Left', E3} -> (fun (V67) -> {'Idris.Prelude.Types.Left', V67} end(E3)); {'Idris.Prelude.Types.Right', E4} -> (fun (V68) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.REPL.DisplayEdit', ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'un--emptyDoc'('erased'))}} end(E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0)); {'Idris.Prelude.Types.Left', E5} -> (fun (V69) -> fun (V70) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable__Core_Error'('erased', {'Idris.Core.Core.FileErr', V3, V69}, V70)) end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--updateFile-4194'(V0, V1, V2, V3) -> case V3 of {'Idris.Prelude.Types.Just', E0} -> (fun (V4) -> fun (V5) -> begin (V34 = begin (V33 = (('Idris.Idris2.Erlang.System.File':'un--readFile'('erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V6) -> fun (V7) -> fun (V8) -> fun (V9) -> fun (V10) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor__IO'('erased', 'erased', V8, V9, V10)) end end end end end, fun (V11) -> fun (V12) -> fun (V13) -> V12 end end end, fun (V14) -> fun (V15) -> fun (V16) -> fun (V17) -> fun (V18) -> begin (V19 = (V16(V18))), begin (V20 = (V17(V18))), (V19(V20)) end end end end end end end}, fun (V21) -> fun (V22) -> fun (V23) -> fun (V24) -> fun (V25) -> begin (V26 = (V23(V25))), ((V24(V26))(V25)) end end end end end end, fun (V27) -> fun (V28) -> fun (V29) -> begin (V30 = (V28(V29))), (V30(V29)) end end end end}, fun (V31) -> fun (V32) -> V32 end end}, V4))(V5))), {'Idris.Prelude.Types.Right', V33} end), case V34 of {'Idris.Prelude.Types.Left', E1} -> (fun (V35) -> {'Idris.Prelude.Types.Left', V35} end(E1)); {'Idris.Prelude.Types.Right', E2} -> (fun (V36) -> case V36 of {'Idris.Prelude.Types.Right', E3} -> (fun (V37) -> begin (V66 = begin (V65 = (('Idris.Idris2.Erlang.System.File':'un--writeFile'('erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V38) -> fun (V39) -> fun (V40) -> fun (V41) -> fun (V42) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor__IO'('erased', 'erased', V40, V41, V42)) end end end end end, fun (V43) -> fun (V44) -> fun (V45) -> V44 end end end, fun (V46) -> fun (V47) -> fun (V48) -> fun (V49) -> fun (V50) -> begin (V51 = (V48(V50))), begin (V52 = (V49(V50))), (V51(V52)) end end end end end end end}, fun (V53) -> fun (V54) -> fun (V55) -> fun (V56) -> fun (V57) -> begin (V58 = (V55(V57))), ((V56(V58))(V57)) end end end end end end, fun (V59) -> fun (V60) -> fun (V61) -> begin (V62 = (V60(V61))), (V62(V61)) end end end end}, fun (V63) -> fun (V64) -> V64 end end}, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(V4, <<"~"/utf8>>)), V37))(V5))), {'Idris.Prelude.Types.Right', V65} end), case V66 of {'Idris.Prelude.Types.Left', E4} -> (fun (V67) -> {'Idris.Prelude.Types.Left', V67} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V68) -> begin (V97 = begin (V96 = (('Idris.Idris2.Erlang.System.File':'un--writeFile'('erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V69) -> fun (V70) -> fun (V71) -> fun (V72) -> fun (V73) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor__IO'('erased', 'erased', V71, V72, V73)) end end end end end, fun (V74) -> fun (V75) -> fun (V76) -> V75 end end end, fun (V77) -> fun (V78) -> fun (V79) -> fun (V80) -> fun (V81) -> begin (V82 = (V79(V81))), begin (V83 = (V80(V81))), (V82(V83)) end end end end end end end}, fun (V84) -> fun (V85) -> fun (V86) -> fun (V87) -> fun (V88) -> begin (V89 = (V86(V88))), ((V87(V89))(V88)) end end end end end end, fun (V90) -> fun (V91) -> fun (V92) -> begin (V93 = (V91(V92))), (V93(V92)) end end end end}, fun (V94) -> fun (V95) -> V95 end end}, V4, ('Idris.Idris2.Data.Strings':'un--unlines'((V0(('Idris.Idris2.Data.Strings':'un--lines'(V37))))))))(V5))), {'Idris.Prelude.Types.Right', V96} end), case V97 of {'Idris.Prelude.Types.Left', E6} -> (fun (V98) -> {'Idris.Prelude.Types.Left', V98} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V99) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.REPL.DisplayEdit', ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'un--emptyDoc'('erased'))}} end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); {'Idris.Prelude.Types.Left', E8} -> (fun (V100) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable__Core_Error'('erased', {'Idris.Core.Core.FileErr', V4, V100}, V5)) end(E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V101) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.REPL.DisplayEdit', ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'un--emptyDoc'('erased'))}} end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in findCG-4002'(V0, V1, V2, V3, V4) -> case V4 of {'Idris.Prelude.Types.Just', E0} -> (fun (V5) -> fun (V6) -> {'Idris.Prelude.Types.Right', V5} end end(E0)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V7) -> begin (V36 = begin (V35 = (('Idris.Idris2.Prelude.IO':'un--putStrLn'('erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V8) -> fun (V9) -> fun (V10) -> fun (V11) -> fun (V12) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor__IO'('erased', 'erased', V10, V11, V12)) end end end end end, fun (V13) -> fun (V14) -> fun (V15) -> V14 end end end, fun (V16) -> fun (V17) -> fun (V18) -> fun (V19) -> fun (V20) -> begin (V21 = (V18(V20))), begin (V22 = (V19(V20))), (V21(V22)) end end end end end end end}, fun (V23) -> fun (V24) -> fun (V25) -> fun (V26) -> fun (V27) -> begin (V28 = (V25(V27))), ((V26(V28))(V27)) end end end end end end, fun (V29) -> fun (V30) -> fun (V31) -> begin (V32 = (V30(V31))), (V32(V31)) end end end end}, fun (V33) -> fun (V34) -> V34 end end}, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"No such code generator: "/utf8>>, V3))))(V7))), {'Idris.Prelude.Types.Right', V35} end), case V36 of {'Idris.Prelude.Types.Left', E1} -> (fun (V37) -> {'Idris.Prelude.Types.Left', V37} end(E1)); {'Idris.Prelude.Types.Right', E2} -> (fun (V38) -> begin (V66 = (('Idris.Idris2.Utils.System':'un--softExitWith'('erased', 'erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V39) -> fun (V40) -> fun (V41) -> fun (V42) -> fun (V43) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor__IO'('erased', 'erased', V41, V42, V43)) end end end end end, fun (V44) -> fun (V45) -> fun (V46) -> V45 end end end, fun (V47) -> fun (V48) -> fun (V49) -> fun (V50) -> fun (V51) -> begin (V52 = (V49(V51))), begin (V53 = (V50(V51))), (V52(V53)) end end end end end end end}, fun (V54) -> fun (V55) -> fun (V56) -> fun (V57) -> fun (V58) -> begin (V59 = (V56(V58))), ((V57(V59))(V58)) end end end end end end, fun (V60) -> fun (V61) -> fun (V62) -> begin (V63 = (V61(V62))), (V63(V62)) end end end end}, fun (V64) -> fun (V65) -> V65 end end}, {'Idris.Erlang.System.ExitFailure', 1, {'Idris.Data.So.Oh'}}))(V7))), {'Idris.Prelude.Types.Right', V66} end end(E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--findCG-3940'(V0, V1, V2, V3) -> case V3 of {'Idris.Core.Options.Chez'} -> (fun () -> fun (V4) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Scheme.Chez':'un--codegenChez'())} end end()); {'Idris.Core.Options.Racket'} -> (fun () -> fun (V5) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Scheme.Racket':'un--codegenRacket'())} end end()); {'Idris.Core.Options.Gambit'} -> (fun () -> fun (V6) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Scheme.Gambit':'un--codegenGambit'())} end end()); {'Idris.Core.Options.Node'} -> (fun () -> fun (V7) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.ES.Node':'un--codegenNode'())} end end()); {'Idris.Core.Options.Javascript'} -> (fun () -> fun (V8) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.ES.Javascript':'un--codegenJavascript'())} end end()); {'Idris.Core.Options.Other', E0} -> (fun (V9) -> fun (V10) -> begin (V11 = ('Idris.Idris2.Idris.REPLOpts':'un--getCodegen'(V1, V9, V10))), case V11 of {'Idris.Prelude.Types.Left', E1} -> (fun (V12) -> {'Idris.Prelude.Types.Left', V12} end(E1)); {'Idris.Prelude.Types.Right', E2} -> (fun (V13) -> case V13 of {'Idris.Prelude.Types.Just', E3} -> (fun (V14) -> {'Idris.Prelude.Types.Right', V14} end(E3)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> begin (V43 = begin (V42 = (('Idris.Idris2.Prelude.IO':'un--putStrLn'('erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V15) -> fun (V16) -> fun (V17) -> fun (V18) -> fun (V19) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor__IO'('erased', 'erased', V17, V18, V19)) end end end end end, fun (V20) -> fun (V21) -> fun (V22) -> V21 end end end, fun (V23) -> fun (V24) -> fun (V25) -> fun (V26) -> fun (V27) -> begin (V28 = (V25(V27))), begin (V29 = (V26(V27))), (V28(V29)) end end end end end end end}, fun (V30) -> fun (V31) -> fun (V32) -> fun (V33) -> fun (V34) -> begin (V35 = (V32(V34))), ((V33(V35))(V34)) end end end end end end, fun (V36) -> fun (V37) -> fun (V38) -> begin (V39 = (V37(V38))), (V39(V38)) end end end end}, fun (V40) -> fun (V41) -> V41 end end}, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"No such code generator: "/utf8>>, V9))))(V10))), {'Idris.Prelude.Types.Right', V42} end), case V43 of {'Idris.Prelude.Types.Left', E4} -> (fun (V44) -> {'Idris.Prelude.Types.Left', V44} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V45) -> begin (V73 = (('Idris.Idris2.Utils.System':'un--softExitWith'('erased', 'erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V46) -> fun (V47) -> fun (V48) -> fun (V49) -> fun (V50) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor__IO'('erased', 'erased', V48, V49, V50)) end end end end end, fun (V51) -> fun (V52) -> fun (V53) -> V52 end end end, fun (V54) -> fun (V55) -> fun (V56) -> fun (V57) -> fun (V58) -> begin (V59 = (V56(V58))), begin (V60 = (V57(V58))), (V59(V60)) end end end end end end end}, fun (V61) -> fun (V62) -> fun (V63) -> fun (V64) -> fun (V65) -> begin (V66 = (V63(V65))), ((V64(V66))(V65)) end end end end end end, fun (V67) -> fun (V68) -> fun (V69) -> begin (V70 = (V68(V69))), (V70(V69)) end end end end}, fun (V71) -> fun (V72) -> V72 end end}, {'Idris.Erlang.System.ExitFailure', 1, {'Idris.Data.So.Oh'}}))(V10))), {'Idris.Prelude.Types.Right', V73} end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--setOpt-3864'(V0, V1, V2, V3, V4) -> case V4 of {'Idris.Prelude.Types.Just', E0} -> (fun (V5) -> fun (V6) -> ('Idris.Idris2.Core.Context':'un--setCG'(V2, V5, V6)) end end(E0)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V7) -> ('Idris.Idris2.Idris.REPLCommon':'un--iputStrLn'(V1, ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Util':'un--reflow'('erased', <<"No such code generator available"/utf8>>)), V7)) end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--setOpt-3845'(V0, V1, V2, V3) -> case V3 of {'Idris.Idris.REPLOpts.MkREPLOpts', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13} -> (fun (V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17) -> {'Idris.Idris.REPLOpts.MkREPLOpts', V4, V5, V6, V7, V8, V0, V10, V11, V12, V13, V14, V15, V16, V17} end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--setOpt-3806'(V0, V1, V2, V3) -> case V3 of {'Idris.Idris.REPLOpts.MkREPLOpts', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13} -> (fun (V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17) -> {'Idris.Idris.REPLOpts.MkREPLOpts', V4, V0, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17} end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--setOpt-3767'(V0, V1, V2, V3) -> case V3 of {'Idris.Idris.REPLOpts.MkREPLOpts', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13} -> (fun (V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17) -> {'Idris.Idris.REPLOpts.MkREPLOpts', V0, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17} end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--setOpt-3728'(V0, V1, V2, V3) -> case V3 of {'Idris.Core.Options.MkPPOpts', E0, E1, E2} -> (fun (V4, V5, V6) -> {'Idris.Core.Options.MkPPOpts', V4, V5, V0} end(E0, E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--setOpt-3707'(V0, V1, V2, V3) -> case V3 of {'Idris.Core.Options.MkPPOpts', E0, E1, E2} -> (fun (V4, V5, V6) -> {'Idris.Core.Options.MkPPOpts', V0, V5, V6} end(E0, E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--displayPats-3610'(V0, V1, V2, V3, V4, V5, V6) -> case V6 of {'Idris.Core.Context.PMDef', E0, E1, E2, E3, E4} -> (fun (V7, V8, V9, V10, V11) -> fun (V12) -> begin (V13 = (('un--displayType'(V5, V4, V3, {'Idris.Builtin.MkPair', V0, {'Idris.Builtin.MkPair', V1, V2}}))(V12))), case V13 of {'Idris.Prelude.Types.Left', E5} -> (fun (V14) -> {'Idris.Prelude.Types.Left', V14} end(E5)); {'Idris.Prelude.Types.Right', E6} -> (fun (V15) -> begin (V17 = (('Idris.Idris2.Core.Core':'un--traverse'('erased', 'erased', fun (V16) -> ('un--displayClause'(V5, V4, V3, V16)) end, V11))(V12))), case V17 of {'Idris.Prelude.Types.Left', E7} -> (fun (V18) -> {'Idris.Prelude.Types.Left', V18} end(E7)); {'Idris.Prelude.Types.Right', E8} -> (fun (V19) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'un--vsep'('erased', [V15 | V19]))} end(E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0, E1, E2, E3, E4)); _ -> fun (V20) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'('erased', ('Idris.Idris2.Core.Name':'dn--un--pretty_Pretty__Name'('erased', V0)), ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Util':'un--reflow'('erased', <<"is not a pattern matching definition"/utf8>>))))} end end.
'case--showInfo-3257'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10) -> case V10 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V11) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end end()); {'Idris.Prelude.Types.Just', E0} -> (fun (V12) -> fun (V13) -> begin (V41 = (('Idris.Idris2.Prelude.IO':'un--putStrLn'('erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V14) -> fun (V15) -> fun (V16) -> fun (V17) -> fun (V18) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor__IO'('erased', 'erased', V16, V17, V18)) end end end end end, fun (V19) -> fun (V20) -> fun (V21) -> V20 end end end, fun (V22) -> fun (V23) -> fun (V24) -> fun (V25) -> fun (V26) -> begin (V27 = (V24(V26))), begin (V28 = (V25(V26))), (V27(V28)) end end end end end end end}, fun (V29) -> fun (V30) -> fun (V31) -> fun (V32) -> fun (V33) -> begin (V34 = (V31(V33))), ((V32(V34))(V33)) end end end end end end, fun (V35) -> fun (V36) -> fun (V37) -> begin (V38 = (V36(V37))), (V38(V37)) end end end end}, fun (V39) -> fun (V40) -> V40 end end}, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"Compiled: "/utf8>>, ('Idris.Idris2.Core.CompileExpr':'dn--un--show_Show__CDef'(V12))))))(V13))), {'Idris.Prelude.Types.Right', V41} end end end(E0)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--24932-4375--in--un--replaceStr'(V0, V1, V2, V3, V4, V5, V6) -> case V6 of <<""/utf8>> -> <<""/utf8>>; _ -> ('case--proofSearch,replaceStr-4386'(V0, V1, V2, V3, V6, V5, V4, ('Idris.Idris2.Data.Strings':'un--isPrefixOf'(V4, V6)))) end.
'nested--33019-11538--in--un--prompt'(V0, V1, V2, V3, V4, V5) -> case V5 of {'Idris.Idris.Syntax.EvalTC'} -> (fun () -> <<"[tc] "/utf8>> end()); {'Idris.Idris.Syntax.NormaliseAll'} -> (fun () -> <<""/utf8>> end()); {'Idris.Idris.Syntax.Execute'} -> (fun () -> <<"[exec] "/utf8>> end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--30914-9522--in--un--nfun'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V7 of {'Idris.Idris.Syntax.NormaliseAll'} -> (fun () -> fun (V8) -> fun (V9) -> fun (V10) -> fun (V11) -> ('Idris.Idris2.Core.Normalise':'un--normaliseAll'(V5, V6, V8, V9, V10, V11)) end end end end end()); _ -> fun (V12) -> fun (V13) -> fun (V14) -> fun (V15) -> ('Idris.Idris2.Core.Normalise':'un--normalise'(V5, V6, V12, V13, V14, V15)) end end end end end.
'nested--33039-12276--in--un--makeSpace'(V0) -> ('Idris.Idris2.Prelude.Types':'un--pack'(('Idris.Idris2.Prelude.Types':'un--take'('erased', V0, ('Idris.Idris2.Data.Stream':'un--repeat'('erased', $ )))))).
'nested--25013-4446--in--un--insertInBlank'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V7 of [] -> [('Idris.Idris2.Parser.Unlit':'un--relit'(V6, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show__Name'(V4)), ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<" : "/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(V3, <<"\x{a}"/utf8>>)))))))) | []]; [E0 | E1] -> (fun (V8, V9) -> ('case--addMadeLemma,insertInBlank-4477'(V0, V1, V2, V3, V4, V5, V8, V9, V6, ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq__String'(('Idris.Idris2.Data.Strings':'un--trim'(V8)), <<""/utf8>>)))) end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--32808-11294--in--un--getLoad'(V0, V1, V2, V3) -> {'Idris.Prelude.Types.Just', (V2(('Idris.Idris2.Data.Strings':'un--trim'(('Idris.Idris2.Prelude.Types':'un--substr'(V1, ('Idris.Idris2.Prelude.Types.Strings':'un--length'(V3)), V3))))))}.
'nested--32808-11295--in--un--fnameCmd'(V0, V1, V2) -> case V1 of [] -> {'Idris.Prelude.Types.Nothing'}; [E0 | E1] -> (fun (V3, V4) -> case V3 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V5, V6) -> ('case--parseRepl,fnameCmd-11320'(V0, V5, V6, V4, V2, ('Idris.Idris2.Data.Strings':'un--isPrefixOf'(V5, V2)))) end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--30538-9169--in--un--execDecl'(V0, V1, V2, V3, V4, V5, V6) -> begin (V7 = (('Idris.Idris2.Idris.Desugar':'un--desugarDecl'(V2, V4, V3, V1, [], V5))(V6))), case V7 of {'Idris.Prelude.Types.Left', E0} -> (fun (V8) -> {'Idris.Prelude.Types.Left', V8} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V9) -> (('Idris.Idris2.Core.Core':'un--traverse_'('erased', 'erased', fun (V10) -> ('Idris.Idris2.TTImp.Elab.Check':'un--processDecl'([], V4, V1, V3, [], [], {'Idris.Core.Env.Nil'}, V10)) end, V9))(V6)) end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'nested--30914-9521--in--un--emode'(V0, V1, V2, V3, V4, V5, V6) -> case V6 of {'Idris.Idris.Syntax.EvalTC'} -> (fun () -> {'Idris.TTImp.Elab.Check.InType'} end()); _ -> {'Idris.TTImp.Elab.Check.InExpr'} end.
'nested--33039-12277--in--un--col'(V0, V1, V2, V3, V4) -> ('Idris.Idris2.Prelude.Types.Strings':'un--++'(V2, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('nested--33039-12276--in--un--makeSpace'(('Idris.Idris2.Prelude.Types':'un--minus'(V0, ('Idris.Idris2.Prelude.Types.Strings':'un--length'(V2)))))), ('Idris.Idris2.Prelude.Types.Strings':'un--++'(V3, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('nested--33039-12276--in--un--makeSpace'(('Idris.Idris2.Prelude.Types':'un--minus'(V1, ('Idris.Idris2.Prelude.Types.Strings':'un--length'(V3)))))), V4)))))))).
'nested--33039-12278--in--un--cmdInfo'(V0) -> case V0 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V1, V2) -> case V2 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V3, V4) -> ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<" "/utf8>>, ('nested--33039-12277--in--un--col'((1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))))))))), (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))))), ('Idris.Idris2.Core.Name.Namespace':'un--showSep'(<<" "/utf8>>, V1)), ('Idris.Idris2.Idris.Parser':'dn--un--show_Show__CmdArg'(V3)), V4)))) end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--25144-4563--in--un--addW'(V0, V1, V2, V3, V4, V5, V6) -> case V4 of 0 -> case V6 of [E2 | E3] -> (fun (V7, V8) -> ('Idris.Idris2.Prelude.Types.List':'un--++'('erased', ('Idris.Idris2.Data.List':'un--reverse'('erased', V5)), ('Idris.Idris2.Prelude.Types.List':'un--++'('erased', ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', fun (V9) -> ('Idris.Idris2.Parser.Unlit':'un--relit'(V3, V9)) end, V2)), V8)))) end(E2, E3)); [] -> []; _ -> ('erlang':'throw'("Error: Unreachable branch")) end; _ -> begin (V10 = (V4 - 1)), case V6 of [E0 | E1] -> (fun (V11, V12) -> ('nested--25144-4563--in--un--addW'(V0, V1, V2, V3, V10, [V11 | V5], V12)) end(E0, E1)); [] -> ('Idris.Idris2.Data.List':'un--reverse'('erased', V5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end.
'nested--25013-4447--in--un--addApp'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9) -> case V7 of 0 -> ('Idris.Idris2.Prelude.Types.List':'un--++'('erased', ('Idris.Idris2.Data.List':'un--reverse'('erased', ('nested--25013-4446--in--un--insertInBlank'(V0, V1, V2, V3, V4, V5, V6, V8)))), V9)); _ -> begin (V10 = (V7 - 1)), case V9 of [E0 | E1] -> (fun (V11, V12) -> ('nested--25013-4447--in--un--addApp'(V0, V1, V2, V3, V4, V5, V6, V10, [V11 | V8], V12)) end(E0, E1)); [] -> ('Idris.Idris2.Data.List':'un--reverse'('erased', V8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end.
'un--updateFile'(V0, V1, V2) -> begin (V31 = begin (V30 = (('Idris.Idris2.Erlang.Data.IORef':'un--readIORef'('erased', 'erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V3) -> fun (V4) -> fun (V5) -> fun (V6) -> fun (V7) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor__IO'('erased', 'erased', V5, V6, V7)) end end end end end, fun (V8) -> fun (V9) -> fun (V10) -> V9 end end end, fun (V11) -> fun (V12) -> fun (V13) -> fun (V14) -> fun (V15) -> begin (V16 = (V13(V15))), begin (V17 = (V14(V15))), (V16(V17)) end end end end end end end}, fun (V18) -> fun (V19) -> fun (V20) -> fun (V21) -> fun (V22) -> begin (V23 = (V20(V22))), ((V21(V23))(V22)) end end end end end end, fun (V24) -> fun (V25) -> fun (V26) -> begin (V27 = (V25(V26))), (V27(V26)) end end end end}, fun (V28) -> fun (V29) -> V29 end end}, V0))(V2))), {'Idris.Prelude.Types.Right', V30} end), case V31 of {'Idris.Prelude.Types.Left', E0} -> (fun (V32) -> {'Idris.Prelude.Types.Left', V32} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V33) -> (('case--updateFile-4194'(V1, V0, V33, case V33 of {'Idris.Idris.REPLOpts.MkREPLOpts', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15} -> (fun (V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47) -> V36 end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V2)) end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--showInfo'(V0, V1) -> case V1 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V2, V3) -> case V3 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V4, V5) -> fun (V6) -> begin (V84 = begin (V32 = ('Idris.Idris2.Core.Context':'un--toFullNames'('erased', V0, {'Idris.Core.Context.dn--un--__mkHasNames', fun (V7) -> fun (V8) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames__Def'(V7, V8)) end end, fun (V9) -> fun (V10) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames__Def'(V9, V10)) end end}, case V5 of {'Idris.Core.Context.MkGlobalDef', E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24} -> (fun (V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31) -> V28 end(E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V6))), case V32 of {'Idris.Prelude.Types.Left', E25} -> (fun (V33) -> {'Idris.Prelude.Types.Left', V33} end(E25)); {'Idris.Prelude.Types.Right', E26} -> (fun (V34) -> begin (V83 = (('Idris.Idris2.Prelude.IO':'un--putStrLn'('erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V35) -> fun (V36) -> fun (V37) -> fun (V38) -> fun (V39) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor__IO'('erased', 'erased', V37, V38, V39)) end end end end end, fun (V40) -> fun (V41) -> fun (V42) -> V41 end end end, fun (V43) -> fun (V44) -> fun (V45) -> fun (V46) -> fun (V47) -> begin (V48 = (V45(V47))), begin (V49 = (V46(V47))), (V48(V49)) end end end end end end end}, fun (V50) -> fun (V51) -> fun (V52) -> fun (V53) -> fun (V54) -> begin (V55 = (V52(V54))), ((V53(V55))(V54)) end end end end end end, fun (V56) -> fun (V57) -> fun (V58) -> begin (V59 = (V57(V58))), (V59(V58)) end end end end}, fun (V60) -> fun (V61) -> V61 end end}, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show__Name'(case V5 of {'Idris.Core.Context.MkGlobalDef', E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47} -> (fun (V62, V63, V64, V65, V66, V67, V68, V69, V70, V71, V72, V73, V74, V75, V76, V77, V78, V79, V80, V81, V82) -> V63 end(E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)), ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<" ==> "/utf8>>, ('Idris.Idris2.Core.Context':'dn--un--show_Show__Def'(V34))))))))(V6))), {'Idris.Prelude.Types.Right', V83} end end(E26)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V84 of {'Idris.Prelude.Types.Left', E48} -> (fun (V85) -> {'Idris.Prelude.Types.Left', V85} end(E48)); {'Idris.Prelude.Types.Right', E49} -> (fun (V86) -> begin (V136 = begin (V135 = (('Idris.Idris2.Prelude.IO':'un--putStrLn'('erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V87) -> fun (V88) -> fun (V89) -> fun (V90) -> fun (V91) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor__IO'('erased', 'erased', V89, V90, V91)) end end end end end, fun (V92) -> fun (V93) -> fun (V94) -> V93 end end end, fun (V95) -> fun (V96) -> fun (V97) -> fun (V98) -> fun (V99) -> begin (V100 = (V97(V99))), begin (V101 = (V98(V99))), (V100(V101)) end end end end end end end}, fun (V102) -> fun (V103) -> fun (V104) -> fun (V105) -> fun (V106) -> begin (V107 = (V104(V106))), ((V105(V107))(V106)) end end end end end end, fun (V108) -> fun (V109) -> fun (V110) -> begin (V111 = (V109(V110))), (V111(V110)) end end end end}, fun (V112) -> fun (V113) -> V113 end end}, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--show_Show__ZeroOneOmega'(case V5 of {'Idris.Core.Context.MkGlobalDef', E50, E51, E52, E53, E54, E55, E56, E57, E58, E59, E60, E61, E62, E63, E64, E65, E66, E67, E68, E69, E70} -> (fun (V114, V115, V116, V117, V118, V119, V120, V121, V122, V123, V124, V125, V126, V127, V128, V129, V130, V131, V132, V133, V134) -> V121 end(E50, E51, E52, E53, E54, E55, E56, E57, E58, E59, E60, E61, E62, E63, E64, E65, E66, E67, E68, E69, E70)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))))(V6))), {'Idris.Prelude.Types.Right', V135} end), case V136 of {'Idris.Prelude.Types.Left', E71} -> (fun (V137) -> {'Idris.Prelude.Types.Left', V137} end(E71)); {'Idris.Prelude.Types.Right', E72} -> (fun (V138) -> begin (V191 = begin (V190 = (('Idris.Idris2.Prelude.IO':'un--putStrLn'('erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V139) -> fun (V140) -> fun (V141) -> fun (V142) -> fun (V143) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor__IO'('erased', 'erased', V141, V142, V143)) end end end end end, fun (V144) -> fun (V145) -> fun (V146) -> V145 end end end, fun (V147) -> fun (V148) -> fun (V149) -> fun (V150) -> fun (V151) -> begin (V152 = (V149(V151))), begin (V153 = (V150(V151))), (V152(V153)) end end end end end end end}, fun (V154) -> fun (V155) -> fun (V156) -> fun (V157) -> fun (V158) -> begin (V159 = (V156(V158))), ((V157(V159))(V158)) end end end end end end, fun (V160) -> fun (V161) -> fun (V162) -> begin (V163 = (V161(V162))), (V163(V162)) end end end end}, fun (V164) -> fun (V165) -> V165 end end}, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"Erasable args: "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show__(List $a)'('erased', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V166) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show__Nat'(V166)) end, fun (V167) -> fun (V168) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show__Nat'(V167, V168)) end end}, case V5 of {'Idris.Core.Context.MkGlobalDef', E73, E74, E75, E76, E77, E78, E79, E80, E81, E82, E83, E84, E85, E86, E87, E88, E89, E90, E91, E92, E93} -> (fun (V169, V170, V171, V172, V173, V174, V175, V176, V177, V178, V179, V180, V181, V182, V183, V184, V185, V186, V187, V188, V189) -> V172 end(E73, E74, E75, E76, E77, E78, E79, E80, E81, E82, E83, E84, E85, E86, E87, E88, E89, E90, E91, E92, E93)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))))))(V6))), {'Idris.Prelude.Types.Right', V190} end), case V191 of {'Idris.Prelude.Types.Left', E94} -> (fun (V192) -> {'Idris.Prelude.Types.Left', V192} end(E94)); {'Idris.Prelude.Types.Right', E95} -> (fun (V193) -> begin (V246 = begin (V245 = (('Idris.Idris2.Prelude.IO':'un--putStrLn'('erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V194) -> fun (V195) -> fun (V196) -> fun (V197) -> fun (V198) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor__IO'('erased', 'erased', V196, V197, V198)) end end end end end, fun (V199) -> fun (V200) -> fun (V201) -> V200 end end end, fun (V202) -> fun (V203) -> fun (V204) -> fun (V205) -> fun (V206) -> begin (V207 = (V204(V206))), begin (V208 = (V205(V206))), (V207(V208)) end end end end end end end}, fun (V209) -> fun (V210) -> fun (V211) -> fun (V212) -> fun (V213) -> begin (V214 = (V211(V213))), ((V212(V214))(V213)) end end end end end end, fun (V215) -> fun (V216) -> fun (V217) -> begin (V218 = (V216(V217))), (V218(V217)) end end end end}, fun (V219) -> fun (V220) -> V220 end end}, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"Detaggable arg types: "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show__(List $a)'('erased', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V221) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show__Nat'(V221)) end, fun (V222) -> fun (V223) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show__Nat'(V222, V223)) end end}, case V5 of {'Idris.Core.Context.MkGlobalDef', E96, E97, E98, E99, E100, E101, E102, E103, E104, E105, E106, E107, E108, E109, E110, E111, E112, E113, E114, E115, E116} -> (fun (V224, V225, V226, V227, V228, V229, V230, V231, V232, V233, V234, V235, V236, V237, V238, V239, V240, V241, V242, V243, V244) -> V228 end(E96, E97, E98, E99, E100, E101, E102, E103, E104, E105, E106, E107, E108, E109, E110, E111, E112, E113, E114, E115, E116)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))))))(V6))), {'Idris.Prelude.Types.Right', V245} end), case V246 of {'Idris.Prelude.Types.Left', E117} -> (fun (V247) -> {'Idris.Prelude.Types.Left', V247} end(E117)); {'Idris.Prelude.Types.Right', E118} -> (fun (V248) -> begin (V301 = begin (V300 = (('Idris.Idris2.Prelude.IO':'un--putStrLn'('erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V249) -> fun (V250) -> fun (V251) -> fun (V252) -> fun (V253) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor__IO'('erased', 'erased', V251, V252, V253)) end end end end end, fun (V254) -> fun (V255) -> fun (V256) -> V255 end end end, fun (V257) -> fun (V258) -> fun (V259) -> fun (V260) -> fun (V261) -> begin (V262 = (V259(V261))), begin (V263 = (V260(V261))), (V262(V263)) end end end end end end end}, fun (V264) -> fun (V265) -> fun (V266) -> fun (V267) -> fun (V268) -> begin (V269 = (V266(V268))), ((V267(V269))(V268)) end end end end end end, fun (V270) -> fun (V271) -> fun (V272) -> begin (V273 = (V271(V272))), (V273(V272)) end end end end}, fun (V274) -> fun (V275) -> V275 end end}, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"Specialise args: "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show__(List $a)'('erased', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V276) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show__Nat'(V276)) end, fun (V277) -> fun (V278) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show__Nat'(V277, V278)) end end}, case V5 of {'Idris.Core.Context.MkGlobalDef', E119, E120, E121, E122, E123, E124, E125, E126, E127, E128, E129, E130, E131, E132, E133, E134, E135, E136, E137, E138, E139} -> (fun (V279, V280, V281, V282, V283, V284, V285, V286, V287, V288, V289, V290, V291, V292, V293, V294, V295, V296, V297, V298, V299) -> V284 end(E119, E120, E121, E122, E123, E124, E125, E126, E127, E128, E129, E130, E131, E132, E133, E134, E135, E136, E137, E138, E139)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))))))(V6))), {'Idris.Prelude.Types.Right', V300} end), case V301 of {'Idris.Prelude.Types.Left', E140} -> (fun (V302) -> {'Idris.Prelude.Types.Left', V302} end(E140)); {'Idris.Prelude.Types.Right', E141} -> (fun (V303) -> begin (V356 = begin (V355 = (('Idris.Idris2.Prelude.IO':'un--putStrLn'('erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V304) -> fun (V305) -> fun (V306) -> fun (V307) -> fun (V308) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor__IO'('erased', 'erased', V306, V307, V308)) end end end end end, fun (V309) -> fun (V310) -> fun (V311) -> V310 end end end, fun (V312) -> fun (V313) -> fun (V314) -> fun (V315) -> fun (V316) -> begin (V317 = (V314(V316))), begin (V318 = (V315(V316))), (V317(V318)) end end end end end end end}, fun (V319) -> fun (V320) -> fun (V321) -> fun (V322) -> fun (V323) -> begin (V324 = (V321(V323))), ((V322(V324))(V323)) end end end end end end, fun (V325) -> fun (V326) -> fun (V327) -> begin (V328 = (V326(V327))), (V328(V327)) end end end end}, fun (V329) -> fun (V330) -> V330 end end}, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"Inferrable args: "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show__(List $a)'('erased', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V331) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show__Nat'(V331)) end, fun (V332) -> fun (V333) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show__Nat'(V332, V333)) end end}, case V5 of {'Idris.Core.Context.MkGlobalDef', E142, E143, E144, E145, E146, E147, E148, E149, E150, E151, E152, E153, E154, E155, E156, E157, E158, E159, E160, E161, E162} -> (fun (V334, V335, V336, V337, V338, V339, V340, V341, V342, V343, V344, V345, V346, V347, V348, V349, V350, V351, V352, V353, V354) -> V340 end(E142, E143, E144, E145, E146, E147, E148, E149, E150, E151, E152, E153, E154, E155, E156, E157, E158, E159, E160, E161, E162)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))))))(V6))), {'Idris.Prelude.Types.Right', V355} end), case V356 of {'Idris.Prelude.Types.Left', E163} -> (fun (V357) -> {'Idris.Prelude.Types.Left', V357} end(E163)); {'Idris.Prelude.Types.Right', E164} -> (fun (V358) -> begin (V380 = (('case--showInfo-3257'(V2, V4, V5, V0, V86, V138, V193, V248, V303, V358, case V5 of {'Idris.Core.Context.MkGlobalDef', E165, E166, E167, E168, E169, E170, E171, E172, E173, E174, E175, E176, E177, E178, E179, E180, E181, E182, E183, E184, E185} -> (fun (V359, V360, V361, V362, V363, V364, V365, V366, V367, V368, V369, V370, V371, V372, V373, V374, V375, V376, V377, V378, V379) -> V377 end(E165, E166, E167, E168, E169, E170, E171, E172, E173, E174, E175, E176, E177, E178, E179, E180, E181, E182, E183, E184, E185)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V6))), case V380 of {'Idris.Prelude.Types.Left', E186} -> (fun (V381) -> {'Idris.Prelude.Types.Left', V381} end(E186)); {'Idris.Prelude.Types.Right', E187} -> (fun (V382) -> begin (V418 = begin (V384 = (('Idris.Idris2.Core.Core':'un--traverse'('erased', 'erased', fun (V383) -> ('Idris.Idris2.Core.Context':'un--getFullName'(V0, V383)) end, ('Idris.Idris2.Data.NameMap':'un--keys'('erased', ('Idris.Idris2.Core.Context':'un--refersTo'(V5))))))(V6))), case V384 of {'Idris.Prelude.Types.Left', E188} -> (fun (V385) -> {'Idris.Prelude.Types.Left', V385} end(E188)); {'Idris.Prelude.Types.Right', E189} -> (fun (V386) -> begin (V417 = (('Idris.Idris2.Prelude.IO':'un--putStrLn'('erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V387) -> fun (V388) -> fun (V389) -> fun (V390) -> fun (V391) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor__IO'('erased', 'erased', V389, V390, V391)) end end end end end, fun (V392) -> fun (V393) -> fun (V394) -> V393 end end end, fun (V395) -> fun (V396) -> fun (V397) -> fun (V398) -> fun (V399) -> begin (V400 = (V397(V399))), begin (V401 = (V398(V399))), (V400(V401)) end end end end end end end}, fun (V402) -> fun (V403) -> fun (V404) -> fun (V405) -> fun (V406) -> begin (V407 = (V404(V406))), ((V405(V407))(V406)) end end end end end end, fun (V408) -> fun (V409) -> fun (V410) -> begin (V411 = (V409(V410))), (V411(V410)) end end end end}, fun (V412) -> fun (V413) -> V413 end end}, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"Refers to: "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show__(List $a)'('erased', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V414) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show__Name'(V414)) end, fun (V415) -> fun (V416) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show__Name'(V415, V416)) end end}, V386))))))(V6))), {'Idris.Prelude.Types.Right', V417} end end(E189)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V418 of {'Idris.Prelude.Types.Left', E190} -> (fun (V419) -> {'Idris.Prelude.Types.Left', V419} end(E190)); {'Idris.Prelude.Types.Right', E191} -> (fun (V420) -> begin (V456 = begin (V422 = (('Idris.Idris2.Core.Core':'un--traverse'('erased', 'erased', fun (V421) -> ('Idris.Idris2.Core.Context':'un--getFullName'(V0, V421)) end, ('Idris.Idris2.Data.NameMap':'un--keys'('erased', ('Idris.Idris2.Core.Context':'un--refersToRuntime'(V5))))))(V6))), case V422 of {'Idris.Prelude.Types.Left', E192} -> (fun (V423) -> {'Idris.Prelude.Types.Left', V423} end(E192)); {'Idris.Prelude.Types.Right', E193} -> (fun (V424) -> begin (V455 = (('Idris.Idris2.Prelude.IO':'un--putStrLn'('erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V425) -> fun (V426) -> fun (V427) -> fun (V428) -> fun (V429) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor__IO'('erased', 'erased', V427, V428, V429)) end end end end end, fun (V430) -> fun (V431) -> fun (V432) -> V431 end end end, fun (V433) -> fun (V434) -> fun (V435) -> fun (V436) -> fun (V437) -> begin (V438 = (V435(V437))), begin (V439 = (V436(V437))), (V438(V439)) end end end end end end end}, fun (V440) -> fun (V441) -> fun (V442) -> fun (V443) -> fun (V444) -> begin (V445 = (V442(V444))), ((V443(V445))(V444)) end end end end end end, fun (V446) -> fun (V447) -> fun (V448) -> begin (V449 = (V447(V448))), (V449(V448)) end end end end}, fun (V450) -> fun (V451) -> V451 end end}, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"Refers to (runtime): "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show__(List $a)'('erased', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V452) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show__Name'(V452)) end, fun (V453) -> fun (V454) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show__Name'(V453, V454)) end end}, V424))))))(V6))), {'Idris.Prelude.Types.Right', V455} end end(E193)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V456 of {'Idris.Prelude.Types.Left', E194} -> (fun (V457) -> {'Idris.Prelude.Types.Left', V457} end(E194)); {'Idris.Prelude.Types.Right', E195} -> (fun (V458) -> begin (V511 = begin (V510 = (('Idris.Idris2.Prelude.IO':'un--putStrLn'('erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V459) -> fun (V460) -> fun (V461) -> fun (V462) -> fun (V463) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor__IO'('erased', 'erased', V461, V462, V463)) end end end end end, fun (V464) -> fun (V465) -> fun (V466) -> V465 end end end, fun (V467) -> fun (V468) -> fun (V469) -> fun (V470) -> fun (V471) -> begin (V472 = (V469(V471))), begin (V473 = (V470(V471))), (V472(V473)) end end end end end end end}, fun (V474) -> fun (V475) -> fun (V476) -> fun (V477) -> fun (V478) -> begin (V479 = (V476(V478))), ((V477(V479))(V478)) end end end end end end, fun (V480) -> fun (V481) -> fun (V482) -> begin (V483 = (V481(V482))), (V483(V482)) end end end end}, fun (V484) -> fun (V485) -> V485 end end}, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"Flags: "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show__(List $a)'('erased', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V486) -> ('Idris.Idris2.Core.Context':'dn--un--show_Show__DefFlag'(V486)) end, fun (V487) -> fun (V488) -> ('Idris.Idris2.Core.Context':'dn--un--showPrec_Show__DefFlag'(V487, V488)) end end}, case V5 of {'Idris.Core.Context.MkGlobalDef', E196, E197, E198, E199, E200, E201, E202, E203, E204, E205, E206, E207, E208, E209, E210, E211, E212, E213, E214, E215, E216} -> (fun (V489, V490, V491, V492, V493, V494, V495, V496, V497, V498, V499, V500, V501, V502, V503, V504, V505, V506, V507, V508, V509) -> V500 end(E196, E197, E198, E199, E200, E201, E202, E203, E204, E205, E206, E207, E208, E209, E210, E211, E212, E213, E214, E215, E216)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))))))(V6))), {'Idris.Prelude.Types.Right', V510} end), case V511 of {'Idris.Prelude.Types.Left', E217} -> (fun (V512) -> {'Idris.Prelude.Types.Left', V512} end(E217)); {'Idris.Prelude.Types.Right', E218} -> (fun (V513) -> begin (V543 = (('Idris.Idris2.Core.Core':'un--traverse'('erased', 'erased', fun (V514) -> fun (V515) -> ('Idris.Idris2.Core.Context':'un--toFullNames'('erased', V0, {'Idris.Core.Context.dn--un--__mkHasNames', fun (V516) -> fun (V517) -> fun (V518) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames__SCCall'(V516, V517, V518)) end end end, fun (V519) -> fun (V520) -> fun (V521) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames__SCCall'(V519, V520, V521)) end end end}, V514, V515)) end end, case V5 of {'Idris.Core.Context.MkGlobalDef', E219, E220, E221, E222, E223, E224, E225, E226, E227, E228, E229, E230, E231, E232, E233, E234, E235, E236, E237, E238, E239} -> (fun (V522, V523, V524, V525, V526, V527, V528, V529, V530, V531, V532, V533, V534, V535, V536, V537, V538, V539, V540, V541, V542) -> V542 end(E219, E220, E221, E222, E223, E224, E225, E226, E227, E228, E229, E230, E231, E232, E233, E234, E235, E236, E237, E238, E239)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V6))), case V543 of {'Idris.Prelude.Types.Left', E240} -> (fun (V544) -> {'Idris.Prelude.Types.Left', V544} end(E240)); {'Idris.Prelude.Types.Right', E241} -> (fun (V545) -> case ('Idris.Idris2.Prelude.Basics':'un--not'(('Idris.Idris2.Data.List':'un--isNil'('erased', case V5 of {'Idris.Core.Context.MkGlobalDef', E246, E247, E248, E249, E250, E251, E252, E253, E254, E255, E256, E257, E258, E259, E260, E261, E262, E263, E264, E265, E266} -> (fun (V546, V547, V548, V549, V550, V551, V552, V553, V554, V555, V556, V557, V558, V559, V560, V561, V562, V563, V564, V565, V566) -> V566 end(E246, E247, E248, E249, E250, E251, E252, E253, E254, E255, E256, E257, E258, E259, E260, E261, E262, E263, E264, E265, E266)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)))) of 0 -> ((begin (V605 = ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', fun (V567) -> ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show__Name'(case V567 of {'Idris.Core.Context.MkSCCall', E242, E243} -> (fun (V568, V569) -> V568 end(E242, E243)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)), ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<": "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show__(List $a)'('erased', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V570) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show__(Maybe $a)'('erased', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V571) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show__(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V572) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show__Nat'(V572)) end, fun (V573) -> fun (V574) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show__Nat'(V573, V574)) end end}, {'Idris.Prelude.Show.dn--un--__mkShow', fun (V575) -> ('Idris.Idris2.Core.Context':'dn--un--show_Show__SizeChange'(V575)) end, fun (V576) -> fun (V577) -> ('Idris.Idris2.Core.Context':'dn--un--showPrec_Show__SizeChange'(V576, V577)) end end}}, V571)) end, fun (V578) -> fun (V579) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show__(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V580) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show__Nat'(V580)) end, fun (V581) -> fun (V582) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show__Nat'(V581, V582)) end end}, {'Idris.Prelude.Show.dn--un--__mkShow', fun (V583) -> ('Idris.Idris2.Core.Context':'dn--un--show_Show__SizeChange'(V583)) end, fun (V584) -> fun (V585) -> ('Idris.Idris2.Core.Context':'dn--un--showPrec_Show__SizeChange'(V584, V585)) end end}}, V578, V579)) end end}, V570)) end, fun (V586) -> fun (V587) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show__(Maybe $a)'('erased', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V588) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show__(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V589) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show__Nat'(V589)) end, fun (V590) -> fun (V591) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show__Nat'(V590, V591)) end end}, {'Idris.Prelude.Show.dn--un--__mkShow', fun (V592) -> ('Idris.Idris2.Core.Context':'dn--un--show_Show__SizeChange'(V592)) end, fun (V593) -> fun (V594) -> ('Idris.Idris2.Core.Context':'dn--un--showPrec_Show__SizeChange'(V593, V594)) end end}}, V588)) end, fun (V595) -> fun (V596) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show__(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V597) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show__Nat'(V597)) end, fun (V598) -> fun (V599) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show__Nat'(V598, V599)) end end}, {'Idris.Prelude.Show.dn--un--__mkShow', fun (V600) -> ('Idris.Idris2.Core.Context':'dn--un--show_Show__SizeChange'(V600)) end, fun (V601) -> fun (V602) -> ('Idris.Idris2.Core.Context':'dn--un--showPrec_Show__SizeChange'(V601, V602)) end end}}, V595, V596)) end end}, V586, V587)) end end}, case V567 of {'Idris.Core.Context.MkSCCall', E244, E245} -> (fun (V603, V604) -> V604 end(E244, E245)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)))))) end, V545))), fun () -> fun (V606) -> begin (V634 = (('Idris.Idris2.Prelude.IO':'un--putStrLn'('erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V607) -> fun (V608) -> fun (V609) -> fun (V610) -> fun (V611) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor__IO'('erased', 'erased', V609, V610, V611)) end end end end end, fun (V612) -> fun (V613) -> fun (V614) -> V613 end end end, fun (V615) -> fun (V616) -> fun (V617) -> fun (V618) -> fun (V619) -> begin (V620 = (V617(V619))), begin (V621 = (V618(V619))), (V620(V621)) end end end end end end end}, fun (V622) -> fun (V623) -> fun (V624) -> fun (V625) -> fun (V626) -> begin (V627 = (V624(V626))), ((V625(V627))(V626)) end end end end end end, fun (V628) -> fun (V629) -> fun (V630) -> begin (V631 = (V629(V630))), (V631(V630)) end end end end}, fun (V632) -> fun (V633) -> V633 end end}, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"Size change: "/utf8>>, ('Idris.Idris2.Core.Name.Namespace':'un--showSep'(<<", "/utf8>>, V605))))))(V606))), {'Idris.Prelude.Types.Right', V634} end end end end())(V6)); 1 -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E241)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E218)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E195)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E191)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E187)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E164)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E141)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E118)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E95)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E72)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E49)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--setOpt'(V0, V1, V2) -> case V2 of {'Idris.Idris.Syntax.ShowImplicits', E0} -> (fun (V3) -> fun (V4) -> begin (V5 = ('Idris.Idris2.Core.Context':'un--getPPrint'(V0, V4))), case V5 of {'Idris.Prelude.Types.Left', E1} -> (fun (V6) -> {'Idris.Prelude.Types.Left', V6} end(E1)); {'Idris.Prelude.Types.Right', E2} -> (fun (V7) -> ('Idris.Idris2.Core.Context':'un--setPPrint'(V0, case V7 of {'Idris.Core.Options.MkPPOpts', E3, E4, E5} -> (fun (V8, V9, V10) -> {'Idris.Core.Options.MkPPOpts', V3, V9, V10} end(E3, E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V4)) end(E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0)); {'Idris.Idris.Syntax.ShowNamespace', E6} -> (fun (V11) -> fun (V12) -> begin (V13 = ('Idris.Idris2.Core.Context':'un--getPPrint'(V0, V12))), case V13 of {'Idris.Prelude.Types.Left', E7} -> (fun (V14) -> {'Idris.Prelude.Types.Left', V14} end(E7)); {'Idris.Prelude.Types.Right', E8} -> (fun (V15) -> ('Idris.Idris2.Core.Context':'un--setPPrint'(V0, case V15 of {'Idris.Core.Options.MkPPOpts', E9, E10, E11} -> (fun (V16, V17, V18) -> {'Idris.Core.Options.MkPPOpts', V16, V17, V11} end(E9, E10, E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V12)) end(E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E6)); {'Idris.Idris.Syntax.ShowTypes', E12} -> (fun (V19) -> fun (V20) -> begin (V49 = begin (V48 = (('Idris.Idris2.Erlang.Data.IORef':'un--readIORef'('erased', 'erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V21) -> fun (V22) -> fun (V23) -> fun (V24) -> fun (V25) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor__IO'('erased', 'erased', V23, V24, V25)) end end end end end, fun (V26) -> fun (V27) -> fun (V28) -> V27 end end end, fun (V29) -> fun (V30) -> fun (V31) -> fun (V32) -> fun (V33) -> begin (V34 = (V31(V33))), begin (V35 = (V32(V33))), (V34(V35)) end end end end end end end}, fun (V36) -> fun (V37) -> fun (V38) -> fun (V39) -> fun (V40) -> begin (V41 = (V38(V40))), ((V39(V41))(V40)) end end end end end end, fun (V42) -> fun (V43) -> fun (V44) -> begin (V45 = (V43(V44))), (V45(V44)) end end end end}, fun (V46) -> fun (V47) -> V47 end end}, V1))(V20))), {'Idris.Prelude.Types.Right', V48} end), case V49 of {'Idris.Prelude.Types.Left', E13} -> (fun (V50) -> {'Idris.Prelude.Types.Left', V50} end(E13)); {'Idris.Prelude.Types.Right', E14} -> (fun (V51) -> begin (V93 = (('Idris.Idris2.Erlang.Data.IORef':'un--writeIORef'('erased', 'erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V52) -> fun (V53) -> fun (V54) -> fun (V55) -> fun (V56) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor__IO'('erased', 'erased', V54, V55, V56)) end end end end end, fun (V57) -> fun (V58) -> fun (V59) -> V58 end end end, fun (V60) -> fun (V61) -> fun (V62) -> fun (V63) -> fun (V64) -> begin (V65 = (V62(V64))), begin (V66 = (V63(V64))), (V65(V66)) end end end end end end end}, fun (V67) -> fun (V68) -> fun (V69) -> fun (V70) -> fun (V71) -> begin (V72 = (V69(V71))), ((V70(V72))(V71)) end end end end end end, fun (V73) -> fun (V74) -> fun (V75) -> begin (V76 = (V74(V75))), (V76(V75)) end end end end}, fun (V77) -> fun (V78) -> V78 end end}, V1, case V51 of {'Idris.Idris.REPLOpts.MkREPLOpts', E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28} -> (fun (V79, V80, V81, V82, V83, V84, V85, V86, V87, V88, V89, V90, V91, V92) -> {'Idris.Idris.REPLOpts.MkREPLOpts', V19, V80, V81, V82, V83, V84, V85, V86, V87, V88, V89, V90, V91, V92} end(E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V20))), {'Idris.Prelude.Types.Right', V93} end end(E14)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E12)); {'Idris.Idris.Syntax.EvalMode', E29} -> (fun (V94) -> fun (V95) -> begin (V124 = begin (V123 = (('Idris.Idris2.Erlang.Data.IORef':'un--readIORef'('erased', 'erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V96) -> fun (V97) -> fun (V98) -> fun (V99) -> fun (V100) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor__IO'('erased', 'erased', V98, V99, V100)) end end end end end, fun (V101) -> fun (V102) -> fun (V103) -> V102 end end end, fun (V104) -> fun (V105) -> fun (V106) -> fun (V107) -> fun (V108) -> begin (V109 = (V106(V108))), begin (V110 = (V107(V108))), (V109(V110)) end end end end end end end}, fun (V111) -> fun (V112) -> fun (V113) -> fun (V114) -> fun (V115) -> begin (V116 = (V113(V115))), ((V114(V116))(V115)) end end end end end end, fun (V117) -> fun (V118) -> fun (V119) -> begin (V120 = (V118(V119))), (V120(V119)) end end end end}, fun (V121) -> fun (V122) -> V122 end end}, V1))(V95))), {'Idris.Prelude.Types.Right', V123} end), case V124 of {'Idris.Prelude.Types.Left', E30} -> (fun (V125) -> {'Idris.Prelude.Types.Left', V125} end(E30)); {'Idris.Prelude.Types.Right', E31} -> (fun (V126) -> begin (V168 = (('Idris.Idris2.Erlang.Data.IORef':'un--writeIORef'('erased', 'erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V127) -> fun (V128) -> fun (V129) -> fun (V130) -> fun (V131) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor__IO'('erased', 'erased', V129, V130, V131)) end end end end end, fun (V132) -> fun (V133) -> fun (V134) -> V133 end end end, fun (V135) -> fun (V136) -> fun (V137) -> fun (V138) -> fun (V139) -> begin (V140 = (V137(V139))), begin (V141 = (V138(V139))), (V140(V141)) end end end end end end end}, fun (V142) -> fun (V143) -> fun (V144) -> fun (V145) -> fun (V146) -> begin (V147 = (V144(V146))), ((V145(V147))(V146)) end end end end end end, fun (V148) -> fun (V149) -> fun (V150) -> begin (V151 = (V149(V150))), (V151(V150)) end end end end}, fun (V152) -> fun (V153) -> V153 end end}, V1, case V126 of {'Idris.Idris.REPLOpts.MkREPLOpts', E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45} -> (fun (V154, V155, V156, V157, V158, V159, V160, V161, V162, V163, V164, V165, V166, V167) -> {'Idris.Idris.REPLOpts.MkREPLOpts', V154, V94, V156, V157, V158, V159, V160, V161, V162, V163, V164, V165, V166, V167} end(E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V95))), {'Idris.Prelude.Types.Right', V168} end end(E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E29)); {'Idris.Idris.Syntax.Editor', E46} -> (fun (V169) -> fun (V170) -> begin (V199 = begin (V198 = (('Idris.Idris2.Erlang.Data.IORef':'un--readIORef'('erased', 'erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V171) -> fun (V172) -> fun (V173) -> fun (V174) -> fun (V175) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor__IO'('erased', 'erased', V173, V174, V175)) end end end end end, fun (V176) -> fun (V177) -> fun (V178) -> V177 end end end, fun (V179) -> fun (V180) -> fun (V181) -> fun (V182) -> fun (V183) -> begin (V184 = (V181(V183))), begin (V185 = (V182(V183))), (V184(V185)) end end end end end end end}, fun (V186) -> fun (V187) -> fun (V188) -> fun (V189) -> fun (V190) -> begin (V191 = (V188(V190))), ((V189(V191))(V190)) end end end end end end, fun (V192) -> fun (V193) -> fun (V194) -> begin (V195 = (V193(V194))), (V195(V194)) end end end end}, fun (V196) -> fun (V197) -> V197 end end}, V1))(V170))), {'Idris.Prelude.Types.Right', V198} end), case V199 of {'Idris.Prelude.Types.Left', E47} -> (fun (V200) -> {'Idris.Prelude.Types.Left', V200} end(E47)); {'Idris.Prelude.Types.Right', E48} -> (fun (V201) -> begin (V243 = (('Idris.Idris2.Erlang.Data.IORef':'un--writeIORef'('erased', 'erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V202) -> fun (V203) -> fun (V204) -> fun (V205) -> fun (V206) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor__IO'('erased', 'erased', V204, V205, V206)) end end end end end, fun (V207) -> fun (V208) -> fun (V209) -> V208 end end end, fun (V210) -> fun (V211) -> fun (V212) -> fun (V213) -> fun (V214) -> begin (V215 = (V212(V214))), begin (V216 = (V213(V214))), (V215(V216)) end end end end end end end}, fun (V217) -> fun (V218) -> fun (V219) -> fun (V220) -> fun (V221) -> begin (V222 = (V219(V221))), ((V220(V222))(V221)) end end end end end end, fun (V223) -> fun (V224) -> fun (V225) -> begin (V226 = (V224(V225))), (V226(V225)) end end end end}, fun (V227) -> fun (V228) -> V228 end end}, V1, case V201 of {'Idris.Idris.REPLOpts.MkREPLOpts', E49, E50, E51, E52, E53, E54, E55, E56, E57, E58, E59, E60, E61, E62} -> (fun (V229, V230, V231, V232, V233, V234, V235, V236, V237, V238, V239, V240, V241, V242) -> {'Idris.Idris.REPLOpts.MkREPLOpts', V229, V230, V231, V232, V233, V169, V235, V236, V237, V238, V239, V240, V241, V242} end(E49, E50, E51, E52, E53, E54, E55, E56, E57, E58, E59, E60, E61, E62)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V170))), {'Idris.Prelude.Types.Right', V243} end end(E48)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E46)); {'Idris.Idris.Syntax.CG', E63} -> (fun (V244) -> fun (V245) -> begin (V274 = begin (V273 = (('Idris.Idris2.Erlang.Data.IORef':'un--readIORef'('erased', 'erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V246) -> fun (V247) -> fun (V248) -> fun (V249) -> fun (V250) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor__IO'('erased', 'erased', V248, V249, V250)) end end end end end, fun (V251) -> fun (V252) -> fun (V253) -> V252 end end end, fun (V254) -> fun (V255) -> fun (V256) -> fun (V257) -> fun (V258) -> begin (V259 = (V256(V258))), begin (V260 = (V257(V258))), (V259(V260)) end end end end end end end}, fun (V261) -> fun (V262) -> fun (V263) -> fun (V264) -> fun (V265) -> begin (V266 = (V263(V265))), ((V264(V266))(V265)) end end end end end end, fun (V267) -> fun (V268) -> fun (V269) -> begin (V270 = (V268(V269))), (V270(V269)) end end end end}, fun (V271) -> fun (V272) -> V272 end end}, V0))(V245))), {'Idris.Prelude.Types.Right', V273} end), case V274 of {'Idris.Prelude.Types.Left', E64} -> (fun (V275) -> {'Idris.Prelude.Types.Left', V275} end(E64)); {'Idris.Prelude.Types.Right', E65} -> (fun (V276) -> (('case--setOpt-3864'(V244, V1, V0, V276, ('Idris.Idris2.Core.Options':'un--getCG'(case V276 of {'Idris.Core.Context.MkDefs', E66, E67, E68, E69, E70, E71, E72, E73, E74, E75, E76, E77, E78, E79, E80, E81, E82, E83, E84, E85, E86, E87, E88, E89, E90, E91} -> (fun (V277, V278, V279, V280, V281, V282, V283, V284, V285, V286, V287, V288, V289, V290, V291, V292, V293, V294, V295, V296, V297, V298, V299, V300, V301, V302) -> V281 end(E66, E67, E68, E69, E70, E71, E72, E73, E74, E75, E76, E77, E78, E79, E80, E81, E82, E83, E84, E85, E86, E87, E88, E89, E90, E91)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V244))))(V245)) end(E65)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E63)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--rtrim'(V0) -> ('Idris.Idris2.Prelude.Types':'un--reverse'(('Idris.Idris2.Data.Strings':'un--ltrim'(('Idris.Idris2.Prelude.Types':'un--reverse'(V0)))))).
'un--replCmd'(V0, V1, V2, V3, V4, V5) -> case V5 of <<""/utf8>> -> fun (V6) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end; _ -> fun (V7) -> begin (V8 = (('un--interpret'(V0, V1, V2, V3, V4, V5))(V7))), case V8 of {'Idris.Prelude.Types.Left', E0} -> (fun (V9) -> {'Idris.Prelude.Types.Left', V9} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V10) -> (('un--displayResult'(V0, V1, V2, V3, V4, V10))(V7)) end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end.
'un--repl'(V0, V1, V2, V3, V4, V5) -> begin (V6 = ('Idris.Idris2.Core.Context':'un--getNS'(V0, V5))), case V6 of {'Idris.Prelude.Types.Left', E0} -> (fun (V7) -> {'Idris.Prelude.Types.Left', V7} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V8) -> begin (V37 = begin (V36 = (('Idris.Idris2.Erlang.Data.IORef':'un--readIORef'('erased', 'erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V9) -> fun (V10) -> fun (V11) -> fun (V12) -> fun (V13) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor__IO'('erased', 'erased', V11, V12, V13)) end end end end end, fun (V14) -> fun (V15) -> fun (V16) -> V15 end end end, fun (V17) -> fun (V18) -> fun (V19) -> fun (V20) -> fun (V21) -> begin (V22 = (V19(V21))), begin (V23 = (V20(V21))), (V22(V23)) end end end end end end end}, fun (V24) -> fun (V25) -> fun (V26) -> fun (V27) -> fun (V28) -> begin (V29 = (V26(V28))), ((V27(V29))(V28)) end end end end end end, fun (V30) -> fun (V31) -> fun (V32) -> begin (V33 = (V31(V32))), (V33(V32)) end end end end}, fun (V34) -> fun (V35) -> V35 end end}, V4))(V5))), {'Idris.Prelude.Types.Right', V36} end), case V37 of {'Idris.Prelude.Types.Left', E2} -> (fun (V38) -> {'Idris.Prelude.Types.Left', V38} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V39) -> begin (V82 = begin (V81 = (('Idris.Idris2.Prelude.IO':'un--putStr'('erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V40) -> fun (V41) -> fun (V42) -> fun (V43) -> fun (V44) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor__IO'('erased', 'erased', V42, V43, V44)) end end end end end, fun (V45) -> fun (V46) -> fun (V47) -> V46 end end end, fun (V48) -> fun (V49) -> fun (V50) -> fun (V51) -> fun (V52) -> begin (V53 = (V50(V52))), begin (V54 = (V51(V52))), (V53(V54)) end end end end end end end}, fun (V55) -> fun (V56) -> fun (V57) -> fun (V58) -> fun (V59) -> begin (V60 = (V57(V59))), ((V58(V60))(V59)) end end end end end end, fun (V61) -> fun (V62) -> fun (V63) -> begin (V64 = (V62(V63))), (V64(V63)) end end end end}, fun (V65) -> fun (V66) -> V66 end end}, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('nested--33019-11538--in--un--prompt'(V4, V3, V2, V1, V0, case V39 of {'Idris.Idris.REPLOpts.MkREPLOpts', E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17} -> (fun (V67, V68, V69, V70, V71, V72, V73, V74, V75, V76, V77, V78, V79, V80) -> V68 end(E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)), ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('Idris.Idris2.Core.Name.Namespace':'dn--un--show_Show__Namespace'(V8)), <<"> "/utf8>>))))))(V5))), {'Idris.Prelude.Types.Right', V81} end), case V82 of {'Idris.Prelude.Types.Left', E18} -> (fun (V83) -> {'Idris.Prelude.Types.Left', V83} end(E18)); {'Idris.Prelude.Types.Right', E19} -> (fun (V84) -> begin (V113 = begin (V112 = (('Idris.Idris2.Prelude.IO':'un--getLine'('erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V85) -> fun (V86) -> fun (V87) -> fun (V88) -> fun (V89) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor__IO'('erased', 'erased', V87, V88, V89)) end end end end end, fun (V90) -> fun (V91) -> fun (V92) -> V91 end end end, fun (V93) -> fun (V94) -> fun (V95) -> fun (V96) -> fun (V97) -> begin (V98 = (V95(V97))), begin (V99 = (V96(V97))), (V98(V99)) end end end end end end end}, fun (V100) -> fun (V101) -> fun (V102) -> fun (V103) -> fun (V104) -> begin (V105 = (V102(V104))), ((V103(V105))(V104)) end end end end end end, fun (V106) -> fun (V107) -> fun (V108) -> begin (V109 = (V107(V108))), (V109(V108)) end end end end}, fun (V110) -> fun (V111) -> V111 end end}))(V5))), {'Idris.Prelude.Types.Right', V112} end), case V113 of {'Idris.Prelude.Types.Left', E20} -> (fun (V114) -> {'Idris.Prelude.Types.Left', V114} end(E20)); {'Idris.Prelude.Types.Right', E21} -> (fun (V115) -> (('case--repl-11586'(V4, V3, V2, V1, V0, V8, V39, V84, V115, 1))(V5)) end(E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E19)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--proofSearch'(V0, V1, V2, V3) -> case V2 of 0 -> case V3 of [E2 | E3] -> (fun (V4, V5) -> [('nested--24932-4375--in--un--replaceStr'(V4, V5, V1, V0, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"?"/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show__Name'(V0)))), V1, V4)) | V5] end(E2, E3)); _ -> case V3 of [] -> []; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; _ -> begin (V6 = (V2 - 1)), case V3 of [E0 | E1] -> (fun (V7, V8) -> [V7 | ('un--proofSearch'(V0, V1, V6, V8))] end(E0, E1)); _ -> case V3 of [] -> []; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end.
'un--processEdit'(V0, V1, V2, V3, V4, V5) -> case V5 of {'Idris.Idris.Syntax.TypeAt', E0, E1, E2} -> (fun (V6, V7, V8) -> fun (V9) -> begin (V38 = begin (V37 = (('Idris.Idris2.Erlang.Data.IORef':'un--readIORef'('erased', 'erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V10) -> fun (V11) -> fun (V12) -> fun (V13) -> fun (V14) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor__IO'('erased', 'erased', V12, V13, V14)) end end end end end, fun (V15) -> fun (V16) -> fun (V17) -> V16 end end end, fun (V18) -> fun (V19) -> fun (V20) -> fun (V21) -> fun (V22) -> begin (V23 = (V20(V22))), begin (V24 = (V21(V22))), (V23(V24)) end end end end end end end}, fun (V25) -> fun (V26) -> fun (V27) -> fun (V28) -> fun (V29) -> begin (V30 = (V27(V29))), ((V28(V30))(V29)) end end end end end end, fun (V31) -> fun (V32) -> fun (V33) -> begin (V34 = (V32(V33))), (V34(V33)) end end end end}, fun (V35) -> fun (V36) -> V36 end end}, V0))(V9))), {'Idris.Prelude.Types.Right', V37} end), case V38 of {'Idris.Prelude.Types.Left', E3} -> (fun (V39) -> {'Idris.Prelude.Types.Left', V39} end(E3)); {'Idris.Prelude.Types.Right', E4} -> (fun (V40) -> begin (V67 = (('Idris.Idris2.Core.Context':'un--lookupCtxtName'(V8, case V40 of {'Idris.Core.Context.MkDefs', E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30} -> (fun (V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62, V63, V64, V65, V66) -> V41 end(E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V9))), case V67 of {'Idris.Prelude.Types.Left', E31} -> (fun (V68) -> {'Idris.Prelude.Types.Left', V68} end(E31)); {'Idris.Prelude.Types.Right', E32} -> (fun (V69) -> begin (V74 = case V69 of [] -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'un--emptyDoc'('erased'))}; _ -> begin (V71 = (('Idris.Idris2.Core.Core':'un--traverse'('erased', 'erased', fun (V70) -> ('un--displayType'(V0, V2, V40, V70)) end, V69))(V9))), case V71 of {'Idris.Prelude.Types.Left', E33} -> (fun (V72) -> {'Idris.Prelude.Types.Left', V72} end(E33)); {'Idris.Prelude.Types.Right', E34} -> (fun (V73) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'un--vsep'('erased', V73))} end(E34)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end), case V74 of {'Idris.Prelude.Types.Left', E35} -> (fun (V75) -> {'Idris.Prelude.Types.Left', V75} end(E35)); {'Idris.Prelude.Types.Right', E36} -> (fun (V76) -> begin (V79 = ('Idris.Idris2.Core.Metadata':'un--findTypeAt'(V3, fun (V77) -> fun (V78) -> ('Idris.Idris2.Core.FC':'un--within'({'Idris.Builtin.MkPair', ('Idris.Idris2.Prelude.Num':'dn--un---_Neg__Int'(V6, 1)), ('Idris.Idris2.Prelude.Num':'dn--un---_Neg__Int'(V7, 1))}, V77)) end end, V9))), case V79 of {'Idris.Prelude.Types.Left', E37} -> (fun (V80) -> {'Idris.Prelude.Types.Left', V80} end(E37)); {'Idris.Prelude.Types.Right', E38} -> (fun (V81) -> case V81 of {'Idris.Prelude.Types.Just', E39} -> (fun (V82) -> case V82 of {'Idris.Builtin.MkPair', E40, E41} -> (fun (V83, V84) -> case V84 of {'Idris.Builtin.MkPair', E42, E43} -> (fun (V85, V86) -> case V76 of {'Idris.Text.PrettyPrint.Prettyprinter.Doc.Empty'} -> (fun () -> begin (V87 = ('un--displayTerm'(V0, V2, V40, V86, V9))), case V87 of {'Idris.Prelude.Types.Left', E44} -> (fun (V88) -> {'Idris.Prelude.Types.Left', V88} end(E44)); {'Idris.Prelude.Types.Right', E45} -> (fun (V89) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.REPL.DisplayEdit', ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'('erased', ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty__String'('erased', ('Idris.Idris2.Core.Name':'un--nameRoot'(V83)))), ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'('erased', ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Symbols':'un--colon'('erased')), V89))))}} end(E45)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end()); _ -> {'Idris.Prelude.Types.Right', {'Idris.Idris.REPL.DisplayEdit', ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'un--emptyDoc'('erased'))}} end end(E42, E43)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E40, E41)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E39)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> case V76 of {'Idris.Text.PrettyPrint.Prettyprinter.Doc.Empty'} -> (fun () -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable__Core_Error'('erased', {'Idris.Core.Core.UndefinedName', {'Idris.Core.FC.MkFC', <<"(interactive)"/utf8>>, {'Idris.Builtin.MkPair', 0, 0}, {'Idris.Builtin.MkPair', 0, 0}}, V8}, V9)) end()); _ -> {'Idris.Prelude.Types.Right', {'Idris.Idris.REPL.DisplayEdit', V76}} end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E38)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E36)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E32)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0, E1, E2)); {'Idris.Idris.Syntax.CaseSplit', E46, E47, E48, E49} -> (fun (V90, V91, V92, V93) -> begin (V94 = ('case--processEdit-5449'(V93, V92, V91, V90, V4, V3, V2, V1, V0, ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord__Int'(V92, 0))))), fun (V95) -> begin (V98 = ('Idris.Idris2.TTImp.Interactive.CaseSplit':'un--getSplits'(V0, V3, V1, fun (V96) -> fun (V97) -> ('un--anyAt'('erased', V94, V96, V97)) end end, V93, V95))), case V98 of {'Idris.Prelude.Types.Left', E50} -> (fun (V99) -> {'Idris.Prelude.Types.Left', V99} end(E50)); {'Idris.Prelude.Types.Right', E51} -> (fun (V100) -> case V100 of {'Idris.TTImp.Interactive.CaseSplit.OK', E52} -> (fun (V101) -> begin (V102 = ('Idris.Idris2.Idris.IDEMode.CaseSplit':'un--updateCase'(V0, V2, V4, V101, ('Idris.Idris2.Prelude.Num':'dn--un---_Neg__Int'(V91, 1)), ('Idris.Idris2.Prelude.Num':'dn--un---_Neg__Int'(V92, 1)), V95))), case V102 of {'Idris.Prelude.Types.Left', E53} -> (fun (V103) -> {'Idris.Prelude.Types.Left', V103} end(E53)); {'Idris.Prelude.Types.Right', E54} -> (fun (V104) -> case V90 of 0 -> ('un--updateFile'(V4, fun (V105) -> ('un--caseSplit'(('Idris.Idris2.Data.Strings':'un--unlines'(V104)), ('Idris.Idris2.Prelude.Types':'dn--un--cast_Cast__Int_Integer'(('Idris.Idris2.Prelude.Num':'dn--un---_Neg__Int'(V91, 1)))), V105)) end, V95)); 1 -> {'Idris.Prelude.Types.Right', {'Idris.Idris.REPL.DisplayEdit', ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'un--vsep'('erased', ('Idris.Idris2.Prelude.Interfaces':'un--<$>'('erased', 'erased', 'erased', fun (V106) -> fun (V107) -> fun (V108) -> fun (V109) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', V108, V109)) end end end end, fun (V110) -> ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty__String'('erased', V110)) end, V104))))}}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E54)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E52)); {'Idris.TTImp.Interactive.CaseSplit.SplitFail', E55} -> (fun (V111) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.REPL.EditError', ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty__String'('erased', ('Idris.Idris2.TTImp.Interactive.CaseSplit':'dn--un--show_Show__SplitError'(V111))))}} end(E55)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E51)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end(E46, E47, E48, E49)); {'Idris.Idris.Syntax.AddClause', E56, E57, E58} -> (fun (V112, V113, V114) -> fun (V115) -> begin (V116 = ('Idris.Idris2.Idris.IDEMode.CaseSplit':'un--getClause'(V0, V3, V4, V113, V114, V115))), case V116 of {'Idris.Prelude.Types.Left', E59} -> (fun (V117) -> {'Idris.Prelude.Types.Left', V117} end(E59)); {'Idris.Prelude.Types.Right', E60} -> (fun (V118) -> case V118 of {'Idris.Prelude.Types.Just', E61} -> (fun (V119) -> case V112 of 0 -> ('un--updateFile'(V4, fun (V120) -> ('un--addClause'(V119, ('Idris.Idris2.Prelude.Types':'dn--un--cast_Cast__Int_Integer'(V113)), V120)) end, V115)); 1 -> {'Idris.Prelude.Types.Right', {'Idris.Idris.REPL.DisplayEdit', ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty__String'('erased', V119))}}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E61)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', {'Idris.Idris.REPL.EditError', ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'('erased', ('Idris.Idris2.Core.Name':'dn--un--pretty_Pretty__Name'('erased', V114)), ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Util':'un--reflow'('erased', <<"not defined here"/utf8>>))))}} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E60)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E56, E57, E58)); {'Idris.Idris.Syntax.ExprSearch', E62, E63, E64, E65} -> (fun (V121, V122, V123, V124) -> fun (V125) -> begin (V154 = begin (V153 = (('Idris.Idris2.Erlang.Data.IORef':'un--readIORef'('erased', 'erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V126) -> fun (V127) -> fun (V128) -> fun (V129) -> fun (V130) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor__IO'('erased', 'erased', V128, V129, V130)) end end end end end, fun (V131) -> fun (V132) -> fun (V133) -> V132 end end end, fun (V134) -> fun (V135) -> fun (V136) -> fun (V137) -> fun (V138) -> begin (V139 = (V136(V138))), begin (V140 = (V137(V138))), (V139(V140)) end end end end end end end}, fun (V141) -> fun (V142) -> fun (V143) -> fun (V144) -> fun (V145) -> begin (V146 = (V143(V145))), ((V144(V146))(V145)) end end end end end end, fun (V147) -> fun (V148) -> fun (V149) -> begin (V150 = (V148(V149))), (V150(V149)) end end end end}, fun (V151) -> fun (V152) -> V152 end end}, V0))(V125))), {'Idris.Prelude.Types.Right', V153} end), case V154 of {'Idris.Prelude.Types.Left', E66} -> (fun (V155) -> {'Idris.Prelude.Types.Left', V155} end(E66)); {'Idris.Prelude.Types.Right', E67} -> (fun (V156) -> begin (V185 = begin (V184 = (('Idris.Idris2.Erlang.Data.IORef':'un--readIORef'('erased', 'erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V157) -> fun (V158) -> fun (V159) -> fun (V160) -> fun (V161) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor__IO'('erased', 'erased', V159, V160, V161)) end end end end end, fun (V162) -> fun (V163) -> fun (V164) -> V163 end end end, fun (V165) -> fun (V166) -> fun (V167) -> fun (V168) -> fun (V169) -> begin (V170 = (V167(V169))), begin (V171 = (V168(V169))), (V170(V171)) end end end end end end end}, fun (V172) -> fun (V173) -> fun (V174) -> fun (V175) -> fun (V176) -> begin (V177 = (V174(V176))), ((V175(V177))(V176)) end end end end end end, fun (V178) -> fun (V179) -> fun (V180) -> begin (V181 = (V179(V180))), (V181(V180)) end end end end}, fun (V182) -> fun (V183) -> V183 end end}, V2))(V125))), {'Idris.Prelude.Types.Right', V184} end), case V185 of {'Idris.Prelude.Types.Left', E68} -> (fun (V186) -> {'Idris.Prelude.Types.Left', V186} end(E68)); {'Idris.Prelude.Types.Right', E69} -> (fun (V187) -> begin (V199 = ('Idris.Idris2.Data.List':'un--elemBy'('erased', fun (V188) -> fun (V189) -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq__Name'(('Idris.Idris2.Core.Name':'un--dropNS'(V188)), ('Idris.Idris2.Core.Name':'un--dropNS'(V189)))) end end, V123, case V187 of {'Idris.Idris.Syntax.MkSyntax', E70, E71, E72, E73, E74, E75, E76, E77, E78} -> (fun (V190, V191, V192, V193, V194, V195, V196, V197, V198) -> V196 end(E70, E71, E72, E73, E74, E75, E76, E77, E78)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), begin (V226 = ('Idris.Idris2.Core.Context':'un--lookupDefName'(V123, case V156 of {'Idris.Core.Context.MkDefs', E79, E80, E81, E82, E83, E84, E85, E86, E87, E88, E89, E90, E91, E92, E93, E94, E95, E96, E97, E98, E99, E100, E101, E102, E103, E104} -> (fun (V200, V201, V202, V203, V204, V205, V206, V207, V208, V209, V210, V211, V212, V213, V214, V215, V216, V217, V218, V219, V220, V221, V222, V223, V224, V225) -> V200 end(E79, E80, E81, E82, E83, E84, E85, E86, E87, E88, E89, E90, E91, E92, E93, E94, E95, E96, E97, E98, E99, E100, E101, E102, E103, E104)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V125))), case V226 of {'Idris.Prelude.Types.Left', E105} -> (fun (V227) -> {'Idris.Prelude.Types.Left', V227} end(E105)); {'Idris.Prelude.Types.Right', E106} -> (fun (V228) -> case V228 of [E107 | E108] -> (fun (V229, V230) -> case V229 of {'Idris.Builtin.MkPair', E109, E110} -> (fun (V231, V232) -> case V232 of {'Idris.Builtin.MkPair', E111, E112} -> (fun (V233, V234) -> case V234 of {'Idris.Core.Context.Hole', E113, E114} -> (fun (V235, V236) -> case V230 of [] -> begin (V238 = fun (V237) -> ('Idris.Idris2.TTImp.Interactive.ExprSearch':'un--exprSearch'(V0, V3, V1, ('Idris.Idris2.Idris.REPLOpts':'un--replFC'()), V123, [], V237)) end), begin (V267 = begin (V266 = (('Idris.Idris2.Erlang.Data.IORef':'un--readIORef'('erased', 'erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V239) -> fun (V240) -> fun (V241) -> fun (V242) -> fun (V243) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor__IO'('erased', 'erased', V241, V242, V243)) end end end end end, fun (V244) -> fun (V245) -> fun (V246) -> V245 end end end, fun (V247) -> fun (V248) -> fun (V249) -> fun (V250) -> fun (V251) -> begin (V252 = (V249(V251))), begin (V253 = (V250(V251))), (V252(V253)) end end end end end end end}, fun (V254) -> fun (V255) -> fun (V256) -> fun (V257) -> fun (V258) -> begin (V259 = (V256(V258))), ((V257(V259))(V258)) end end end end end end, fun (V260) -> fun (V261) -> fun (V262) -> begin (V263 = (V261(V262))), (V263(V262)) end end end end}, fun (V264) -> fun (V265) -> V265 end end}, V4))(V125))), {'Idris.Prelude.Types.Right', V266} end), case V267 of {'Idris.Prelude.Types.Left', E115} -> (fun (V268) -> {'Idris.Prelude.Types.Left', V268} end(E115)); {'Idris.Prelude.Types.Right', E116} -> (fun (V269) -> begin (V312 = begin (V311 = (('Idris.Idris2.Erlang.Data.IORef':'un--writeIORef'('erased', 'erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V270) -> fun (V271) -> fun (V272) -> fun (V273) -> fun (V274) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor__IO'('erased', 'erased', V272, V273, V274)) end end end end end, fun (V275) -> fun (V276) -> fun (V277) -> V276 end end end, fun (V278) -> fun (V279) -> fun (V280) -> fun (V281) -> fun (V282) -> begin (V283 = (V280(V282))), begin (V284 = (V281(V282))), (V283(V284)) end end end end end end end}, fun (V285) -> fun (V286) -> fun (V287) -> fun (V288) -> fun (V289) -> begin (V290 = (V287(V289))), ((V288(V290))(V289)) end end end end end end, fun (V291) -> fun (V292) -> fun (V293) -> begin (V294 = (V292(V293))), (V294(V293)) end end end end}, fun (V295) -> fun (V296) -> V296 end end}, V4, case V269 of {'Idris.Idris.REPLOpts.MkREPLOpts', E117, E118, E119, E120, E121, E122, E123, E124, E125, E126, E127, E128, E129, E130} -> (fun (V297, V298, V299, V300, V301, V302, V303, V304, V305, V306, V307, V308, V309, V310) -> {'Idris.Idris.REPLOpts.MkREPLOpts', V297, V298, V299, V300, V301, V302, V303, V304, V305, {'Idris.Prelude.Types.Just', {'Idris.Builtin.MkPair', V123, V238}}, V307, V308, V309, V310} end(E117, E118, E119, E120, E121, E122, E123, E124, E125, E126, E127, E128, E129, E130)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V125))), {'Idris.Prelude.Types.Right', V311} end), case V312 of {'Idris.Prelude.Types.Left', E131} -> (fun (V313) -> {'Idris.Prelude.Types.Left', V313} end(E131)); {'Idris.Prelude.Types.Right', E132} -> (fun (V314) -> begin (V343 = begin (V342 = (('Idris.Idris2.Erlang.Data.IORef':'un--readIORef'('erased', 'erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V315) -> fun (V316) -> fun (V317) -> fun (V318) -> fun (V319) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor__IO'('erased', 'erased', V317, V318, V319)) end end end end end, fun (V320) -> fun (V321) -> fun (V322) -> V321 end end end, fun (V323) -> fun (V324) -> fun (V325) -> fun (V326) -> fun (V327) -> begin (V328 = (V325(V327))), begin (V329 = (V326(V327))), (V328(V329)) end end end end end end end}, fun (V330) -> fun (V331) -> fun (V332) -> fun (V333) -> fun (V334) -> begin (V335 = (V332(V334))), ((V333(V335))(V334)) end end end end end end, fun (V336) -> fun (V337) -> fun (V338) -> begin (V339 = (V337(V338))), (V339(V338)) end end end end}, fun (V340) -> fun (V341) -> V341 end end}, V0))(V125))), {'Idris.Prelude.Types.Right', V342} end), case V343 of {'Idris.Prelude.Types.Left', E133} -> (fun (V344) -> {'Idris.Prelude.Types.Left', V344} end(E133)); {'Idris.Prelude.Types.Right', E134} -> (fun (V345) -> begin (V346 = ('un--nextProofSearch'(V0, V1, V4, V125))), case V346 of {'Idris.Prelude.Types.Left', E135} -> (fun (V347) -> {'Idris.Prelude.Types.Left', V347} end(E135)); {'Idris.Prelude.Types.Right', E136} -> (fun (V348) -> case V348 of {'Idris.Prelude.Types.Just', E137} -> (fun (V349) -> case V349 of {'Idris.Builtin.MkPair', E138, E139} -> (fun (V350, V351) -> begin (V352 = ('un--dropLams'(V235, V351))), begin (V353 = ('Idris.Idris2.Idris.Resugar':'un--pterm'(V0, V2, V352, V125))), case V353 of {'Idris.Prelude.Types.Left', E140} -> (fun (V354) -> {'Idris.Prelude.Types.Left', V354} end(E140)); {'Idris.Prelude.Types.Right', E141} -> (fun (V355) -> begin (V356 = case V199 of 0 -> ('Idris.Idris2.Idris.Resugar':'un--addBracket'(('Idris.Idris2.Idris.REPLOpts':'un--replFC'()), V355)); 1 -> V355; _ -> ('erlang':'throw'("Error: Unreachable branch")) end), case V121 of 0 -> ('un--updateFile'(V4, fun (V357) -> ('un--proofSearch'(V123, ('Idris.Idris2.Idris.Syntax':'dn--un--show_Show__PTerm'(V356)), ('Idris.Idris2.Prelude.Types':'dn--un--cast_Cast__Int_Integer'(('Idris.Idris2.Prelude.Num':'dn--un---_Neg__Int'(V122, 1)))), V357)) end, V125)); 1 -> {'Idris.Prelude.Types.Right', {'Idris.Idris.REPL.DisplayEdit', ('Idris.Idris2.Idris.Pretty':'un--prettyTerm'(V356))}}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E141)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E138, E139)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E137)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', {'Idris.Idris.REPL.EditError', ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'un--vsep'('erased', ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', fun (V358) -> ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'un--unsafeTextWithoutNewLines'('erased', V358)) end, ('Idris.Idris2.Data.Strings':'un--lines'(<<"No search results"/utf8>>))))))}} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E136)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E134)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E132)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E116)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end; _ -> {'Idris.Prelude.Types.Right', {'Idris.Idris.REPL.EditError', ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'un--vsep'('erased', ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', fun (V359) -> ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'un--unsafeTextWithoutNewLines'('erased', V359)) end, ('Idris.Idris2.Data.Strings':'un--lines'(<<"Not a searchable hole"/utf8>>))))))}} end end(E113, E114)); {'Idris.Core.Context.PMDef', E142, E143, E144, E145, E146} -> (fun (V360, V361, V362, V363, V364) -> case V361 of [] -> case V362 of {'Idris.Core.CaseTree.STerm', E147, E148} -> (fun (V365, V366) -> case V230 of [] -> begin (V367 = [{'Idris.Builtin.MkPair', V231, {'Idris.Builtin.MkPair', V233, {'Idris.Core.Context.PMDef', V360, [], {'Idris.Core.CaseTree.STerm', V365, V366}, V363, V364}}} | []]), (('case--case block in processEdit-6340'(V124, V123, V122, V121, V4, V3, V2, V1, V0, V156, V187, V199, V363, V364, V365, V231, V233, V366, V360, V367, case V360 of {'Idris.Core.Context.MkPMDefInfo', E149, E150} -> (fun (V368, V369) -> V368 end(E149, E150)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V125)) end; _ -> {'Idris.Prelude.Types.Right', {'Idris.Idris.REPL.EditError', ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'un--vsep'('erased', ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', fun (V370) -> ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'un--unsafeTextWithoutNewLines'('erased', V370)) end, ('Idris.Idris2.Data.Strings':'un--lines'(<<"Not a searchable hole"/utf8>>))))))}} end end(E147, E148)); _ -> {'Idris.Prelude.Types.Right', {'Idris.Idris.REPL.EditError', ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'un--vsep'('erased', ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', fun (V371) -> ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'un--unsafeTextWithoutNewLines'('erased', V371)) end, ('Idris.Idris2.Data.Strings':'un--lines'(<<"Not a searchable hole"/utf8>>))))))}} end; _ -> {'Idris.Prelude.Types.Right', {'Idris.Idris.REPL.EditError', ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'un--vsep'('erased', ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', fun (V372) -> ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'un--unsafeTextWithoutNewLines'('erased', V372)) end, ('Idris.Idris2.Data.Strings':'un--lines'(<<"Not a searchable hole"/utf8>>))))))}} end end(E142, E143, E144, E145, E146)); _ -> {'Idris.Prelude.Types.Right', {'Idris.Idris.REPL.EditError', ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'un--vsep'('erased', ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', fun (V373) -> ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'un--unsafeTextWithoutNewLines'('erased', V373)) end, ('Idris.Idris2.Data.Strings':'un--lines'(<<"Not a searchable hole"/utf8>>))))))}} end end(E111, E112)); _ -> {'Idris.Prelude.Types.Right', {'Idris.Idris.REPL.EditError', ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'un--vsep'('erased', ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', fun (V374) -> ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'un--unsafeTextWithoutNewLines'('erased', V374)) end, ('Idris.Idris2.Data.Strings':'un--lines'(<<"Not a searchable hole"/utf8>>))))))}} end end(E109, E110)); _ -> {'Idris.Prelude.Types.Right', {'Idris.Idris.REPL.EditError', ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'un--vsep'('erased', ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', fun (V375) -> ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'un--unsafeTextWithoutNewLines'('erased', V375)) end, ('Idris.Idris2.Data.Strings':'un--lines'(<<"Not a searchable hole"/utf8>>))))))}} end end(E107, E108)); [] -> {'Idris.Prelude.Types.Right', {'Idris.Idris.REPL.EditError', ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'('erased', ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--fromString_FromString__(Doc $ann)'('erased', <<"Unknown name"/utf8>>)), ('Idris.Idris2.Core.Name':'dn--un--pretty_Pretty__Name'('erased', V123))))}}; _ -> {'Idris.Prelude.Types.Right', {'Idris.Idris.REPL.EditError', ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'un--vsep'('erased', ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', fun (V376) -> ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'un--unsafeTextWithoutNewLines'('erased', V376)) end, ('Idris.Idris2.Data.Strings':'un--lines'(<<"Not a searchable hole"/utf8>>))))))}} end end(E106)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E69)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E67)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E62, E63, E64, E65)); {'Idris.Idris.Syntax.ExprSearchNext'} -> (fun () -> fun (V377) -> begin (V406 = begin (V405 = (('Idris.Idris2.Erlang.Data.IORef':'un--readIORef'('erased', 'erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V378) -> fun (V379) -> fun (V380) -> fun (V381) -> fun (V382) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor__IO'('erased', 'erased', V380, V381, V382)) end end end end end, fun (V383) -> fun (V384) -> fun (V385) -> V384 end end end, fun (V386) -> fun (V387) -> fun (V388) -> fun (V389) -> fun (V390) -> begin (V391 = (V388(V390))), begin (V392 = (V389(V390))), (V391(V392)) end end end end end end end}, fun (V393) -> fun (V394) -> fun (V395) -> fun (V396) -> fun (V397) -> begin (V398 = (V395(V397))), ((V396(V398))(V397)) end end end end end end, fun (V399) -> fun (V400) -> fun (V401) -> begin (V402 = (V400(V401))), (V402(V401)) end end end end}, fun (V403) -> fun (V404) -> V404 end end}, V0))(V377))), {'Idris.Prelude.Types.Right', V405} end), case V406 of {'Idris.Prelude.Types.Left', E151} -> (fun (V407) -> {'Idris.Prelude.Types.Left', V407} end(E151)); {'Idris.Prelude.Types.Right', E152} -> (fun (V408) -> begin (V437 = begin (V436 = (('Idris.Idris2.Erlang.Data.IORef':'un--readIORef'('erased', 'erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V409) -> fun (V410) -> fun (V411) -> fun (V412) -> fun (V413) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor__IO'('erased', 'erased', V411, V412, V413)) end end end end end, fun (V414) -> fun (V415) -> fun (V416) -> V415 end end end, fun (V417) -> fun (V418) -> fun (V419) -> fun (V420) -> fun (V421) -> begin (V422 = (V419(V421))), begin (V423 = (V420(V421))), (V422(V423)) end end end end end end end}, fun (V424) -> fun (V425) -> fun (V426) -> fun (V427) -> fun (V428) -> begin (V429 = (V426(V428))), ((V427(V429))(V428)) end end end end end end, fun (V430) -> fun (V431) -> fun (V432) -> begin (V433 = (V431(V432))), (V433(V432)) end end end end}, fun (V434) -> fun (V435) -> V435 end end}, V2))(V377))), {'Idris.Prelude.Types.Right', V436} end), case V437 of {'Idris.Prelude.Types.Left', E153} -> (fun (V438) -> {'Idris.Prelude.Types.Left', V438} end(E153)); {'Idris.Prelude.Types.Right', E154} -> (fun (V439) -> begin (V440 = ('un--nextProofSearch'(V0, V1, V4, V377))), case V440 of {'Idris.Prelude.Types.Left', E155} -> (fun (V441) -> {'Idris.Prelude.Types.Left', V441} end(E155)); {'Idris.Prelude.Types.Right', E156} -> (fun (V442) -> case V442 of {'Idris.Prelude.Types.Just', E157} -> (fun (V443) -> case V443 of {'Idris.Builtin.MkPair', E158, E159} -> (fun (V444, V445) -> begin (V472 = ('Idris.Idris2.Core.Context':'un--lookupDefName'(V444, case V408 of {'Idris.Core.Context.MkDefs', E160, E161, E162, E163, E164, E165, E166, E167, E168, E169, E170, E171, E172, E173, E174, E175, E176, E177, E178, E179, E180, E181, E182, E183, E184, E185} -> (fun (V446, V447, V448, V449, V450, V451, V452, V453, V454, V455, V456, V457, V458, V459, V460, V461, V462, V463, V464, V465, V466, V467, V468, V469, V470, V471) -> V446 end(E160, E161, E162, E163, E164, E165, E166, E167, E168, E169, E170, E171, E172, E173, E174, E175, E176, E177, E178, E179, E180, E181, E182, E183, E184, E185)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V377))), case V472 of {'Idris.Prelude.Types.Left', E186} -> (fun (V473) -> {'Idris.Prelude.Types.Left', V473} end(E186)); {'Idris.Prelude.Types.Right', E187} -> (fun (V474) -> case V474 of [E188 | E189] -> (fun (V475, V476) -> case V475 of {'Idris.Builtin.MkPair', E190, E191} -> (fun (V477, V478) -> case V478 of {'Idris.Builtin.MkPair', E192, E193} -> (fun (V479, V480) -> case V480 of {'Idris.Core.Context.Hole', E194, E195} -> (fun (V481, V482) -> case V476 of [] -> begin (V494 = ('Idris.Idris2.Data.List':'un--elemBy'('erased', fun (V483) -> fun (V484) -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq__Name'(('Idris.Idris2.Core.Name':'un--dropNS'(V483)), ('Idris.Idris2.Core.Name':'un--dropNS'(V484)))) end end, V444, case V439 of {'Idris.Idris.Syntax.MkSyntax', E196, E197, E198, E199, E200, E201, E202, E203, E204} -> (fun (V485, V486, V487, V488, V489, V490, V491, V492, V493) -> V491 end(E196, E197, E198, E199, E200, E201, E202, E203, E204)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), begin (V495 = ('un--dropLams'(V481, V445))), begin (V496 = ('Idris.Idris2.Idris.Resugar':'un--pterm'(V0, V2, V495, V377))), case V496 of {'Idris.Prelude.Types.Left', E205} -> (fun (V497) -> {'Idris.Prelude.Types.Left', V497} end(E205)); {'Idris.Prelude.Types.Right', E206} -> (fun (V498) -> begin (V499 = case V494 of 0 -> ('Idris.Idris2.Idris.Resugar':'un--addBracket'(('Idris.Idris2.Idris.REPLOpts':'un--replFC'()), V498)); 1 -> V498; _ -> ('erlang':'throw'("Error: Unreachable branch")) end), {'Idris.Prelude.Types.Right', {'Idris.Idris.REPL.DisplayEdit', ('Idris.Idris2.Idris.Pretty':'un--prettyTerm'(V499))}} end end(E206)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end; _ -> {'Idris.Prelude.Types.Right', {'Idris.Idris.REPL.EditError', ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'un--vsep'('erased', ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', fun (V500) -> ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'un--unsafeTextWithoutNewLines'('erased', V500)) end, ('Idris.Idris2.Data.Strings':'un--lines'(<<"Not a searchable hole"/utf8>>))))))}} end end(E194, E195)); _ -> {'Idris.Prelude.Types.Right', {'Idris.Idris.REPL.EditError', ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'un--vsep'('erased', ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', fun (V501) -> ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'un--unsafeTextWithoutNewLines'('erased', V501)) end, ('Idris.Idris2.Data.Strings':'un--lines'(<<"Not a searchable hole"/utf8>>))))))}} end end(E192, E193)); _ -> {'Idris.Prelude.Types.Right', {'Idris.Idris.REPL.EditError', ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'un--vsep'('erased', ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', fun (V502) -> ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'un--unsafeTextWithoutNewLines'('erased', V502)) end, ('Idris.Idris2.Data.Strings':'un--lines'(<<"Not a searchable hole"/utf8>>))))))}} end end(E190, E191)); _ -> {'Idris.Prelude.Types.Right', {'Idris.Idris.REPL.EditError', ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'un--vsep'('erased', ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', fun (V503) -> ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'un--unsafeTextWithoutNewLines'('erased', V503)) end, ('Idris.Idris2.Data.Strings':'un--lines'(<<"Not a searchable hole"/utf8>>))))))}} end end(E188, E189)); _ -> {'Idris.Prelude.Types.Right', {'Idris.Idris.REPL.EditError', ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'un--vsep'('erased', ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', fun (V504) -> ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'un--unsafeTextWithoutNewLines'('erased', V504)) end, ('Idris.Idris2.Data.Strings':'un--lines'(<<"Not a searchable hole"/utf8>>))))))}} end end(E187)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E158, E159)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E157)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', {'Idris.Idris.REPL.EditError', ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'un--vsep'('erased', ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', fun (V505) -> ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'un--unsafeTextWithoutNewLines'('erased', V505)) end, ('Idris.Idris2.Data.Strings':'un--lines'(<<"No more results"/utf8>>))))))}} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E156)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E154)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E152)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end()); {'Idris.Idris.Syntax.GenerateDef', E207, E208, E209, E210} -> (fun (V506, V507, V508, V509) -> fun (V510) -> begin (V539 = begin (V538 = (('Idris.Idris2.Erlang.Data.IORef':'un--readIORef'('erased', 'erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V511) -> fun (V512) -> fun (V513) -> fun (V514) -> fun (V515) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor__IO'('erased', 'erased', V513, V514, V515)) end end end end end, fun (V516) -> fun (V517) -> fun (V518) -> V517 end end end, fun (V519) -> fun (V520) -> fun (V521) -> fun (V522) -> fun (V523) -> begin (V524 = (V521(V523))), begin (V525 = (V522(V523))), (V524(V525)) end end end end end end end}, fun (V526) -> fun (V527) -> fun (V528) -> fun (V529) -> fun (V530) -> begin (V531 = (V528(V530))), ((V529(V531))(V530)) end end end end end end, fun (V532) -> fun (V533) -> fun (V534) -> begin (V535 = (V533(V534))), (V535(V534)) end end end end}, fun (V536) -> fun (V537) -> V537 end end}, V0))(V510))), {'Idris.Prelude.Types.Right', V538} end), case V539 of {'Idris.Prelude.Types.Left', E211} -> (fun (V540) -> {'Idris.Prelude.Types.Left', V540} end(E211)); {'Idris.Prelude.Types.Right', E212} -> (fun (V541) -> begin (V544 = ('Idris.Idris2.Core.Metadata':'un--findTyDeclAt'(V3, fun (V542) -> fun (V543) -> ('Idris.Idris2.Core.FC':'un--onLine'(('Idris.Idris2.Prelude.Num':'dn--un---_Neg__Int'(V507, 1)), V542)) end end, V510))), case V544 of {'Idris.Prelude.Types.Left', E213} -> (fun (V545) -> {'Idris.Prelude.Types.Left', V545} end(E213)); {'Idris.Prelude.Types.Right', E214} -> (fun (V546) -> case V546 of {'Idris.Prelude.Types.Just', E215} -> (fun (V547) -> case V547 of {'Idris.Builtin.MkPair', E216, E217} -> (fun (V548, V549) -> case V549 of {'Idris.Builtin.MkPair', E218, E219} -> (fun (V550, V551) -> case V551 of {'Idris.Builtin.MkPair', E220, E221} -> (fun (V552, V553) -> begin (V580 = ('Idris.Idris2.Core.Context':'un--lookupDefExact'(V550, case V541 of {'Idris.Core.Context.MkDefs', E222, E223, E224, E225, E226, E227, E228, E229, E230, E231, E232, E233, E234, E235, E236, E237, E238, E239, E240, E241, E242, E243, E244, E245, E246, E247} -> (fun (V554, V555, V556, V557, V558, V559, V560, V561, V562, V563, V564, V565, V566, V567, V568, V569, V570, V571, V572, V573, V574, V575, V576, V577, V578, V579) -> V554 end(E222, E223, E224, E225, E226, E227, E228, E229, E230, E231, E232, E233, E234, E235, E236, E237, E238, E239, E240, E241, E242, E243, E244, E245, E246, E247)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V510))), case V580 of {'Idris.Prelude.Types.Left', E248} -> (fun (V581) -> {'Idris.Prelude.Types.Left', V581} end(E248)); {'Idris.Prelude.Types.Right', E249} -> (fun (V582) -> begin (V583 = {'Idris.Prelude.Types.Just', {'Idris.Builtin.MkPair', V548, {'Idris.Builtin.MkPair', V550, {'Idris.Builtin.MkPair', V552, V553}}}}), case V582 of {'Idris.Prelude.Types.Just', E250} -> (fun (V584) -> case V584 of {'Idris.Core.Context.None'} -> (fun () -> begin (V590 = fun (V585) -> ('Idris.Idris2.TTImp.Interactive.GenerateDef':'un--makeDefSort'(V0, V3, V1, fun (V586) -> fun (V587) -> ('Idris.Idris2.Core.FC':'un--onLine'(('Idris.Idris2.Prelude.Num':'dn--un---_Neg__Int'(V507, 1)), V586)) end end, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))))))))), fun (V588) -> fun (V589) -> ('Idris.Idris2.TTImp.Interactive.GenerateDef':'un--mostUsed'(V588, V589)) end end, V550, V585)) end), begin (V619 = begin (V618 = (('Idris.Idris2.Erlang.Data.IORef':'un--readIORef'('erased', 'erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V591) -> fun (V592) -> fun (V593) -> fun (V594) -> fun (V595) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor__IO'('erased', 'erased', V593, V594, V595)) end end end end end, fun (V596) -> fun (V597) -> fun (V598) -> V597 end end end, fun (V599) -> fun (V600) -> fun (V601) -> fun (V602) -> fun (V603) -> begin (V604 = (V601(V603))), begin (V605 = (V602(V603))), (V604(V605)) end end end end end end end}, fun (V606) -> fun (V607) -> fun (V608) -> fun (V609) -> fun (V610) -> begin (V611 = (V608(V610))), ((V609(V611))(V610)) end end end end end end, fun (V612) -> fun (V613) -> fun (V614) -> begin (V615 = (V613(V614))), (V615(V614)) end end end end}, fun (V616) -> fun (V617) -> V617 end end}, V4))(V510))), {'Idris.Prelude.Types.Right', V618} end), case V619 of {'Idris.Prelude.Types.Left', E251} -> (fun (V620) -> {'Idris.Prelude.Types.Left', V620} end(E251)); {'Idris.Prelude.Types.Right', E252} -> (fun (V621) -> begin (V664 = begin (V663 = (('Idris.Idris2.Erlang.Data.IORef':'un--writeIORef'('erased', 'erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V622) -> fun (V623) -> fun (V624) -> fun (V625) -> fun (V626) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor__IO'('erased', 'erased', V624, V625, V626)) end end end end end, fun (V627) -> fun (V628) -> fun (V629) -> V628 end end end, fun (V630) -> fun (V631) -> fun (V632) -> fun (V633) -> fun (V634) -> begin (V635 = (V632(V634))), begin (V636 = (V633(V634))), (V635(V636)) end end end end end end end}, fun (V637) -> fun (V638) -> fun (V639) -> fun (V640) -> fun (V641) -> begin (V642 = (V639(V641))), ((V640(V642))(V641)) end end end end end end, fun (V643) -> fun (V644) -> fun (V645) -> begin (V646 = (V644(V645))), (V646(V645)) end end end end}, fun (V647) -> fun (V648) -> V648 end end}, V4, case V621 of {'Idris.Idris.REPLOpts.MkREPLOpts', E253, E254, E255, E256, E257, E258, E259, E260, E261, E262, E263, E264, E265, E266} -> (fun (V649, V650, V651, V652, V653, V654, V655, V656, V657, V658, V659, V660, V661, V662) -> {'Idris.Idris.REPLOpts.MkREPLOpts', V649, V650, V651, V652, V653, V654, V655, V656, V657, V658, {'Idris.Prelude.Types.Just', {'Idris.Builtin.MkPair', V507, V590}}, V660, V661, V662} end(E253, E254, E255, E256, E257, E258, E259, E260, E261, E262, E263, E264, E265, E266)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V510))), {'Idris.Prelude.Types.Right', V663} end), case V664 of {'Idris.Prelude.Types.Left', E267} -> (fun (V665) -> {'Idris.Prelude.Types.Left', V665} end(E267)); {'Idris.Prelude.Types.Right', E268} -> (fun (V666) -> begin (V667 = ('un--nextGenDef'(V0, V1, V4, V509, V510))), case V667 of {'Idris.Prelude.Types.Left', E269} -> (fun (V668) -> {'Idris.Prelude.Types.Left', V668} end(E269)); {'Idris.Prelude.Types.Right', E270} -> (fun (V669) -> begin (V670 = {'Idris.Prelude.Types.Just', {'Idris.Core.Context.None'}}), case V669 of {'Idris.Prelude.Types.Just', E271} -> (fun (V671) -> case V671 of {'Idris.Builtin.MkPair', E272, E273} -> (fun (V672, V673) -> case V673 of {'Idris.Builtin.MkPair', E274, E275} -> (fun (V674, V675) -> begin (V676 = ('Idris.Idris2.Prelude.Types':'dn--un--cast_Cast__Int_Integer'(('Idris.Idris2.Builtin':'un--snd'('erased', 'erased', ('Idris.Idris2.Core.FC':'un--startPos'(V674))))))), begin (V677 = ('Idris.Idris2.Idris.REPLOpts':'un--getSourceLine'(V4, V507, V510))), case V677 of {'Idris.Prelude.Types.Left', E276} -> (fun (V678) -> {'Idris.Prelude.Types.Left', V678} end(E276)); {'Idris.Prelude.Types.Right', E277} -> (fun (V679) -> begin (V680 = {'Idris.Prelude.Types.Just', {'Idris.Builtin.MkPair', V672, {'Idris.Builtin.MkPair', V674, V675}}}), case V679 of {'Idris.Prelude.Types.Just', E278} -> (fun (V681) -> begin (V682 = {'Idris.Prelude.Types.Just', V681}), (('case--case block in case block in case block in case block in processEdit-7286'(V509, V508, V507, V506, V4, V3, V2, V1, V0, V541, V553, V552, V548, V550, V583, V670, V590, V621, V666, V672, V674, V675, V680, V676, V681, V682, ('Idris.Idris2.Parser.Unlit':'un--isLitLine'(V681))))(V510)) end end(E278)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', {'Idris.Idris.REPL.EditError', ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'un--vsep'('erased', ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', fun (V683) -> ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'un--unsafeTextWithoutNewLines'('erased', V683)) end, ('Idris.Idris2.Data.Strings':'un--lines'(<<"Source line not found"/utf8>>))))))}} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E277)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E274, E275)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E272, E273)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E271)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', {'Idris.Idris.REPL.EditError', ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'un--vsep'('erased', ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', fun (V684) -> ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'un--unsafeTextWithoutNewLines'('erased', V684)) end, ('Idris.Idris2.Data.Strings':'un--lines'(<<"No search results"/utf8>>))))))}} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E270)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E268)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E252)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end()); _ -> {'Idris.Prelude.Types.Right', {'Idris.Idris.REPL.EditError', ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'un--vsep'('erased', ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', fun (V685) -> ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'un--unsafeTextWithoutNewLines'('erased', V685)) end, ('Idris.Idris2.Data.Strings':'un--lines'(<<"Already defined"/utf8>>))))))}} end end(E250)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', {'Idris.Idris.REPL.EditError', ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'('erased', ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--fromString_FromString__(Doc $ann)'('erased', <<"Can\x{27}t find declaration for"/utf8>>)), ('Idris.Idris2.Core.Name':'dn--un--pretty_Pretty__Name'('erased', V508))))}} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E249)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E220, E221)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E218, E219)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E216, E217)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E215)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', {'Idris.Idris.REPL.EditError', ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'('erased', ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--fromString_FromString__(Doc $ann)'('erased', <<"Can\x{27}t find declaration for"/utf8>>)), ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'('erased', ('Idris.Idris2.Core.Name':'dn--un--pretty_Pretty__Name'('erased', V508)), ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'('erased', ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--fromString_FromString__(Doc $ann)'('erased', <<"on line"/utf8>>)), ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty__Int'('erased', V507))))))))}} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E214)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E212)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E207, E208, E209, E210)); {'Idris.Idris.Syntax.GenerateDefNext'} -> (fun () -> fun (V686) -> begin (V687 = ('un--nextGenDef'(V0, V1, V4, 0, V686))), case V687 of {'Idris.Prelude.Types.Left', E279} -> (fun (V688) -> {'Idris.Prelude.Types.Left', V688} end(E279)); {'Idris.Prelude.Types.Right', E280} -> (fun (V689) -> case V689 of {'Idris.Prelude.Types.Just', E281} -> (fun (V690) -> case V690 of {'Idris.Builtin.MkPair', E282, E283} -> (fun (V691, V692) -> case V692 of {'Idris.Builtin.MkPair', E284, E285} -> (fun (V693, V694) -> begin (V695 = ('Idris.Idris2.Prelude.Types':'dn--un--cast_Cast__Int_Integer'(('Idris.Idris2.Builtin':'un--snd'('erased', 'erased', ('Idris.Idris2.Core.FC':'un--startPos'(V693))))))), begin (V696 = ('Idris.Idris2.Idris.REPLOpts':'un--getSourceLine'(V4, V691, V686))), case V696 of {'Idris.Prelude.Types.Left', E286} -> (fun (V697) -> {'Idris.Prelude.Types.Left', V697} end(E286)); {'Idris.Prelude.Types.Right', E287} -> (fun (V698) -> begin (V699 = {'Idris.Prelude.Types.Just', {'Idris.Builtin.MkPair', V691, {'Idris.Builtin.MkPair', V693, V694}}}), case V698 of {'Idris.Prelude.Types.Just', E288} -> (fun (V700) -> begin (V701 = {'Idris.Prelude.Types.Just', V700}), (('case--case block in case block in processEdit-7840'(V4, V3, V2, V1, V0, V691, V693, V694, V699, V695, V700, V701, ('Idris.Idris2.Parser.Unlit':'un--isLitLine'(V700))))(V686)) end end(E288)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', {'Idris.Idris.REPL.EditError', ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'un--vsep'('erased', ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', fun (V702) -> ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'un--unsafeTextWithoutNewLines'('erased', V702)) end, ('Idris.Idris2.Data.Strings':'un--lines'(<<"Source line not found"/utf8>>))))))}} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E287)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E284, E285)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E282, E283)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E281)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', {'Idris.Idris.REPL.EditError', ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'un--vsep'('erased', ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', fun (V703) -> ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'un--unsafeTextWithoutNewLines'('erased', V703)) end, ('Idris.Idris2.Data.Strings':'un--lines'(<<"No more results"/utf8>>))))))}} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E280)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end()); {'Idris.Idris.Syntax.MakeLemma', E289, E290, E291} -> (fun (V704, V705, V706) -> fun (V707) -> begin (V736 = begin (V735 = (('Idris.Idris2.Erlang.Data.IORef':'un--readIORef'('erased', 'erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V708) -> fun (V709) -> fun (V710) -> fun (V711) -> fun (V712) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor__IO'('erased', 'erased', V710, V711, V712)) end end end end end, fun (V713) -> fun (V714) -> fun (V715) -> V714 end end end, fun (V716) -> fun (V717) -> fun (V718) -> fun (V719) -> fun (V720) -> begin (V721 = (V718(V720))), begin (V722 = (V719(V720))), (V721(V722)) end end end end end end end}, fun (V723) -> fun (V724) -> fun (V725) -> fun (V726) -> fun (V727) -> begin (V728 = (V725(V727))), ((V726(V728))(V727)) end end end end end end, fun (V729) -> fun (V730) -> fun (V731) -> begin (V732 = (V730(V731))), (V732(V731)) end end end end}, fun (V733) -> fun (V734) -> V734 end end}, V0))(V707))), {'Idris.Prelude.Types.Right', V735} end), case V736 of {'Idris.Prelude.Types.Left', E292} -> (fun (V737) -> {'Idris.Prelude.Types.Left', V737} end(E292)); {'Idris.Prelude.Types.Right', E293} -> (fun (V738) -> begin (V767 = begin (V766 = (('Idris.Idris2.Erlang.Data.IORef':'un--readIORef'('erased', 'erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V739) -> fun (V740) -> fun (V741) -> fun (V742) -> fun (V743) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor__IO'('erased', 'erased', V741, V742, V743)) end end end end end, fun (V744) -> fun (V745) -> fun (V746) -> V745 end end end, fun (V747) -> fun (V748) -> fun (V749) -> fun (V750) -> fun (V751) -> begin (V752 = (V749(V751))), begin (V753 = (V750(V751))), (V752(V753)) end end end end end end end}, fun (V754) -> fun (V755) -> fun (V756) -> fun (V757) -> fun (V758) -> begin (V759 = (V756(V758))), ((V757(V759))(V758)) end end end end end end, fun (V760) -> fun (V761) -> fun (V762) -> begin (V763 = (V761(V762))), (V763(V762)) end end end end}, fun (V764) -> fun (V765) -> V765 end end}, V2))(V707))), {'Idris.Prelude.Types.Right', V766} end), case V767 of {'Idris.Prelude.Types.Left', E294} -> (fun (V768) -> {'Idris.Prelude.Types.Left', V768} end(E294)); {'Idris.Prelude.Types.Right', E295} -> (fun (V769) -> begin (V781 = ('Idris.Idris2.Data.List':'un--elemBy'('erased', fun (V770) -> fun (V771) -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq__Name'(('Idris.Idris2.Core.Name':'un--dropNS'(V770)), ('Idris.Idris2.Core.Name':'un--dropNS'(V771)))) end end, V706, case V769 of {'Idris.Idris.Syntax.MkSyntax', E296, E297, E298, E299, E300, E301, E302, E303, E304} -> (fun (V772, V773, V774, V775, V776, V777, V778, V779, V780) -> V778 end(E296, E297, E298, E299, E300, E301, E302, E303, E304)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), begin (V808 = ('un--lookupDefTyName'(V706, case V738 of {'Idris.Core.Context.MkDefs', E305, E306, E307, E308, E309, E310, E311, E312, E313, E314, E315, E316, E317, E318, E319, E320, E321, E322, E323, E324, E325, E326, E327, E328, E329, E330} -> (fun (V782, V783, V784, V785, V786, V787, V788, V789, V790, V791, V792, V793, V794, V795, V796, V797, V798, V799, V800, V801, V802, V803, V804, V805, V806, V807) -> V782 end(E305, E306, E307, E308, E309, E310, E311, E312, E313, E314, E315, E316, E317, E318, E319, E320, E321, E322, E323, E324, E325, E326, E327, E328, E329, E330)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V707))), case V808 of {'Idris.Prelude.Types.Left', E331} -> (fun (V809) -> {'Idris.Prelude.Types.Left', V809} end(E331)); {'Idris.Prelude.Types.Right', E332} -> (fun (V810) -> case V810 of [E333 | E334] -> (fun (V811, V812) -> case V811 of {'Idris.Builtin.MkPair', E335, E336} -> (fun (V813, V814) -> case V814 of {'Idris.Builtin.MkPair', E337, E338} -> (fun (V815, V816) -> case V816 of {'Idris.Builtin.MkPair', E339, E340} -> (fun (V817, V818) -> case V817 of {'Idris.Core.Context.Hole', E341, E342} -> (fun (V819, V820) -> case V812 of [] -> begin (V821 = ('Idris.Idris2.TTImp.Interactive.MakeLemma':'un--makeLemma'(V3, V0, ('Idris.Idris2.Idris.REPLOpts':'un--replFC'()), V706, V819, V818, V707))), case V821 of {'Idris.Prelude.Types.Left', E343} -> (fun (V822) -> {'Idris.Prelude.Types.Left', V822} end(E343)); {'Idris.Prelude.Types.Right', E344} -> (fun (V823) -> begin (V824 = [{'Idris.Builtin.MkPair', V813, {'Idris.Builtin.MkPair', V815, {'Idris.Builtin.MkPair', {'Idris.Core.Context.Hole', V819, V820}, V818}}} | []]), case V823 of {'Idris.Builtin.MkPair', E345, E346} -> (fun (V825, V826) -> begin (V827 = ('Idris.Idris2.Idris.Resugar':'un--pterm'(V0, V2, V825, V707))), case V827 of {'Idris.Prelude.Types.Left', E347} -> (fun (V828) -> {'Idris.Prelude.Types.Left', V828} end(E347)); {'Idris.Prelude.Types.Right', E348} -> (fun (V829) -> begin (V830 = ('Idris.Idris2.Idris.Resugar':'un--pterm'(V0, V2, V826, V707))), case V830 of {'Idris.Prelude.Types.Left', E349} -> (fun (V831) -> {'Idris.Prelude.Types.Left', V831} end(E349)); {'Idris.Prelude.Types.Right', E350} -> (fun (V832) -> begin (V861 = begin (V860 = (('Idris.Idris2.Erlang.Data.IORef':'un--readIORef'('erased', 'erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V833) -> fun (V834) -> fun (V835) -> fun (V836) -> fun (V837) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor__IO'('erased', 'erased', V835, V836, V837)) end end end end end, fun (V838) -> fun (V839) -> fun (V840) -> V839 end end end, fun (V841) -> fun (V842) -> fun (V843) -> fun (V844) -> fun (V845) -> begin (V846 = (V843(V845))), begin (V847 = (V844(V845))), (V846(V847)) end end end end end end end}, fun (V848) -> fun (V849) -> fun (V850) -> fun (V851) -> fun (V852) -> begin (V853 = (V850(V852))), ((V851(V853))(V852)) end end end end end end, fun (V854) -> fun (V855) -> fun (V856) -> begin (V857 = (V855(V856))), (V857(V856)) end end end end}, fun (V858) -> fun (V859) -> V859 end end}, V4))(V707))), {'Idris.Prelude.Types.Right', V860} end), case V861 of {'Idris.Prelude.Types.Left', E351} -> (fun (V862) -> {'Idris.Prelude.Types.Left', V862} end(E351)); {'Idris.Prelude.Types.Right', E352} -> (fun (V863) -> begin (V864 = ('Idris.Idris2.Idris.Syntax':'dn--un--show_Show__PTerm'(case V781 of 0 -> ('Idris.Idris2.Idris.Resugar':'un--addBracket'(('Idris.Idris2.Idris.REPLOpts':'un--replFC'()), V832)); 1 -> V832; _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), begin (V865 = ('Idris.Idris2.Idris.REPLOpts':'un--getSourceLine'(V4, V705, V707))), case V865 of {'Idris.Prelude.Types.Left', E353} -> (fun (V866) -> {'Idris.Prelude.Types.Left', V866} end(E353)); {'Idris.Prelude.Types.Right', E354} -> (fun (V867) -> begin (V868 = {'Idris.Builtin.MkPair', V825, V826}), case V867 of {'Idris.Prelude.Types.Just', E355} -> (fun (V869) -> begin (V870 = {'Idris.Prelude.Types.Just', V869}), (('case--case block in case block in case block in processEdit-8242'(V706, V705, V704, V4, V3, V2, V1, V0, V738, V769, V781, V820, V813, V815, V819, V818, V824, V825, V826, V868, V829, V832, V863, V864, V869, V870, ('Idris.Idris2.Parser.Unlit':'un--isLitLine'(V869))))(V707)) end end(E355)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', {'Idris.Idris.REPL.EditError', ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'un--vsep'('erased', ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', fun (V871) -> ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'un--unsafeTextWithoutNewLines'('erased', V871)) end, ('Idris.Idris2.Data.Strings':'un--lines'(<<"Source line not found"/utf8>>))))))}} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E354)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E352)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E350)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E348)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E345, E346)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E344)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; _ -> {'Idris.Prelude.Types.Right', {'Idris.Idris.REPL.EditError', ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'un--vsep'('erased', ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', fun (V872) -> ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'un--unsafeTextWithoutNewLines'('erased', V872)) end, ('Idris.Idris2.Data.Strings':'un--lines'(<<"Can\x{27}t make lifted definition"/utf8>>))))))}} end end(E341, E342)); _ -> {'Idris.Prelude.Types.Right', {'Idris.Idris.REPL.EditError', ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'un--vsep'('erased', ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', fun (V873) -> ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'un--unsafeTextWithoutNewLines'('erased', V873)) end, ('Idris.Idris2.Data.Strings':'un--lines'(<<"Can\x{27}t make lifted definition"/utf8>>))))))}} end end(E339, E340)); _ -> {'Idris.Prelude.Types.Right', {'Idris.Idris.REPL.EditError', ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'un--vsep'('erased', ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', fun (V874) -> ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'un--unsafeTextWithoutNewLines'('erased', V874)) end, ('Idris.Idris2.Data.Strings':'un--lines'(<<"Can\x{27}t make lifted definition"/utf8>>))))))}} end end(E337, E338)); _ -> {'Idris.Prelude.Types.Right', {'Idris.Idris.REPL.EditError', ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'un--vsep'('erased', ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', fun (V875) -> ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'un--unsafeTextWithoutNewLines'('erased', V875)) end, ('Idris.Idris2.Data.Strings':'un--lines'(<<"Can\x{27}t make lifted definition"/utf8>>))))))}} end end(E335, E336)); _ -> {'Idris.Prelude.Types.Right', {'Idris.Idris.REPL.EditError', ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'un--vsep'('erased', ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', fun (V876) -> ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'un--unsafeTextWithoutNewLines'('erased', V876)) end, ('Idris.Idris2.Data.Strings':'un--lines'(<<"Can\x{27}t make lifted definition"/utf8>>))))))}} end end(E333, E334)); _ -> {'Idris.Prelude.Types.Right', {'Idris.Idris.REPL.EditError', ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'un--vsep'('erased', ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', fun (V877) -> ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'un--unsafeTextWithoutNewLines'('erased', V877)) end, ('Idris.Idris2.Data.Strings':'un--lines'(<<"Can\x{27}t make lifted definition"/utf8>>))))))}} end end(E332)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E295)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E293)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E289, E290, E291)); {'Idris.Idris.Syntax.MakeCase', E356, E357, E358} -> (fun (V878, V879, V880) -> fun (V881) -> begin (V882 = ('Idris.Idris2.Idris.REPLOpts':'un--getLitStyle'(V4, V881))), case V882 of {'Idris.Prelude.Types.Left', E359} -> (fun (V883) -> {'Idris.Prelude.Types.Left', V883} end(E359)); {'Idris.Prelude.Types.Right', E360} -> (fun (V884) -> begin (V913 = begin (V912 = (('Idris.Idris2.Erlang.Data.IORef':'un--readIORef'('erased', 'erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V885) -> fun (V886) -> fun (V887) -> fun (V888) -> fun (V889) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor__IO'('erased', 'erased', V887, V888, V889)) end end end end end, fun (V890) -> fun (V891) -> fun (V892) -> V891 end end end, fun (V893) -> fun (V894) -> fun (V895) -> fun (V896) -> fun (V897) -> begin (V898 = (V895(V897))), begin (V899 = (V896(V897))), (V898(V899)) end end end end end end end}, fun (V900) -> fun (V901) -> fun (V902) -> fun (V903) -> fun (V904) -> begin (V905 = (V902(V904))), ((V903(V905))(V904)) end end end end end end, fun (V906) -> fun (V907) -> fun (V908) -> begin (V909 = (V907(V908))), (V909(V908)) end end end end}, fun (V910) -> fun (V911) -> V911 end end}, V2))(V881))), {'Idris.Prelude.Types.Right', V912} end), case V913 of {'Idris.Prelude.Types.Left', E361} -> (fun (V914) -> {'Idris.Prelude.Types.Left', V914} end(E361)); {'Idris.Prelude.Types.Right', E362} -> (fun (V915) -> begin (V927 = ('Idris.Idris2.Data.List':'un--elemBy'('erased', fun (V916) -> fun (V917) -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq__Name'(('Idris.Idris2.Core.Name':'un--dropNS'(V916)), ('Idris.Idris2.Core.Name':'un--dropNS'(V917)))) end end, V880, case V915 of {'Idris.Idris.Syntax.MkSyntax', E363, E364, E365, E366, E367, E368, E369, E370, E371} -> (fun (V918, V919, V920, V921, V922, V923, V924, V925, V926) -> V924 end(E363, E364, E365, E366, E367, E368, E369, E370, E371)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), begin (V928 = ('Idris.Idris2.Idris.REPLOpts':'un--getSourceLine'(V4, V879, V881))), case V928 of {'Idris.Prelude.Types.Left', E372} -> (fun (V929) -> {'Idris.Prelude.Types.Left', V929} end(E372)); {'Idris.Prelude.Types.Right', E373} -> (fun (V930) -> case V930 of {'Idris.Prelude.Types.Just', E374} -> (fun (V931) -> begin (V932 = {'Idris.Prelude.Types.Just', V931}), (('case--case block in processEdit-8582'(V880, V879, V878, V4, V3, V2, V1, V0, V884, V915, V927, V931, V932, ('Idris.Idris2.Parser.Unlit':'un--unlit'(V884, V931))))(V881)) end end(E374)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', {'Idris.Idris.REPL.EditError', ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'un--vsep'('erased', ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', fun (V933) -> ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'un--unsafeTextWithoutNewLines'('erased', V933)) end, ('Idris.Idris2.Data.Strings':'un--lines'(<<"Source line not available"/utf8>>))))))}} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E373)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E362)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E360)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E356, E357, E358)); {'Idris.Idris.Syntax.MakeWith', E375, E376, E377} -> (fun (V934, V935, V936) -> fun (V937) -> begin (V938 = ('Idris.Idris2.Idris.REPLOpts':'un--getLitStyle'(V4, V937))), case V938 of {'Idris.Prelude.Types.Left', E378} -> (fun (V939) -> {'Idris.Prelude.Types.Left', V939} end(E378)); {'Idris.Prelude.Types.Right', E379} -> (fun (V940) -> begin (V941 = ('Idris.Idris2.Idris.REPLOpts':'un--getSourceLine'(V4, V935, V937))), case V941 of {'Idris.Prelude.Types.Left', E380} -> (fun (V942) -> {'Idris.Prelude.Types.Left', V942} end(E380)); {'Idris.Prelude.Types.Right', E381} -> (fun (V943) -> case V943 of {'Idris.Prelude.Types.Just', E382} -> (fun (V944) -> begin (V945 = {'Idris.Prelude.Types.Just', V944}), (('case--case block in processEdit-8843'(V936, V935, V934, V4, V3, V2, V1, V0, V940, V944, V945, ('Idris.Idris2.Parser.Unlit':'un--unlit'(V940, V944))))(V937)) end end(E382)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', {'Idris.Idris.REPL.EditError', ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'un--vsep'('erased', ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', fun (V946) -> ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'un--unsafeTextWithoutNewLines'('erased', V946)) end, ('Idris.Idris2.Data.Strings':'un--lines'(<<"Source line not available"/utf8>>))))))}} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E381)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E379)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E375, E376, E377)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--processCatch'(V0, V1, V2, V3, V4, V5, V6) -> begin (V7 = ('Idris.Idris2.Core.Context':'un--branch'(V0, V6))), case V7 of {'Idris.Prelude.Types.Left', E0} -> (fun (V8) -> {'Idris.Prelude.Types.Left', V8} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V9) -> begin (V38 = begin (V37 = (('Idris.Idris2.Erlang.Data.IORef':'un--readIORef'('erased', 'erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V10) -> fun (V11) -> fun (V12) -> fun (V13) -> fun (V14) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor__IO'('erased', 'erased', V12, V13, V14)) end end end end end, fun (V15) -> fun (V16) -> fun (V17) -> V16 end end end, fun (V18) -> fun (V19) -> fun (V20) -> fun (V21) -> fun (V22) -> begin (V23 = (V20(V22))), begin (V24 = (V21(V22))), (V23(V24)) end end end end end end end}, fun (V25) -> fun (V26) -> fun (V27) -> fun (V28) -> fun (V29) -> begin (V30 = (V27(V29))), ((V28(V30))(V29)) end end end end end end, fun (V31) -> fun (V32) -> fun (V33) -> begin (V34 = (V32(V33))), (V34(V33)) end end end end}, fun (V35) -> fun (V36) -> V36 end end}, V1))(V6))), {'Idris.Prelude.Types.Right', V37} end), case V38 of {'Idris.Prelude.Types.Left', E2} -> (fun (V39) -> {'Idris.Prelude.Types.Left', V39} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V40) -> begin (V69 = begin (V68 = (('Idris.Idris2.Erlang.Data.IORef':'un--readIORef'('erased', 'erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V41) -> fun (V42) -> fun (V43) -> fun (V44) -> fun (V45) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor__IO'('erased', 'erased', V43, V44, V45)) end end end end end, fun (V46) -> fun (V47) -> fun (V48) -> V47 end end end, fun (V49) -> fun (V50) -> fun (V51) -> fun (V52) -> fun (V53) -> begin (V54 = (V51(V53))), begin (V55 = (V52(V53))), (V54(V55)) end end end end end end end}, fun (V56) -> fun (V57) -> fun (V58) -> fun (V59) -> fun (V60) -> begin (V61 = (V58(V60))), ((V59(V61))(V60)) end end end end end end, fun (V62) -> fun (V63) -> fun (V64) -> begin (V65 = (V63(V64))), (V65(V64)) end end end end}, fun (V66) -> fun (V67) -> V67 end end}, V2))(V6))), {'Idris.Prelude.Types.Right', V68} end), case V69 of {'Idris.Prelude.Types.Left', E4} -> (fun (V70) -> {'Idris.Prelude.Types.Left', V70} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V71) -> begin (V100 = begin (V99 = (('Idris.Idris2.Erlang.Data.IORef':'un--readIORef'('erased', 'erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V72) -> fun (V73) -> fun (V74) -> fun (V75) -> fun (V76) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor__IO'('erased', 'erased', V74, V75, V76)) end end end end end, fun (V77) -> fun (V78) -> fun (V79) -> V78 end end end, fun (V80) -> fun (V81) -> fun (V82) -> fun (V83) -> fun (V84) -> begin (V85 = (V82(V84))), begin (V86 = (V83(V84))), (V85(V86)) end end end end end end end}, fun (V87) -> fun (V88) -> fun (V89) -> fun (V90) -> fun (V91) -> begin (V92 = (V89(V91))), ((V90(V92))(V91)) end end end end end end, fun (V93) -> fun (V94) -> fun (V95) -> begin (V96 = (V94(V95))), (V96(V95)) end end end end}, fun (V97) -> fun (V98) -> V98 end end}, V4))(V6))), {'Idris.Prelude.Types.Right', V99} end), case V100 of {'Idris.Prelude.Types.Left', E6} -> (fun (V101) -> {'Idris.Prelude.Types.Left', V101} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V102) -> ('Idris.Idris2.Core.Core':'dn--un--catch_Catchable__Core_Error'('erased', fun (V103) -> begin (V104 = (('un--process'(V0, V1, V2, V3, V4, V5))(V103))), case V104 of {'Idris.Prelude.Types.Left', E8} -> (fun (V105) -> {'Idris.Prelude.Types.Left', V105} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V106) -> begin (V107 = ('Idris.Idris2.Core.Context':'un--commit'(V0, V103))), case V107 of {'Idris.Prelude.Types.Left', E10} -> (fun (V108) -> {'Idris.Prelude.Types.Left', V108} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V109) -> {'Idris.Prelude.Types.Right', V106} end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end, fun (V110) -> fun (V111) -> begin (V140 = begin (V139 = (('Idris.Idris2.Erlang.Data.IORef':'un--writeIORef'('erased', 'erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V112) -> fun (V113) -> fun (V114) -> fun (V115) -> fun (V116) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor__IO'('erased', 'erased', V114, V115, V116)) end end end end end, fun (V117) -> fun (V118) -> fun (V119) -> V118 end end end, fun (V120) -> fun (V121) -> fun (V122) -> fun (V123) -> fun (V124) -> begin (V125 = (V122(V124))), begin (V126 = (V123(V124))), (V125(V126)) end end end end end end end}, fun (V127) -> fun (V128) -> fun (V129) -> fun (V130) -> fun (V131) -> begin (V132 = (V129(V131))), ((V130(V132))(V131)) end end end end end end, fun (V133) -> fun (V134) -> fun (V135) -> begin (V136 = (V134(V135))), (V136(V135)) end end end end}, fun (V137) -> fun (V138) -> V138 end end}, V0, V9))(V111))), {'Idris.Prelude.Types.Right', V139} end), case V140 of {'Idris.Prelude.Types.Left', E12} -> (fun (V141) -> {'Idris.Prelude.Types.Left', V141} end(E12)); {'Idris.Prelude.Types.Right', E13} -> (fun (V142) -> begin (V171 = begin (V170 = (('Idris.Idris2.Erlang.Data.IORef':'un--writeIORef'('erased', 'erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V143) -> fun (V144) -> fun (V145) -> fun (V146) -> fun (V147) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor__IO'('erased', 'erased', V145, V146, V147)) end end end end end, fun (V148) -> fun (V149) -> fun (V150) -> V149 end end end, fun (V151) -> fun (V152) -> fun (V153) -> fun (V154) -> fun (V155) -> begin (V156 = (V153(V155))), begin (V157 = (V154(V155))), (V156(V157)) end end end end end end end}, fun (V158) -> fun (V159) -> fun (V160) -> fun (V161) -> fun (V162) -> begin (V163 = (V160(V162))), ((V161(V163))(V162)) end end end end end end, fun (V164) -> fun (V165) -> fun (V166) -> begin (V167 = (V165(V166))), (V167(V166)) end end end end}, fun (V168) -> fun (V169) -> V169 end end}, V1, V40))(V111))), {'Idris.Prelude.Types.Right', V170} end), case V171 of {'Idris.Prelude.Types.Left', E14} -> (fun (V172) -> {'Idris.Prelude.Types.Left', V172} end(E14)); {'Idris.Prelude.Types.Right', E15} -> (fun (V173) -> begin (V202 = begin (V201 = (('Idris.Idris2.Erlang.Data.IORef':'un--writeIORef'('erased', 'erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V174) -> fun (V175) -> fun (V176) -> fun (V177) -> fun (V178) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor__IO'('erased', 'erased', V176, V177, V178)) end end end end end, fun (V179) -> fun (V180) -> fun (V181) -> V180 end end end, fun (V182) -> fun (V183) -> fun (V184) -> fun (V185) -> fun (V186) -> begin (V187 = (V184(V186))), begin (V188 = (V185(V186))), (V187(V188)) end end end end end end end}, fun (V189) -> fun (V190) -> fun (V191) -> fun (V192) -> fun (V193) -> begin (V194 = (V191(V193))), ((V192(V194))(V193)) end end end end end end, fun (V195) -> fun (V196) -> fun (V197) -> begin (V198 = (V196(V197))), (V198(V197)) end end end end}, fun (V199) -> fun (V200) -> V200 end end}, V2, V71))(V111))), {'Idris.Prelude.Types.Right', V201} end), case V202 of {'Idris.Prelude.Types.Left', E16} -> (fun (V203) -> {'Idris.Prelude.Types.Left', V203} end(E16)); {'Idris.Prelude.Types.Right', E17} -> (fun (V204) -> begin (V233 = begin (V232 = (('Idris.Idris2.Erlang.Data.IORef':'un--writeIORef'('erased', 'erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V205) -> fun (V206) -> fun (V207) -> fun (V208) -> fun (V209) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor__IO'('erased', 'erased', V207, V208, V209)) end end end end end, fun (V210) -> fun (V211) -> fun (V212) -> V211 end end end, fun (V213) -> fun (V214) -> fun (V215) -> fun (V216) -> fun (V217) -> begin (V218 = (V215(V217))), begin (V219 = (V216(V217))), (V218(V219)) end end end end end end end}, fun (V220) -> fun (V221) -> fun (V222) -> fun (V223) -> fun (V224) -> begin (V225 = (V222(V224))), ((V223(V225))(V224)) end end end end end end, fun (V226) -> fun (V227) -> fun (V228) -> begin (V229 = (V227(V228))), (V229(V228)) end end end end}, fun (V230) -> fun (V231) -> V231 end end}, V4, V102))(V111))), {'Idris.Prelude.Types.Right', V232} end), case V233 of {'Idris.Prelude.Types.Left', E18} -> (fun (V234) -> {'Idris.Prelude.Types.Left', V234} end(E18)); {'Idris.Prelude.Types.Right', E19} -> (fun (V235) -> begin (V236 = ('Idris.Idris2.Idris.Error':'un--display'(V0, V2, V4, V110, V111))), case V236 of {'Idris.Prelude.Types.Left', E20} -> (fun (V237) -> {'Idris.Prelude.Types.Left', V237} end(E20)); {'Idris.Prelude.Types.Right', E21} -> (fun (V238) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.REPL.REPLError', V238}} end(E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E19)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E17)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end, V6)) end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--process'(V0, V1, V2, V3, V4, V5) -> case V5 of {'Idris.Idris.Syntax.NewDefn', E0} -> (fun (V6) -> fun (V7) -> ('un--execDecls'(V0, V1, V2, V3, V6, V7)) end end(E0)); {'Idris.Idris.Syntax.Eval', E1} -> (fun (V8) -> fun (V9) -> begin (V38 = begin (V37 = (('Idris.Idris2.Erlang.Data.IORef':'un--readIORef'('erased', 'erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V10) -> fun (V11) -> fun (V12) -> fun (V13) -> fun (V14) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor__IO'('erased', 'erased', V12, V13, V14)) end end end end end, fun (V15) -> fun (V16) -> fun (V17) -> V16 end end end, fun (V18) -> fun (V19) -> fun (V20) -> fun (V21) -> fun (V22) -> begin (V23 = (V20(V22))), begin (V24 = (V21(V22))), (V23(V24)) end end end end end end end}, fun (V25) -> fun (V26) -> fun (V27) -> fun (V28) -> fun (V29) -> begin (V30 = (V27(V29))), ((V28(V30))(V29)) end end end end end end, fun (V31) -> fun (V32) -> fun (V33) -> begin (V34 = (V32(V33))), (V34(V33)) end end end end}, fun (V35) -> fun (V36) -> V36 end end}, V4))(V9))), {'Idris.Prelude.Types.Right', V37} end), case V38 of {'Idris.Prelude.Types.Left', E2} -> (fun (V39) -> {'Idris.Prelude.Types.Left', V39} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V40) -> (('case--process-9559'(V8, V4, V3, V2, V1, V0, V40, case V40 of {'Idris.Idris.REPLOpts.MkREPLOpts', E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17} -> (fun (V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54) -> V42 end(E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V9)) end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E1)); {'Idris.Idris.Syntax.Check', E18} -> (fun (V55) -> case V55 of {'Idris.Idris.Syntax.PRef', E39, E40} -> (fun (V56, V57) -> fun (V58) -> begin (V87 = begin (V86 = (('Idris.Idris2.Erlang.Data.IORef':'un--readIORef'('erased', 'erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V59) -> fun (V60) -> fun (V61) -> fun (V62) -> fun (V63) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor__IO'('erased', 'erased', V61, V62, V63)) end end end end end, fun (V64) -> fun (V65) -> fun (V66) -> V65 end end end, fun (V67) -> fun (V68) -> fun (V69) -> fun (V70) -> fun (V71) -> begin (V72 = (V69(V71))), begin (V73 = (V70(V71))), (V72(V73)) end end end end end end end}, fun (V74) -> fun (V75) -> fun (V76) -> fun (V77) -> fun (V78) -> begin (V79 = (V76(V78))), ((V77(V79))(V78)) end end end end end end, fun (V80) -> fun (V81) -> fun (V82) -> begin (V83 = (V81(V82))), (V83(V82)) end end end end}, fun (V84) -> fun (V85) -> V85 end end}, V0))(V58))), {'Idris.Prelude.Types.Right', V86} end), case V87 of {'Idris.Prelude.Types.Left', E41} -> (fun (V88) -> {'Idris.Prelude.Types.Left', V88} end(E41)); {'Idris.Prelude.Types.Right', E42} -> (fun (V89) -> begin (V116 = (('Idris.Idris2.Core.Context':'un--lookupCtxtName'(V57, case V89 of {'Idris.Core.Context.MkDefs', E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57, E58, E59, E60, E61, E62, E63, E64, E65, E66, E67, E68} -> (fun (V90, V91, V92, V93, V94, V95, V96, V97, V98, V99, V100, V101, V102, V103, V104, V105, V106, V107, V108, V109, V110, V111, V112, V113, V114, V115) -> V90 end(E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57, E58, E59, E60, E61, E62, E63, E64, E65, E66, E67, E68)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V58))), case V116 of {'Idris.Prelude.Types.Left', E69} -> (fun (V117) -> {'Idris.Prelude.Types.Left', V117} end(E69)); {'Idris.Prelude.Types.Right', E70} -> (fun (V118) -> case V118 of [] -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable__Core_Error'('erased', {'Idris.Core.Core.UndefinedName', V56, V57}, V58)); _ -> begin (V120 = (('Idris.Idris2.Core.Core':'un--traverse'('erased', 'erased', fun (V119) -> ('un--displayType'(V0, V2, V89, V119)) end, V118))(V58))), case V120 of {'Idris.Prelude.Types.Left', E71} -> (fun (V121) -> {'Idris.Prelude.Types.Left', V121} end(E71)); {'Idris.Prelude.Types.Right', E72} -> (fun (V122) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.REPL.Printed', ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'un--vsep'('erased', V122))}} end(E72)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E70)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E42)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E39, E40)); _ -> fun (V123) -> begin (V124 = (('Idris.Idris2.Core.Context':'un--resolveName'(V0, {'Idris.Core.Name.UN', <<"[input]"/utf8>>}))(V123))), case V124 of {'Idris.Prelude.Types.Left', E19} -> (fun (V125) -> {'Idris.Prelude.Types.Left', V125} end(E19)); {'Idris.Prelude.Types.Right', E20} -> (fun (V126) -> begin (V127 = ('Idris.Idris2.Idris.Desugar':'un--desugar'(V2, V0, V3, V1, {'Idris.Idris.Desugar.AnyExpr'}, [], V55, V123))), case V127 of {'Idris.Prelude.Types.Left', E21} -> (fun (V128) -> {'Idris.Prelude.Types.Left', V128} end(E21)); {'Idris.Prelude.Types.Right', E22} -> (fun (V129) -> begin (V130 = (('Idris.Idris2.TTImp.Elab':'un--elabTerm'([], V0, V3, V1, V126, {'Idris.TTImp.Elab.Check.InExpr'}, [], [], {'Idris.Core.Env.Nil'}, V129, {'Idris.Prelude.Types.Nothing'}))(V123))), case V130 of {'Idris.Prelude.Types.Left', E23} -> (fun (V131) -> {'Idris.Prelude.Types.Left', V131} end(E23)); {'Idris.Prelude.Types.Right', E24} -> (fun (V132) -> case V132 of {'Idris.Builtin.MkPair', E25, E26} -> (fun (V133, V134) -> begin (V163 = begin (V162 = (('Idris.Idris2.Erlang.Data.IORef':'un--readIORef'('erased', 'erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V135) -> fun (V136) -> fun (V137) -> fun (V138) -> fun (V139) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor__IO'('erased', 'erased', V137, V138, V139)) end end end end end, fun (V140) -> fun (V141) -> fun (V142) -> V141 end end end, fun (V143) -> fun (V144) -> fun (V145) -> fun (V146) -> fun (V147) -> begin (V148 = (V145(V147))), begin (V149 = (V146(V147))), (V148(V149)) end end end end end end end}, fun (V150) -> fun (V151) -> fun (V152) -> fun (V153) -> fun (V154) -> begin (V155 = (V152(V154))), ((V153(V155))(V154)) end end end end end end, fun (V156) -> fun (V157) -> fun (V158) -> begin (V159 = (V157(V158))), (V159(V158)) end end end end}, fun (V160) -> fun (V161) -> V161 end end}, V0))(V123))), {'Idris.Prelude.Types.Right', V162} end), case V163 of {'Idris.Prelude.Types.Left', E27} -> (fun (V164) -> {'Idris.Prelude.Types.Left', V164} end(E27)); {'Idris.Prelude.Types.Right', E28} -> (fun (V165) -> begin (V169 = begin (V166 = ('Idris.Idris2.Core.Normalise':'un--normaliseHoles'(V0, [], V165, {'Idris.Core.Env.Nil'}, V133, V123))), case V166 of {'Idris.Prelude.Types.Left', E29} -> (fun (V167) -> {'Idris.Prelude.Types.Left', V167} end(E29)); {'Idris.Prelude.Types.Right', E30} -> (fun (V168) -> ('Idris.Idris2.Idris.Resugar':'un--resugar'([], V0, V2, {'Idris.Core.Env.Nil'}, V168, V123)) end(E30)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V169 of {'Idris.Prelude.Types.Left', E31} -> (fun (V170) -> {'Idris.Prelude.Types.Left', V170} end(E31)); {'Idris.Prelude.Types.Right', E32} -> (fun (V171) -> begin (V172 = (('Idris.Idris2.Core.Normalise':'un--getTerm'('erased', V134))(V123))), case V172 of {'Idris.Prelude.Types.Left', E33} -> (fun (V173) -> {'Idris.Prelude.Types.Left', V173} end(E33)); {'Idris.Prelude.Types.Right', E34} -> (fun (V174) -> begin (V178 = begin (V175 = (('Idris.Idris2.Core.Normalise':'un--normaliseScope'(V0, [], V165, {'Idris.Core.Env.Nil'}, V174))(V123))), case V175 of {'Idris.Prelude.Types.Left', E35} -> (fun (V176) -> {'Idris.Prelude.Types.Left', V176} end(E35)); {'Idris.Prelude.Types.Right', E36} -> (fun (V177) -> ('Idris.Idris2.Idris.Resugar':'un--resugar'([], V0, V2, {'Idris.Core.Env.Nil'}, V177, V123)) end(E36)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V178 of {'Idris.Prelude.Types.Left', E37} -> (fun (V179) -> {'Idris.Prelude.Types.Left', V179} end(E37)); {'Idris.Prelude.Types.Right', E38} -> (fun (V180) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.REPL.TermChecked', V171, V180}} end(E38)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E34)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E32)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E28)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E25, E26)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E24)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E22)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E20)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end(E18)); {'Idris.Idris.Syntax.PrintDef', E73} -> (fun (V181) -> fun (V182) -> begin (V211 = begin (V210 = (('Idris.Idris2.Erlang.Data.IORef':'un--readIORef'('erased', 'erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V183) -> fun (V184) -> fun (V185) -> fun (V186) -> fun (V187) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor__IO'('erased', 'erased', V185, V186, V187)) end end end end end, fun (V188) -> fun (V189) -> fun (V190) -> V189 end end end, fun (V191) -> fun (V192) -> fun (V193) -> fun (V194) -> fun (V195) -> begin (V196 = (V193(V195))), begin (V197 = (V194(V195))), (V196(V197)) end end end end end end end}, fun (V198) -> fun (V199) -> fun (V200) -> fun (V201) -> fun (V202) -> begin (V203 = (V200(V202))), ((V201(V203))(V202)) end end end end end end, fun (V204) -> fun (V205) -> fun (V206) -> begin (V207 = (V205(V206))), (V207(V206)) end end end end}, fun (V208) -> fun (V209) -> V209 end end}, V0))(V182))), {'Idris.Prelude.Types.Right', V210} end), case V211 of {'Idris.Prelude.Types.Left', E74} -> (fun (V212) -> {'Idris.Prelude.Types.Left', V212} end(E74)); {'Idris.Prelude.Types.Right', E75} -> (fun (V213) -> begin (V240 = (('Idris.Idris2.Core.Context':'un--lookupCtxtName'(V181, case V213 of {'Idris.Core.Context.MkDefs', E76, E77, E78, E79, E80, E81, E82, E83, E84, E85, E86, E87, E88, E89, E90, E91, E92, E93, E94, E95, E96, E97, E98, E99, E100, E101} -> (fun (V214, V215, V216, V217, V218, V219, V220, V221, V222, V223, V224, V225, V226, V227, V228, V229, V230, V231, V232, V233, V234, V235, V236, V237, V238, V239) -> V214 end(E76, E77, E78, E79, E80, E81, E82, E83, E84, E85, E86, E87, E88, E89, E90, E91, E92, E93, E94, E95, E96, E97, E98, E99, E100, E101)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V182))), case V240 of {'Idris.Prelude.Types.Left', E102} -> (fun (V241) -> {'Idris.Prelude.Types.Left', V241} end(E102)); {'Idris.Prelude.Types.Right', E103} -> (fun (V242) -> case V242 of [] -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable__Core_Error'('erased', {'Idris.Core.Core.UndefinedName', ('Idris.Idris2.Idris.REPLOpts':'un--replFC'()), V181}, V182)); _ -> begin (V244 = (('Idris.Idris2.Core.Core':'un--traverse'('erased', 'erased', fun (V243) -> ('un--displayPats'(V0, V2, V213, V243)) end, V242))(V182))), case V244 of {'Idris.Prelude.Types.Left', E104} -> (fun (V245) -> {'Idris.Prelude.Types.Left', V245} end(E104)); {'Idris.Prelude.Types.Right', E105} -> (fun (V246) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.REPL.Printed', ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'un--vsep'('erased', V246))}} end(E105)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E103)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E75)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E73)); {'Idris.Idris.Syntax.Reload'} -> (fun () -> fun (V247) -> begin (V276 = begin (V275 = (('Idris.Idris2.Erlang.Data.IORef':'un--readIORef'('erased', 'erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V248) -> fun (V249) -> fun (V250) -> fun (V251) -> fun (V252) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor__IO'('erased', 'erased', V250, V251, V252)) end end end end end, fun (V253) -> fun (V254) -> fun (V255) -> V254 end end end, fun (V256) -> fun (V257) -> fun (V258) -> fun (V259) -> fun (V260) -> begin (V261 = (V258(V260))), begin (V262 = (V259(V260))), (V261(V262)) end end end end end end end}, fun (V263) -> fun (V264) -> fun (V265) -> fun (V266) -> fun (V267) -> begin (V268 = (V265(V267))), ((V266(V268))(V267)) end end end end end end, fun (V269) -> fun (V270) -> fun (V271) -> begin (V272 = (V270(V271))), (V272(V271)) end end end end}, fun (V273) -> fun (V274) -> V274 end end}, V4))(V247))), {'Idris.Prelude.Types.Right', V275} end), case V276 of {'Idris.Prelude.Types.Left', E106} -> (fun (V277) -> {'Idris.Prelude.Types.Left', V277} end(E106)); {'Idris.Prelude.Types.Right', E107} -> (fun (V278) -> (('case--process-10139'(V4, V3, V2, V1, V0, V278, case V278 of {'Idris.Idris.REPLOpts.MkREPLOpts', E108, E109, E110, E111, E112, E113, E114, E115, E116, E117, E118, E119, E120, E121} -> (fun (V279, V280, V281, V282, V283, V284, V285, V286, V287, V288, V289, V290, V291, V292) -> V281 end(E108, E109, E110, E111, E112, E113, E114, E115, E116, E117, E118, E119, E120, E121)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V247)) end(E107)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end()); {'Idris.Idris.Syntax.Load', E122} -> (fun (V293) -> fun (V294) -> begin (V323 = begin (V322 = (('Idris.Idris2.Erlang.Data.IORef':'un--readIORef'('erased', 'erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V295) -> fun (V296) -> fun (V297) -> fun (V298) -> fun (V299) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor__IO'('erased', 'erased', V297, V298, V299)) end end end end end, fun (V300) -> fun (V301) -> fun (V302) -> V301 end end end, fun (V303) -> fun (V304) -> fun (V305) -> fun (V306) -> fun (V307) -> begin (V308 = (V305(V307))), begin (V309 = (V306(V307))), (V308(V309)) end end end end end end end}, fun (V310) -> fun (V311) -> fun (V312) -> fun (V313) -> fun (V314) -> begin (V315 = (V312(V314))), ((V313(V315))(V314)) end end end end end end, fun (V316) -> fun (V317) -> fun (V318) -> begin (V319 = (V317(V318))), (V319(V318)) end end end end}, fun (V320) -> fun (V321) -> V321 end end}, V4))(V294))), {'Idris.Prelude.Types.Right', V322} end), case V323 of {'Idris.Prelude.Types.Left', E123} -> (fun (V324) -> {'Idris.Prelude.Types.Left', V324} end(E123)); {'Idris.Prelude.Types.Right', E124} -> (fun (V325) -> begin (V368 = begin (V367 = (('Idris.Idris2.Erlang.Data.IORef':'un--writeIORef'('erased', 'erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V326) -> fun (V327) -> fun (V328) -> fun (V329) -> fun (V330) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor__IO'('erased', 'erased', V328, V329, V330)) end end end end end, fun (V331) -> fun (V332) -> fun (V333) -> V332 end end end, fun (V334) -> fun (V335) -> fun (V336) -> fun (V337) -> fun (V338) -> begin (V339 = (V336(V338))), begin (V340 = (V337(V338))), (V339(V340)) end end end end end end end}, fun (V341) -> fun (V342) -> fun (V343) -> fun (V344) -> fun (V345) -> begin (V346 = (V343(V345))), ((V344(V346))(V345)) end end end end end end, fun (V347) -> fun (V348) -> fun (V349) -> begin (V350 = (V348(V349))), (V350(V349)) end end end end}, fun (V351) -> fun (V352) -> V352 end end}, V4, case V325 of {'Idris.Idris.REPLOpts.MkREPLOpts', E125, E126, E127, E128, E129, E130, E131, E132, E133, E134, E135, E136, E137, E138} -> (fun (V353, V354, V355, V356, V357, V358, V359, V360, V361, V362, V363, V364, V365, V366) -> {'Idris.Idris.REPLOpts.MkREPLOpts', V353, V354, {'Idris.Prelude.Types.Just', V293}, V356, V357, V358, V359, V360, V361, V362, V363, V364, V365, V366} end(E125, E126, E127, E128, E129, E130, E131, E132, E133, E134, E135, E136, E137, E138)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V294))), {'Idris.Prelude.Types.Right', V367} end), case V368 of {'Idris.Prelude.Types.Left', E139} -> (fun (V369) -> {'Idris.Prelude.Types.Left', V369} end(E139)); {'Idris.Prelude.Types.Right', E140} -> (fun (V370) -> ('un--loadMainFile'(V0, V1, V2, V3, V4, V293, V294)) end(E140)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E124)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E122)); {'Idris.Idris.Syntax.ImportMod', E141} -> (fun (V371) -> fun (V372) -> ('Idris.Idris2.Core.Core':'dn--un--catch_Catchable__Core_Error'('erased', fun (V373) -> begin (V374 = ('Idris.Idris2.Idris.ProcessIdr':'un--addImport'(V0, V1, V2, {'Idris.Idris.Syntax.MkImport', ('Idris.Idris2.Core.FC':'un--emptyFC'()), 1, V371, ('Idris.Idris2.Core.Name.Namespace':'un--miAsNamespace'(V371))}, V373))), case V374 of {'Idris.Prelude.Types.Left', E142} -> (fun (V375) -> {'Idris.Prelude.Types.Left', V375} end(E142)); {'Idris.Prelude.Types.Right', E143} -> (fun (V376) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.REPL.ModuleLoaded', ('Idris.Idris2.Core.Name.Namespace':'dn--un--show_Show__ModuleIdent'(V371))}} end(E143)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end, fun (V377) -> fun (V378) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.REPL.ErrorLoadingModule', ('Idris.Idris2.Core.Name.Namespace':'dn--un--show_Show__ModuleIdent'(V371)), V377}} end end, V372)) end end(E141)); {'Idris.Idris.Syntax.CD', E144} -> (fun (V379) -> fun (V380) -> begin (V381 = ('Idris.Idris2.Core.Context':'un--setWorkingDir'(V0, V379, V380))), case V381 of {'Idris.Prelude.Types.Left', E145} -> (fun (V382) -> {'Idris.Prelude.Types.Left', V382} end(E145)); {'Idris.Prelude.Types.Right', E146} -> (fun (V383) -> begin (V384 = ('Idris.Idris2.Core.Context':'un--getWorkingDir'(V380))), case V384 of {'Idris.Prelude.Types.Left', E147} -> (fun (V385) -> {'Idris.Prelude.Types.Left', V385} end(E147)); {'Idris.Prelude.Types.Right', E148} -> (fun (V386) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.REPL.CurrentDirectory', V386}} end(E148)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E146)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E144)); {'Idris.Idris.Syntax.CWD'} -> (fun () -> fun (V387) -> begin (V388 = ('Idris.Idris2.Core.Context':'un--getWorkingDir'(V387))), case V388 of {'Idris.Prelude.Types.Left', E149} -> (fun (V389) -> {'Idris.Prelude.Types.Left', V389} end(E149)); {'Idris.Prelude.Types.Right', E150} -> (fun (V390) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.REPL.CurrentDirectory', V390}} end(E150)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end()); {'Idris.Idris.Syntax.Edit'} -> (fun () -> fun (V391) -> begin (V420 = begin (V419 = (('Idris.Idris2.Erlang.Data.IORef':'un--readIORef'('erased', 'erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V392) -> fun (V393) -> fun (V394) -> fun (V395) -> fun (V396) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor__IO'('erased', 'erased', V394, V395, V396)) end end end end end, fun (V397) -> fun (V398) -> fun (V399) -> V398 end end end, fun (V400) -> fun (V401) -> fun (V402) -> fun (V403) -> fun (V404) -> begin (V405 = (V402(V404))), begin (V406 = (V403(V404))), (V405(V406)) end end end end end end end}, fun (V407) -> fun (V408) -> fun (V409) -> fun (V410) -> fun (V411) -> begin (V412 = (V409(V411))), ((V410(V412))(V411)) end end end end end end, fun (V413) -> fun (V414) -> fun (V415) -> begin (V416 = (V414(V415))), (V416(V415)) end end end end}, fun (V417) -> fun (V418) -> V418 end end}, V4))(V391))), {'Idris.Prelude.Types.Right', V419} end), case V420 of {'Idris.Prelude.Types.Left', E151} -> (fun (V421) -> {'Idris.Prelude.Types.Left', V421} end(E151)); {'Idris.Prelude.Types.Right', E152} -> (fun (V422) -> (('case--process-10293'(V4, V3, V2, V1, V0, V422, case V422 of {'Idris.Idris.REPLOpts.MkREPLOpts', E153, E154, E155, E156, E157, E158, E159, E160, E161, E162, E163, E164, E165, E166} -> (fun (V423, V424, V425, V426, V427, V428, V429, V430, V431, V432, V433, V434, V435, V436) -> V425 end(E153, E154, E155, E156, E157, E158, E159, E160, E161, E162, E163, E164, E165, E166)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V391)) end(E152)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end()); {'Idris.Idris.Syntax.Compile', E167, E168} -> (fun (V437, V438) -> fun (V439) -> ('un--compileExp'(V0, V1, V2, V3, V4, V437, V438, V439)) end end(E167, E168)); {'Idris.Idris.Syntax.Exec', E169} -> (fun (V440) -> fun (V441) -> ('un--execExp'(V0, V1, V2, V3, V4, V440, V441)) end end(E169)); {'Idris.Idris.Syntax.Help'} -> (fun () -> fun (V442) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.REPL.RequestedHelp'}} end end()); {'Idris.Idris.Syntax.ProofSearch', E170} -> (fun (V443) -> fun (V444) -> begin (V473 = begin (V472 = (('Idris.Idris2.Erlang.Data.IORef':'un--readIORef'('erased', 'erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V445) -> fun (V446) -> fun (V447) -> fun (V448) -> fun (V449) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor__IO'('erased', 'erased', V447, V448, V449)) end end end end end, fun (V450) -> fun (V451) -> fun (V452) -> V451 end end end, fun (V453) -> fun (V454) -> fun (V455) -> fun (V456) -> fun (V457) -> begin (V458 = (V455(V457))), begin (V459 = (V456(V457))), (V458(V459)) end end end end end end end}, fun (V460) -> fun (V461) -> fun (V462) -> fun (V463) -> fun (V464) -> begin (V465 = (V462(V464))), ((V463(V465))(V464)) end end end end end end, fun (V466) -> fun (V467) -> fun (V468) -> begin (V469 = (V467(V468))), (V469(V468)) end end end end}, fun (V470) -> fun (V471) -> V471 end end}, V0))(V444))), {'Idris.Prelude.Types.Right', V472} end), case V473 of {'Idris.Prelude.Types.Left', E171} -> (fun (V474) -> {'Idris.Prelude.Types.Left', V474} end(E171)); {'Idris.Prelude.Types.Right', E172} -> (fun (V475) -> begin (V502 = ('Idris.Idris2.Core.Context':'un--lookupTyName'(V443, case V475 of {'Idris.Core.Context.MkDefs', E173, E174, E175, E176, E177, E178, E179, E180, E181, E182, E183, E184, E185, E186, E187, E188, E189, E190, E191, E192, E193, E194, E195, E196, E197, E198} -> (fun (V476, V477, V478, V479, V480, V481, V482, V483, V484, V485, V486, V487, V488, V489, V490, V491, V492, V493, V494, V495, V496, V497, V498, V499, V500, V501) -> V476 end(E173, E174, E175, E176, E177, E178, E179, E180, E181, E182, E183, E184, E185, E186, E187, E188, E189, E190, E191, E192, E193, E194, E195, E196, E197, E198)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V444))), case V502 of {'Idris.Prelude.Types.Left', E199} -> (fun (V503) -> {'Idris.Prelude.Types.Left', V503} end(E199)); {'Idris.Prelude.Types.Right', E200} -> (fun (V504) -> case V504 of [E201 | E202] -> (fun (V505, V506) -> case V505 of {'Idris.Builtin.MkPair', E203, E204} -> (fun (V507, V508) -> case V508 of {'Idris.Builtin.MkPair', E205, E206} -> (fun (V509, V510) -> case V506 of [] -> begin (V511 = ('Idris.Idris2.Core.Unify':'un--search'([], V0, V1, ('Idris.Idris2.Idris.REPLOpts':'un--replFC'()), ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--top_Top__ZeroOneOmega'()), 1, ('Idris.Idris2.Prelude.Types':'dn--un--fromInteger_Num__Nat'(1000)), V507, V510, {'Idris.Core.Env.Nil'}, V444))), case V511 of {'Idris.Prelude.Types.Left', E207} -> (fun (V512) -> {'Idris.Prelude.Types.Left', V512} end(E207)); {'Idris.Prelude.Types.Right', E208} -> (fun (V513) -> begin (V517 = begin (V514 = ('Idris.Idris2.Core.Normalise':'un--normaliseHoles'(V0, [], V475, {'Idris.Core.Env.Nil'}, V513, V444))), case V514 of {'Idris.Prelude.Types.Left', E209} -> (fun (V515) -> {'Idris.Prelude.Types.Left', V515} end(E209)); {'Idris.Prelude.Types.Right', E210} -> (fun (V516) -> ('Idris.Idris2.Idris.Resugar':'un--resugar'([], V0, V2, {'Idris.Core.Env.Nil'}, V516, V444)) end(E210)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V517 of {'Idris.Prelude.Types.Left', E211} -> (fun (V518) -> {'Idris.Prelude.Types.Left', V518} end(E211)); {'Idris.Prelude.Types.Right', E212} -> (fun (V519) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.REPL.ProofFound', V519}} end(E212)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E208)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; _ -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable__Core_Error'('erased', {'Idris.Core.Core.AmbiguousName', ('Idris.Idris2.Idris.REPLOpts':'un--replFC'()), ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', fun (V520) -> ('Idris.Idris2.Builtin':'un--fst'('erased', 'erased', V520)) end, V504))}, V444)) end end(E205, E206)); _ -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable__Core_Error'('erased', {'Idris.Core.Core.AmbiguousName', ('Idris.Idris2.Idris.REPLOpts':'un--replFC'()), ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', fun (V521) -> ('Idris.Idris2.Builtin':'un--fst'('erased', 'erased', V521)) end, V504))}, V444)) end end(E203, E204)); _ -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable__Core_Error'('erased', {'Idris.Core.Core.AmbiguousName', ('Idris.Idris2.Idris.REPLOpts':'un--replFC'()), ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', fun (V522) -> ('Idris.Idris2.Builtin':'un--fst'('erased', 'erased', V522)) end, V504))}, V444)) end end(E201, E202)); [] -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable__Core_Error'('erased', {'Idris.Core.Core.UndefinedName', ('Idris.Idris2.Idris.REPLOpts':'un--replFC'()), V443}, V444)); _ -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable__Core_Error'('erased', {'Idris.Core.Core.AmbiguousName', ('Idris.Idris2.Idris.REPLOpts':'un--replFC'()), ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', fun (V523) -> ('Idris.Idris2.Builtin':'un--fst'('erased', 'erased', V523)) end, V504))}, V444)) end end(E200)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E172)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E170)); {'Idris.Idris.Syntax.Missing', E213} -> (fun (V524) -> fun (V525) -> begin (V554 = begin (V553 = (('Idris.Idris2.Erlang.Data.IORef':'un--readIORef'('erased', 'erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V526) -> fun (V527) -> fun (V528) -> fun (V529) -> fun (V530) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor__IO'('erased', 'erased', V528, V529, V530)) end end end end end, fun (V531) -> fun (V532) -> fun (V533) -> V532 end end end, fun (V534) -> fun (V535) -> fun (V536) -> fun (V537) -> fun (V538) -> begin (V539 = (V536(V538))), begin (V540 = (V537(V538))), (V539(V540)) end end end end end end end}, fun (V541) -> fun (V542) -> fun (V543) -> fun (V544) -> fun (V545) -> begin (V546 = (V543(V545))), ((V544(V546))(V545)) end end end end end end, fun (V547) -> fun (V548) -> fun (V549) -> begin (V550 = (V548(V549))), (V550(V549)) end end end end}, fun (V551) -> fun (V552) -> V552 end end}, V0))(V525))), {'Idris.Prelude.Types.Right', V553} end), case V554 of {'Idris.Prelude.Types.Left', E214} -> (fun (V555) -> {'Idris.Prelude.Types.Left', V555} end(E214)); {'Idris.Prelude.Types.Right', E215} -> (fun (V556) -> begin (V583 = (('Idris.Idris2.Core.Context':'un--lookupCtxtName'(V524, case V556 of {'Idris.Core.Context.MkDefs', E216, E217, E218, E219, E220, E221, E222, E223, E224, E225, E226, E227, E228, E229, E230, E231, E232, E233, E234, E235, E236, E237, E238, E239, E240, E241} -> (fun (V557, V558, V559, V560, V561, V562, V563, V564, V565, V566, V567, V568, V569, V570, V571, V572, V573, V574, V575, V576, V577, V578, V579, V580, V581, V582) -> V557 end(E216, E217, E218, E219, E220, E221, E222, E223, E224, E225, E226, E227, E228, E229, E230, E231, E232, E233, E234, E235, E236, E237, E238, E239, E240, E241)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V525))), case V583 of {'Idris.Prelude.Types.Left', E242} -> (fun (V584) -> {'Idris.Prelude.Types.Left', V584} end(E242)); {'Idris.Prelude.Types.Right', E243} -> (fun (V585) -> case V585 of [] -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable__Core_Error'('erased', {'Idris.Core.Core.UndefinedName', ('Idris.Idris2.Idris.REPLOpts':'un--replFC'()), V524}, V525)); _ -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor__IO'('erased', 'erased', fun (V586) -> case V586 of {'Idris.Prelude.Types.Left', E244} -> (fun (V587) -> {'Idris.Prelude.Types.Left', V587} end(E244)); {'Idris.Prelude.Types.Right', E245} -> (fun (V588) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.REPL.Missed', V588}} end(E245)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('Idris.Idris2.Core.Core':'un--traverse'('erased', 'erased', fun (V589) -> fun (V590) -> begin (V591 = ('Idris.Idris2.Core.Context':'un--getTotality'(V0, ('Idris.Idris2.Idris.REPLOpts':'un--replFC'()), V589, V590))), case V591 of {'Idris.Prelude.Types.Left', E246} -> (fun (V592) -> {'Idris.Prelude.Types.Left', V592} end(E246)); {'Idris.Prelude.Types.Right', E247} -> (fun (V593) -> begin (V594 = V585), (('case--case block in process-10579'(V524, V4, V3, V2, V1, V0, V556, V585, V594, V589, V593, case V593 of {'Idris.Core.TT.MkTotality', E248, E249} -> (fun (V595, V596) -> V596 end(E248, E249)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V590)) end end(E247)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', fun (V597) -> ('Idris.Idris2.Builtin':'un--fst'('erased', 'erased', V597)) end, V585)))), V525)) end end(E243)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E215)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E213)); {'Idris.Idris.Syntax.Total', E250} -> (fun (V598) -> fun (V599) -> begin (V628 = begin (V627 = (('Idris.Idris2.Erlang.Data.IORef':'un--readIORef'('erased', 'erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V600) -> fun (V601) -> fun (V602) -> fun (V603) -> fun (V604) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor__IO'('erased', 'erased', V602, V603, V604)) end end end end end, fun (V605) -> fun (V606) -> fun (V607) -> V606 end end end, fun (V608) -> fun (V609) -> fun (V610) -> fun (V611) -> fun (V612) -> begin (V613 = (V610(V612))), begin (V614 = (V611(V612))), (V613(V614)) end end end end end end end}, fun (V615) -> fun (V616) -> fun (V617) -> fun (V618) -> fun (V619) -> begin (V620 = (V617(V619))), ((V618(V620))(V619)) end end end end end end, fun (V621) -> fun (V622) -> fun (V623) -> begin (V624 = (V622(V623))), (V624(V623)) end end end end}, fun (V625) -> fun (V626) -> V626 end end}, V0))(V599))), {'Idris.Prelude.Types.Right', V627} end), case V628 of {'Idris.Prelude.Types.Left', E251} -> (fun (V629) -> {'Idris.Prelude.Types.Left', V629} end(E251)); {'Idris.Prelude.Types.Right', E252} -> (fun (V630) -> begin (V657 = (('Idris.Idris2.Core.Context':'un--lookupCtxtName'(V598, case V630 of {'Idris.Core.Context.MkDefs', E253, E254, E255, E256, E257, E258, E259, E260, E261, E262, E263, E264, E265, E266, E267, E268, E269, E270, E271, E272, E273, E274, E275, E276, E277, E278} -> (fun (V631, V632, V633, V634, V635, V636, V637, V638, V639, V640, V641, V642, V643, V644, V645, V646, V647, V648, V649, V650, V651, V652, V653, V654, V655, V656) -> V631 end(E253, E254, E255, E256, E257, E258, E259, E260, E261, E262, E263, E264, E265, E266, E267, E268, E269, E270, E271, E272, E273, E274, E275, E276, E277, E278)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V599))), case V657 of {'Idris.Prelude.Types.Left', E279} -> (fun (V658) -> {'Idris.Prelude.Types.Left', V658} end(E279)); {'Idris.Prelude.Types.Right', E280} -> (fun (V659) -> case V659 of [] -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable__Core_Error'('erased', {'Idris.Core.Core.UndefinedName', ('Idris.Idris2.Idris.REPLOpts':'un--replFC'()), V598}, V599)); _ -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor__IO'('erased', 'erased', fun (V660) -> case V660 of {'Idris.Prelude.Types.Left', E281} -> (fun (V661) -> {'Idris.Prelude.Types.Left', V661} end(E281)); {'Idris.Prelude.Types.Right', E282} -> (fun (V662) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.REPL.CheckedTotal', V662}} end(E282)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('Idris.Idris2.Core.Core':'un--traverse'('erased', 'erased', fun (V663) -> fun (V664) -> begin (V665 = ('Idris.Idris2.Core.Termination':'un--checkTotal'(V0, ('Idris.Idris2.Idris.REPLOpts':'un--replFC'()), V663, V664))), case V665 of {'Idris.Prelude.Types.Left', E283} -> (fun (V666) -> {'Idris.Prelude.Types.Left', V666} end(E283)); {'Idris.Prelude.Types.Right', E284} -> (fun (V667) -> begin (V675 = begin (V668 = ('Idris.Idris2.Core.Context':'un--getTotality'(V0, ('Idris.Idris2.Idris.REPLOpts':'un--replFC'()), V663, V664))), case V668 of {'Idris.Prelude.Types.Left', E285} -> (fun (V669) -> {'Idris.Prelude.Types.Left', V669} end(E285)); {'Idris.Prelude.Types.Right', E286} -> (fun (V670) -> ('Idris.Idris2.Core.Context':'un--toFullNames'('erased', V0, {'Idris.Core.Context.dn--un--__mkHasNames', fun (V671) -> fun (V672) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames__Totality'(V671, V672)) end end, fun (V673) -> fun (V674) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames__Totality'(V673, V674)) end end}, V670, V664)) end(E286)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V675 of {'Idris.Prelude.Types.Left', E287} -> (fun (V676) -> {'Idris.Prelude.Types.Left', V676} end(E287)); {'Idris.Prelude.Types.Right', E288} -> (fun (V677) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V663, V677}} end(E288)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E284)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', fun (V678) -> ('Idris.Idris2.Builtin':'un--fst'('erased', 'erased', V678)) end, V659)))), V599)) end end(E280)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E252)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E250)); {'Idris.Idris.Syntax.Doc', E289} -> (fun (V679) -> fun (V680) -> begin (V681 = ('Idris.Idris2.Idris.DocString':'un--getDocsFor'(V0, V2, ('Idris.Idris2.Idris.REPLOpts':'un--replFC'()), V679, V680))), case V681 of {'Idris.Prelude.Types.Left', E290} -> (fun (V682) -> {'Idris.Prelude.Types.Left', V682} end(E290)); {'Idris.Prelude.Types.Right', E291} -> (fun (V683) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.REPL.Printed', ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'un--vsep'('erased', ('Idris.Idris2.Prelude.Interfaces':'un--<$>'('erased', 'erased', 'erased', fun (V684) -> fun (V685) -> fun (V686) -> fun (V687) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', V686, V687)) end end end end, fun (V688) -> ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty__String'('erased', V688)) end, V683))))}} end(E291)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E289)); {'Idris.Idris.Syntax.Browse', E292} -> (fun (V689) -> fun (V690) -> begin (V691 = ('Idris.Idris2.Idris.DocString':'un--getContents'(V0, V2, V689, V690))), case V691 of {'Idris.Prelude.Types.Left', E293} -> (fun (V692) -> {'Idris.Prelude.Types.Left', V692} end(E293)); {'Idris.Prelude.Types.Right', E294} -> (fun (V693) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.REPL.Printed', ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'un--vsep'('erased', ('Idris.Idris2.Prelude.Interfaces':'un--<$>'('erased', 'erased', 'erased', fun (V694) -> fun (V695) -> fun (V696) -> fun (V697) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', V696, V697)) end end end end, fun (V698) -> ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty__String'('erased', V698)) end, V693))))}} end(E294)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E292)); {'Idris.Idris.Syntax.DebugInfo', E295} -> (fun (V699) -> fun (V700) -> begin (V729 = begin (V728 = (('Idris.Idris2.Erlang.Data.IORef':'un--readIORef'('erased', 'erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V701) -> fun (V702) -> fun (V703) -> fun (V704) -> fun (V705) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor__IO'('erased', 'erased', V703, V704, V705)) end end end end end, fun (V706) -> fun (V707) -> fun (V708) -> V707 end end end, fun (V709) -> fun (V710) -> fun (V711) -> fun (V712) -> fun (V713) -> begin (V714 = (V711(V713))), begin (V715 = (V712(V713))), (V714(V715)) end end end end end end end}, fun (V716) -> fun (V717) -> fun (V718) -> fun (V719) -> fun (V720) -> begin (V721 = (V718(V720))), ((V719(V721))(V720)) end end end end end end, fun (V722) -> fun (V723) -> fun (V724) -> begin (V725 = (V723(V724))), (V725(V724)) end end end end}, fun (V726) -> fun (V727) -> V727 end end}, V0))(V700))), {'Idris.Prelude.Types.Right', V728} end), case V729 of {'Idris.Prelude.Types.Left', E296} -> (fun (V730) -> {'Idris.Prelude.Types.Left', V730} end(E296)); {'Idris.Prelude.Types.Right', E297} -> (fun (V731) -> begin (V762 = begin (V758 = (('Idris.Idris2.Core.Context':'un--lookupCtxtName'(V699, case V731 of {'Idris.Core.Context.MkDefs', E298, E299, E300, E301, E302, E303, E304, E305, E306, E307, E308, E309, E310, E311, E312, E313, E314, E315, E316, E317, E318, E319, E320, E321, E322, E323} -> (fun (V732, V733, V734, V735, V736, V737, V738, V739, V740, V741, V742, V743, V744, V745, V746, V747, V748, V749, V750, V751, V752, V753, V754, V755, V756, V757) -> V732 end(E298, E299, E300, E301, E302, E303, E304, E305, E306, E307, E308, E309, E310, E311, E312, E313, E314, E315, E316, E317, E318, E319, E320, E321, E322, E323)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V700))), case V758 of {'Idris.Prelude.Types.Left', E324} -> (fun (V759) -> {'Idris.Prelude.Types.Left', V759} end(E324)); {'Idris.Prelude.Types.Right', E325} -> (fun (V760) -> (('Idris.Idris2.Core.Core':'un--traverse_'('erased', 'erased', fun (V761) -> ('un--showInfo'(V0, V761)) end, V760))(V700)) end(E325)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V762 of {'Idris.Prelude.Types.Left', E326} -> (fun (V763) -> {'Idris.Prelude.Types.Left', V763} end(E326)); {'Idris.Prelude.Types.Right', E327} -> (fun (V764) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.REPL.Done'}} end(E327)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E297)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E295)); {'Idris.Idris.Syntax.SetOpt', E328} -> (fun (V765) -> fun (V766) -> begin (V767 = (('un--setOpt'(V0, V4, V765))(V766))), case V767 of {'Idris.Prelude.Types.Left', E329} -> (fun (V768) -> {'Idris.Prelude.Types.Left', V768} end(E329)); {'Idris.Prelude.Types.Right', E330} -> (fun (V769) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.REPL.Done'}} end(E330)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E328)); {'Idris.Idris.Syntax.GetOpts'} -> (fun () -> fun (V770) -> begin (V771 = ('un--getOptions'(V0, V4, V770))), case V771 of {'Idris.Prelude.Types.Left', E331} -> (fun (V772) -> {'Idris.Prelude.Types.Left', V772} end(E331)); {'Idris.Prelude.Types.Right', E332} -> (fun (V773) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.REPL.OptionsSet', V773}} end(E332)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end()); {'Idris.Idris.Syntax.SetLog', E333} -> (fun (V774) -> fun (V775) -> begin (V776 = ('Idris.Idris2.Core.Context':'un--addLogLevel'(V0, V774, V775))), case V776 of {'Idris.Prelude.Types.Left', E334} -> (fun (V777) -> {'Idris.Prelude.Types.Left', V777} end(E334)); {'Idris.Prelude.Types.Right', E335} -> (fun (V778) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.REPL.LogLevelSet', V774}} end(E335)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E333)); {'Idris.Idris.Syntax.SetConsoleWidth', E336} -> (fun (V779) -> fun (V780) -> begin (V781 = ('Idris.Idris2.Idris.REPLOpts':'un--setConsoleWidth'(V4, V779, V780))), case V781 of {'Idris.Prelude.Types.Left', E337} -> (fun (V782) -> {'Idris.Prelude.Types.Left', V782} end(E337)); {'Idris.Prelude.Types.Right', E338} -> (fun (V783) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.REPL.ConsoleWidthSet', V779}} end(E338)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E336)); {'Idris.Idris.Syntax.SetColor', E339} -> (fun (V784) -> fun (V785) -> begin (V786 = ('Idris.Idris2.Idris.REPLOpts':'un--setColor'(V4, V784, V785))), case V786 of {'Idris.Prelude.Types.Left', E340} -> (fun (V787) -> {'Idris.Prelude.Types.Left', V787} end(E340)); {'Idris.Prelude.Types.Right', E341} -> (fun (V788) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.REPL.ColorSet', V784}} end(E341)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E339)); {'Idris.Idris.Syntax.Metavars'} -> (fun () -> fun (V789) -> begin (V818 = begin (V817 = (('Idris.Idris2.Erlang.Data.IORef':'un--readIORef'('erased', 'erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V790) -> fun (V791) -> fun (V792) -> fun (V793) -> fun (V794) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor__IO'('erased', 'erased', V792, V793, V794)) end end end end end, fun (V795) -> fun (V796) -> fun (V797) -> V796 end end end, fun (V798) -> fun (V799) -> fun (V800) -> fun (V801) -> fun (V802) -> begin (V803 = (V800(V802))), begin (V804 = (V801(V802))), (V803(V804)) end end end end end end end}, fun (V805) -> fun (V806) -> fun (V807) -> fun (V808) -> fun (V809) -> begin (V810 = (V807(V809))), ((V808(V810))(V809)) end end end end end end, fun (V811) -> fun (V812) -> fun (V813) -> begin (V814 = (V812(V813))), (V814(V813)) end end end end}, fun (V815) -> fun (V816) -> V816 end end}, V0))(V789))), {'Idris.Prelude.Types.Right', V817} end), case V818 of {'Idris.Prelude.Types.Left', E342} -> (fun (V819) -> {'Idris.Prelude.Types.Left', V819} end(E342)); {'Idris.Prelude.Types.Right', E343} -> (fun (V820) -> begin (V847 = case V820 of {'Idris.Core.Context.MkDefs', E344, E345, E346, E347, E348, E349, E350, E351, E352, E353, E354, E355, E356, E357, E358, E359, E360, E361, E362, E363, E364, E365, E366, E367, E368, E369} -> (fun (V821, V822, V823, V824, V825, V826, V827, V828, V829, V830, V831, V832, V833, V834, V835, V836, V837, V838, V839, V840, V841, V842, V843, V844, V845, V846) -> V821 end(E344, E345, E346, E347, E348, E349, E350, E351, E352, E353, E354, E355, E356, E357, E358, E359, E360, E361, E362, E363, E364, E365, E366, E367, E368, E369)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), begin (V848 = ('Idris.Idris2.Core.Context':'un--getUserHoles'(V0, V789))), case V848 of {'Idris.Prelude.Types.Left', E370} -> (fun (V849) -> {'Idris.Prelude.Types.Left', V849} end(E370)); {'Idris.Prelude.Types.Right', E371} -> (fun (V850) -> begin (V852 = (('Idris.Idris2.Core.Core':'un--traverse'('erased', 'erased', fun (V851) -> ('Idris.Idris2.Core.Context':'un--lookupCtxtName'(V851, V847)) end, V850))(V789))), case V852 of {'Idris.Prelude.Types.Left', E372} -> (fun (V853) -> {'Idris.Prelude.Types.Left', V853} end(E372)); {'Idris.Prelude.Types.Right', E373} -> (fun (V854) -> begin (V867 = (('Idris.Idris2.Prelude.Interfaces':'un--concat'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V855) -> fun (V856) -> fun (V857) -> fun (V858) -> fun (V859) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable__List'('erased', 'erased', V857, V858, V859)) end end end end end, fun (V860) -> fun (V861) -> fun (V862) -> fun (V863) -> fun (V864) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable__List'('erased', 'erased', V862, V863, V864)) end end end end end}, {'Idris.Prelude.Interfaces.dn--un--__mkMonoid', fun (V865) -> fun (V866) -> ('Idris.Idris2.Prelude.Types':'dn--un--<+>_Semigroup__(List $a)'('erased', V865, V866)) end end, ('Idris.Idris2.Prelude.Types':'dn--un--neutral_Monoid__(List $a)'('erased'))}}))(V854))), begin (V874 = ('Idris.Idris2.Data.List':'un--mapMaybe'('erased', 'erased', fun (V868) -> case V868 of {'Idris.Builtin.MkPair', E374, E375} -> (fun (V869, V870) -> case V870 of {'Idris.Builtin.MkPair', E376, E377} -> (fun (V871, V872) -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad__Maybe'('erased', 'erased', ('Idris.Idris2.Idris.IDEMode.Holes':'un--isHole'(V872)), fun (V873) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative__Maybe'('erased', {'Idris.Builtin.MkPair', V869, {'Idris.Builtin.MkPair', V872, V873}})) end)) end(E376, E377)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E374, E375)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, V867))), begin (V876 = (('Idris.Idris2.Core.Core':'un--traverse'('erased', 'erased', fun (V875) -> ('case--process-10938'(V4, V3, V2, V1, V0, V820, V847, V850, V854, V867, V874, V875, V875)) end, V874))(V789))), case V876 of {'Idris.Prelude.Types.Left', E378} -> (fun (V877) -> {'Idris.Prelude.Types.Left', V877} end(E378)); {'Idris.Prelude.Types.Right', E379} -> (fun (V878) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.REPL.FoundHoles', V878}} end(E379)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end(E373)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E371)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E343)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end()); {'Idris.Idris.Syntax.Editing', E380} -> (fun (V879) -> fun (V880) -> begin (V881 = ('Idris.Idris2.Core.Context':'un--getPPrint'(V0, V880))), case V881 of {'Idris.Prelude.Types.Left', E381} -> (fun (V882) -> {'Idris.Prelude.Types.Left', V882} end(E381)); {'Idris.Prelude.Types.Right', E382} -> (fun (V883) -> begin (V887 = ('Idris.Idris2.Core.Context':'un--setPPrint'(V0, case V883 of {'Idris.Core.Options.MkPPOpts', E383, E384, E385} -> (fun (V884, V885, V886) -> {'Idris.Core.Options.MkPPOpts', V884, 1, V886} end(E383, E384, E385)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V880))), case V887 of {'Idris.Prelude.Types.Left', E386} -> (fun (V888) -> {'Idris.Prelude.Types.Left', V888} end(E386)); {'Idris.Prelude.Types.Right', E387} -> (fun (V889) -> begin (V890 = (('un--processEdit'(V0, V1, V2, V3, V4, V879))(V880))), case V890 of {'Idris.Prelude.Types.Left', E388} -> (fun (V891) -> {'Idris.Prelude.Types.Left', V891} end(E388)); {'Idris.Prelude.Types.Right', E389} -> (fun (V892) -> begin (V893 = ('Idris.Idris2.Core.Context':'un--setPPrint'(V0, V883, V880))), case V893 of {'Idris.Prelude.Types.Left', E390} -> (fun (V894) -> {'Idris.Prelude.Types.Left', V894} end(E390)); {'Idris.Prelude.Types.Right', E391} -> (fun (V895) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.REPL.Edited', V892}} end(E391)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E389)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E387)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E382)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E380)); {'Idris.Idris.Syntax.CGDirective', E392} -> (fun (V896) -> fun (V897) -> begin (V915 = begin (V898 = ('Idris.Idris2.Core.Context':'un--getSession'(V0, V897))), case V898 of {'Idris.Prelude.Types.Left', E393} -> (fun (V899) -> {'Idris.Prelude.Types.Left', V899} end(E393)); {'Idris.Prelude.Types.Right', E394} -> (fun (V900) -> ('Idris.Idris2.Core.Context':'un--setSession'(V0, case V900 of {'Idris.Core.Options.MkSessionOpts', E395, E396, E397, E398, E399, E400, E401, E402, E403, E404, E405, E406, E407, E408} -> (fun (V901, V902, V903, V904, V905, V906, V907, V908, V909, V910, V911, V912, V913, V914) -> {'Idris.Core.Options.MkSessionOpts', V901, V902, V903, V904, [V896 | V905], V906, V907, V908, V909, V910, V911, V912, V913, V914} end(E395, E396, E397, E398, E399, E400, E401, E402, E403, E404, E405, E406, E407, E408)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V897)) end(E394)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V915 of {'Idris.Prelude.Types.Left', E409} -> (fun (V916) -> {'Idris.Prelude.Types.Left', V916} end(E409)); {'Idris.Prelude.Types.Right', E410} -> (fun (V917) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.REPL.Done'}} end(E410)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E392)); {'Idris.Idris.Syntax.Quit'} -> (fun () -> fun (V918) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.REPL.Exited'}} end end()); {'Idris.Idris.Syntax.NOP'} -> (fun () -> fun (V919) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.REPL.Done'}} end end()); {'Idris.Idris.Syntax.ShowVersion'} -> (fun () -> fun (V920) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.REPL.VersionIs', ('Idris.Idris2.Idris.Version':'un--version'())}} end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--printClause'(V0, V1, V2, V3, V4) -> case V4 of {'Idris.TTImp.TTImp.PatClause', E0, E1, E2} -> (fun (V5, V6, V7) -> fun (V8) -> begin (V9 = ('Idris.Idris2.Idris.Resugar':'un--pterm'(V0, V1, V6, V8))), case V9 of {'Idris.Prelude.Types.Left', E3} -> (fun (V10) -> {'Idris.Prelude.Types.Left', V10} end(E3)); {'Idris.Prelude.Types.Right', E4} -> (fun (V11) -> begin (V12 = ('Idris.Idris2.Idris.Resugar':'un--pterm'(V0, V1, V7, V8))), case V12 of {'Idris.Prelude.Types.Left', E5} -> (fun (V13) -> {'Idris.Prelude.Types.Left', V13} end(E5)); {'Idris.Prelude.Types.Right', E6} -> (fun (V14) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Parser.Unlit':'un--relit'(V2, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('Idris.Idris2.Prelude.Types':'un--pack'(('Idris.Idris2.Data.List':'un--replicate'('erased', V3, $ )))), ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('Idris.Idris2.Idris.Syntax':'dn--un--show_Show__PTerm'(V11)), ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<" = "/utf8>>, ('Idris.Idris2.Idris.Syntax':'dn--un--show_Show__PTerm'(V14))))))))))} end(E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0, E1, E2)); {'Idris.TTImp.TTImp.WithClause', E7, E8, E9, E10, E11} -> (fun (V15, V16, V17, V18, V19) -> fun (V20) -> begin (V21 = ('Idris.Idris2.Idris.Resugar':'un--pterm'(V0, V1, V16, V20))), case V21 of {'Idris.Prelude.Types.Left', E12} -> (fun (V22) -> {'Idris.Prelude.Types.Left', V22} end(E12)); {'Idris.Prelude.Types.Right', E13} -> (fun (V23) -> begin (V24 = ('Idris.Idris2.Idris.Resugar':'un--pterm'(V0, V1, V17, V20))), case V24 of {'Idris.Prelude.Types.Left', E14} -> (fun (V25) -> {'Idris.Prelude.Types.Left', V25} end(E14)); {'Idris.Prelude.Types.Right', E15} -> (fun (V26) -> begin (V28 = (('Idris.Idris2.Core.Core':'un--traverse'('erased', 'erased', fun (V27) -> ('un--printClause'(V0, V1, V2, ('Idris.Idris2.Prelude.Types':'dn--un--+_Num__Nat'(V3, (1 + (1 + 0)))), V27)) end, V19))(V20))), case V28 of {'Idris.Prelude.Types.Left', E16} -> (fun (V29) -> {'Idris.Prelude.Types.Left', V29} end(E16)); {'Idris.Prelude.Types.Right', E17} -> (fun (V30) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('Idris.Idris2.Parser.Unlit':'un--relit'(V2, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('Idris.Idris2.Prelude.Types':'un--pack'(('Idris.Idris2.Data.List':'un--replicate'('erased', V3, $ )))), ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('Idris.Idris2.Idris.Syntax':'dn--un--show_Show__PTerm'(V23)), ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<" with ("/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('Idris.Idris2.Idris.Syntax':'dn--un--show_Show__PTerm'(V26)), <<")\x{a}"/utf8>>)))))))))), ('Idris.Idris2.Core.Name.Namespace':'un--showSep'(<<"\x{a}"/utf8>>, V30))))} end(E17)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E7, E8, E9, E10, E11)); {'Idris.TTImp.TTImp.ImpossibleClause', E18, E19} -> (fun (V31, V32) -> fun (V33) -> begin (V34 = ('Idris.Idris2.Idris.Resugar':'un--pterm'(V0, V1, V32, V33))), case V34 of {'Idris.Prelude.Types.Left', E20} -> (fun (V35) -> {'Idris.Prelude.Types.Left', V35} end(E20)); {'Idris.Prelude.Types.Right', E21} -> (fun (V36) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Parser.Unlit':'un--relit'(V2, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('Idris.Idris2.Prelude.Types':'un--pack'(('Idris.Idris2.Data.List':'un--replicate'('erased', V3, $ )))), ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('Idris.Idris2.Idris.Syntax':'dn--un--show_Show__PTerm'(V36)), <<" impossible"/utf8>>))))))} end(E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E18, E19)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--parseRepl'(V0) -> ('case--parseRepl-11382'(V0, ('nested--32808-11295--in--un--fnameCmd'(V0, [{'Idris.Builtin.MkPair', <<":load "/utf8>>, fun (V1) -> {'Idris.Idris.Syntax.Load', V1} end} | [{'Idris.Builtin.MkPair', <<":l "/utf8>>, fun (V2) -> {'Idris.Idris.Syntax.Load', V2} end} | [{'Idris.Builtin.MkPair', <<":cd "/utf8>>, fun (V3) -> {'Idris.Idris.Syntax.CD', V3} end} | []]]], V0)))).
'un--parseEmptyCmd'() -> {'Idris.Text.Parser.Core.SeqEmpty', 1, 1, ('Idris.Idris2.Text.Parser.Core':'dn--un--map_Functor__((Grammar $tok) $c)'('erased', 'erased', 'erased', 1, fun (V0) -> fun (V1) -> V1 end end, ('Idris.Idris2.Parser.Rule.Source':'un--eoi'()))), fun (V2) -> ('Idris.Idris2.Text.Parser.Core':'dn--un--map_Functor__((Grammar $tok) $c)'('erased', 'erased', 'erased', 1, V2, {'Idris.Text.Parser.Core.Empty', {'Idris.Prelude.Types.Nothing'}})) end}.
'un--parseCmd'() -> {'Idris.Text.Parser.Core.SeqEmpty', 1, 1, ('Idris.Idris2.Idris.Parser':'un--command'()), fun (V0) -> {'Idris.Text.Parser.Core.SeqEmpty', 1, 1, ('Idris.Idris2.Parser.Rule.Source':'un--eoi'()), fun (V1) -> {'Idris.Text.Parser.Core.Empty', {'Idris.Prelude.Types.Just', V0}} end} end}.
'un--nextProofSearch'(V0, V1, V2, V3) -> begin (V32 = begin (V31 = (('Idris.Idris2.Erlang.Data.IORef':'un--readIORef'('erased', 'erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V4) -> fun (V5) -> fun (V6) -> fun (V7) -> fun (V8) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor__IO'('erased', 'erased', V6, V7, V8)) end end end end end, fun (V9) -> fun (V10) -> fun (V11) -> V10 end end end, fun (V12) -> fun (V13) -> fun (V14) -> fun (V15) -> fun (V16) -> begin (V17 = (V14(V16))), begin (V18 = (V15(V16))), (V17(V18)) end end end end end end end}, fun (V19) -> fun (V20) -> fun (V21) -> fun (V22) -> fun (V23) -> begin (V24 = (V21(V23))), ((V22(V24))(V23)) end end end end end end, fun (V25) -> fun (V26) -> fun (V27) -> begin (V28 = (V26(V27))), (V28(V27)) end end end end}, fun (V29) -> fun (V30) -> V30 end end}, V2))(V3))), {'Idris.Prelude.Types.Right', V31} end), case V32 of {'Idris.Prelude.Types.Left', E0} -> (fun (V33) -> {'Idris.Prelude.Types.Left', V33} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V34) -> (('case--nextProofSearch-4617'(V2, V1, V0, V34, case V34 of {'Idris.Idris.REPLOpts.MkREPLOpts', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15} -> (fun (V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47, V48) -> V44 end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V3)) end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--nextGenDef'(V0, V1, V2, V3, V4) -> begin (V33 = begin (V32 = (('Idris.Idris2.Erlang.Data.IORef':'un--readIORef'('erased', 'erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V5) -> fun (V6) -> fun (V7) -> fun (V8) -> fun (V9) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor__IO'('erased', 'erased', V7, V8, V9)) end end end end end, fun (V10) -> fun (V11) -> fun (V12) -> V11 end end end, fun (V13) -> fun (V14) -> fun (V15) -> fun (V16) -> fun (V17) -> begin (V18 = (V15(V17))), begin (V19 = (V16(V17))), (V18(V19)) end end end end end end end}, fun (V20) -> fun (V21) -> fun (V22) -> fun (V23) -> fun (V24) -> begin (V25 = (V22(V24))), ((V23(V25))(V24)) end end end end end end, fun (V26) -> fun (V27) -> fun (V28) -> begin (V29 = (V27(V28))), (V29(V28)) end end end end}, fun (V30) -> fun (V31) -> V31 end end}, V2))(V4))), {'Idris.Prelude.Types.Right', V32} end), case V33 of {'Idris.Prelude.Types.Left', E0} -> (fun (V34) -> {'Idris.Prelude.Types.Left', V34} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V35) -> (('case--nextGenDef-4809'(V3, V2, V1, V0, V35, case V35 of {'Idris.Idris.REPLOpts.MkREPLOpts', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15} -> (fun (V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47, V48, V49) -> V46 end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V4)) end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--lookupDefTyName'(V0, V1, V2) -> ('Idris.Idris2.Core.Context':'un--lookupNameBy'('erased', fun (V3) -> {'Idris.Builtin.MkPair', case V3 of {'Idris.Core.Context.MkGlobalDef', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20} -> (fun (V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24) -> V21 end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, case V3 of {'Idris.Core.Context.MkGlobalDef', E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41} -> (fun (V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45) -> V27 end(E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end} end, V0, V1, V2)).
'un--loadMainFile'(V0, V1, V2, V3, V4, V5, V6) -> begin (V7 = ('Idris.Idris2.Idris.REPLCommon':'un--resetContext'(V0, V1, V2, V3, V6))), case V7 of {'Idris.Prelude.Types.Left', E0} -> (fun (V8) -> {'Idris.Prelude.Types.Left', V8} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V9) -> begin (V38 = begin (V37 = (('Idris.Idris2.Erlang.System.File':'un--readFile'('erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V10) -> fun (V11) -> fun (V12) -> fun (V13) -> fun (V14) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor__IO'('erased', 'erased', V12, V13, V14)) end end end end end, fun (V15) -> fun (V16) -> fun (V17) -> V16 end end end, fun (V18) -> fun (V19) -> fun (V20) -> fun (V21) -> fun (V22) -> begin (V23 = (V20(V22))), begin (V24 = (V21(V22))), (V23(V24)) end end end end end end end}, fun (V25) -> fun (V26) -> fun (V27) -> fun (V28) -> fun (V29) -> begin (V30 = (V27(V29))), ((V28(V30))(V29)) end end end end end end, fun (V31) -> fun (V32) -> fun (V33) -> begin (V34 = (V32(V33))), (V34(V33)) end end end end}, fun (V35) -> fun (V36) -> V36 end end}, V5))(V6))), {'Idris.Prelude.Types.Right', V37} end), case V38 of {'Idris.Prelude.Types.Left', E2} -> (fun (V39) -> {'Idris.Prelude.Types.Left', V39} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V40) -> case V40 of {'Idris.Prelude.Types.Right', E4} -> (fun (V41) -> begin (V43 = ('Idris.Idris2.Core.Context.Log':'un--logTime'('erased', V0, fun () -> <<"+ Build deps"/utf8>> end, fun (V42) -> ('Idris.Idris2.Idris.ModTree':'un--buildDeps'(V0, V2, V3, V1, V4, V5, V42)) end, V6))), case V43 of {'Idris.Prelude.Types.Left', E5} -> (fun (V44) -> {'Idris.Prelude.Types.Left', V44} end(E5)); {'Idris.Prelude.Types.Right', E6} -> (fun (V45) -> begin (V46 = (('Idris.Idris2.Idris.REPLCommon':'un--updateErrorLine'(V4, V45))(V6))), case V46 of {'Idris.Prelude.Types.Left', E7} -> (fun (V47) -> {'Idris.Prelude.Types.Left', V47} end(E7)); {'Idris.Prelude.Types.Right', E8} -> (fun (V48) -> begin (V49 = ('Idris.Idris2.Idris.REPLOpts':'un--setSource'(V4, V41, V6))), case V49 of {'Idris.Prelude.Types.Left', E9} -> (fun (V50) -> {'Idris.Prelude.Types.Left', V50} end(E9)); {'Idris.Prelude.Types.Right', E10} -> (fun (V51) -> begin (V52 = ('Idris.Idris2.Idris.REPLOpts':'un--resetProofState'(V4, V6))), case V52 of {'Idris.Prelude.Types.Left', E11} -> (fun (V53) -> {'Idris.Prelude.Types.Left', V53} end(E11)); {'Idris.Prelude.Types.Right', E12} -> (fun (V54) -> case V45 of [] -> {'Idris.Prelude.Types.Right', {'Idris.Idris.REPL.FileLoaded', V5}}; _ -> {'Idris.Prelude.Types.Right', {'Idris.Idris.REPL.ErrorsBuildingFile', V5, V45}} end end(E12)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E4)); {'Idris.Prelude.Types.Left', E13} -> (fun (V55) -> begin (V56 = ('Idris.Idris2.Idris.REPLOpts':'un--setSource'(V4, <<""/utf8>>, V6))), case V56 of {'Idris.Prelude.Types.Left', E14} -> (fun (V57) -> {'Idris.Prelude.Types.Left', V57} end(E14)); {'Idris.Prelude.Types.Right', E15} -> (fun (V58) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.REPL.ErrorLoadingFile', V5, V55}} end(E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--interpret'(V0, V1, V2, V3, V4, V5) -> ('case--interpret-11415'(V5, V4, V3, V2, V1, V0, ('un--parseRepl'(V5)))).
'un--handleResult'(V0, V1, V2, V3, V4, V5) -> case V5 of {'Idris.Idris.REPL.Exited'} -> (fun () -> fun (V6) -> ('Idris.Idris2.Idris.REPLCommon':'un--iputStrLn'(V4, ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Util':'un--reflow'('erased', <<"Bye for now!"/utf8>>)), V6)) end end()); _ -> fun (V7) -> begin (V8 = (('un--displayResult'(V0, V1, V2, V3, V4, V5))(V7))), case V8 of {'Idris.Prelude.Types.Left', E0} -> (fun (V9) -> {'Idris.Prelude.Types.Left', V9} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V10) -> ('un--repl'(V0, V1, V2, V3, V4, V7)) end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end.
'un--handleMissing\x{27}'(V0) -> case V0 of {'Idris.Idris.REPL.CasesMissing', E0, E1} -> (fun (V1, V2) -> ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show__Name'(V1)), ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<":\x{a}"/utf8>>, ('Idris.Idris2.Core.Name.Namespace':'un--showSep'(<<"\x{a}"/utf8>>, V2)))))) end(E0, E1)); {'Idris.Idris.REPL.CallsNonCovering', E2, E3} -> (fun (V3, V4) -> ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show__Name'(V3)), ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<": Calls non covering function"/utf8>>, case V4 of [E4 | E5] -> (fun (V5, V6) -> case V6 of [] -> ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<" "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show__Name'(V5)))); _ -> ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"s: "/utf8>>, ('Idris.Idris2.Core.Name.Namespace':'un--showSep'(<<", "/utf8>>, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', fun (V7) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show__Name'(V7)) end, V4)))))) end end(E4, E5)); _ -> ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"s: "/utf8>>, ('Idris.Idris2.Core.Name.Namespace':'un--showSep'(<<", "/utf8>>, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', fun (V8) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show__Name'(V8)) end, V4)))))) end)))) end(E2, E3)); {'Idris.Idris.REPL.AllCasesCovered', E6} -> (fun (V9) -> ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show__Name'(V9)), <<": All cases covered"/utf8>>)) end(E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--handleMissing'(V0) -> case V0 of {'Idris.Idris.REPL.CasesMissing', E0, E1} -> (fun (V1, V2) -> ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'('erased', ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--<+>_Semigroup__(Doc $ann)'('erased', ('Idris.Idris2.Core.Name':'dn--un--pretty_Pretty__Name'('erased', V1)), ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Symbols':'un--colon'('erased')))), ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'un--vsep'('erased', ('Idris.Idris2.Prelude.Interfaces':'un--<$>'('erased', 'erased', 'erased', fun (V3) -> fun (V4) -> fun (V5) -> fun (V6) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', V5, V6)) end end end end, fun (V7) -> ('Idris.Idris2.Idris.Pretty':'un--code'(('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty__String'('erased', V7)))) end, V2)))))) end(E0, E1)); {'Idris.Idris.REPL.CallsNonCovering', E2, E3} -> (fun (V8, V9) -> ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'('erased', ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--<+>_Semigroup__(Doc $ann)'('erased', ('Idris.Idris2.Core.Name':'dn--un--pretty_Pretty__Name'('erased', V8)), ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Symbols':'un--colon'('erased')))), ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'('erased', ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Util':'un--reflow'('erased', <<"Calls non covering"/utf8>>)), case V9 of [E4 | E5] -> (fun (V10, V11) -> case V11 of [] -> ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'('erased', ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--fromString_FromString__(Doc $ann)'('erased', <<"function"/utf8>>)), ('Idris.Idris2.Idris.Pretty':'un--code'(('Idris.Idris2.Core.Name':'dn--un--pretty_Pretty__Name'('erased', V10)))))); _ -> ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'('erased', ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--fromString_FromString__(Doc $ann)'('erased', <<"functions:"/utf8>>)), ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'un--concatWith'('erased', fun (V12) -> fun (V13) -> ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'un--surround'('erased', ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--<+>_Semigroup__(Doc $ann)'('erased', ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Symbols':'un--comma'('erased')), ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Symbols':'un--space'('erased')))), V12, V13)) end end, ('Idris.Idris2.Prelude.Interfaces':'un--<$>'('erased', 'erased', 'erased', fun (V14) -> fun (V15) -> fun (V16) -> fun (V17) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', V16, V17)) end end end end, fun (V18) -> ('Idris.Idris2.Idris.Pretty':'un--code'(('Idris.Idris2.Core.Name':'dn--un--pretty_Pretty__Name'('erased', V18)))) end, V9)))))) end end(E4, E5)); _ -> ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'('erased', ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--fromString_FromString__(Doc $ann)'('erased', <<"functions:"/utf8>>)), ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'un--concatWith'('erased', fun (V19) -> fun (V20) -> ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'un--surround'('erased', ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--<+>_Semigroup__(Doc $ann)'('erased', ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Symbols':'un--comma'('erased')), ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Symbols':'un--space'('erased')))), V19, V20)) end end, ('Idris.Idris2.Prelude.Interfaces':'un--<$>'('erased', 'erased', 'erased', fun (V21) -> fun (V22) -> fun (V23) -> fun (V24) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', V23, V24)) end end end end, fun (V25) -> ('Idris.Idris2.Idris.Pretty':'un--code'(('Idris.Idris2.Core.Name':'dn--un--pretty_Pretty__Name'('erased', V25)))) end, V9)))))) end)))) end(E2, E3)); {'Idris.Idris.REPL.AllCasesCovered', E6} -> (fun (V26) -> ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'('erased', ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--<+>_Semigroup__(Doc $ann)'('erased', ('Idris.Idris2.Core.Name':'dn--un--pretty_Pretty__Name'('erased', V26)), ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Symbols':'un--colon'('erased')))), ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Util':'un--reflow'('erased', <<"All cases covered"/utf8>>)))) end(E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--getOptions'(V0, V1, V2) -> begin (V3 = ('Idris.Idris2.Core.Context':'un--getPPrint'(V0, V2))), case V3 of {'Idris.Prelude.Types.Left', E0} -> (fun (V4) -> {'Idris.Prelude.Types.Left', V4} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V5) -> begin (V34 = begin (V33 = (('Idris.Idris2.Erlang.Data.IORef':'un--readIORef'('erased', 'erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V6) -> fun (V7) -> fun (V8) -> fun (V9) -> fun (V10) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor__IO'('erased', 'erased', V8, V9, V10)) end end end end end, fun (V11) -> fun (V12) -> fun (V13) -> V12 end end end, fun (V14) -> fun (V15) -> fun (V16) -> fun (V17) -> fun (V18) -> begin (V19 = (V16(V18))), begin (V20 = (V17(V18))), (V19(V20)) end end end end end end end}, fun (V21) -> fun (V22) -> fun (V23) -> fun (V24) -> fun (V25) -> begin (V26 = (V23(V25))), ((V24(V26))(V25)) end end end end end end, fun (V27) -> fun (V28) -> fun (V29) -> begin (V30 = (V28(V29))), (V30(V29)) end end end end}, fun (V31) -> fun (V32) -> V32 end end}, V1))(V2))), {'Idris.Prelude.Types.Right', V33} end), case V34 of {'Idris.Prelude.Types.Left', E2} -> (fun (V35) -> {'Idris.Prelude.Types.Left', V35} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V36) -> {'Idris.Prelude.Types.Right', [{'Idris.Idris.Syntax.ShowImplicits', case V5 of {'Idris.Core.Options.MkPPOpts', E4, E5, E6} -> (fun (V37, V38, V39) -> V37 end(E4, E5, E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end} | [{'Idris.Idris.Syntax.ShowNamespace', case V5 of {'Idris.Core.Options.MkPPOpts', E7, E8, E9} -> (fun (V40, V41, V42) -> V42 end(E7, E8, E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end} | [{'Idris.Idris.Syntax.ShowTypes', case V36 of {'Idris.Idris.REPLOpts.MkREPLOpts', E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23} -> (fun (V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56) -> V43 end(E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end} | [{'Idris.Idris.Syntax.EvalMode', case V36 of {'Idris.Idris.REPLOpts.MkREPLOpts', E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37} -> (fun (V57, V58, V59, V60, V61, V62, V63, V64, V65, V66, V67, V68, V69, V70) -> V58 end(E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end} | [{'Idris.Idris.Syntax.Editor', case V36 of {'Idris.Idris.REPLOpts.MkREPLOpts', E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51} -> (fun (V71, V72, V73, V74, V75, V76, V77, V78, V79, V80, V81, V82, V83, V84) -> V76 end(E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end} | []]]]]]} end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--findCG'(V0, V1, V2) -> begin (V31 = begin (V30 = (('Idris.Idris2.Erlang.Data.IORef':'un--readIORef'('erased', 'erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V3) -> fun (V4) -> fun (V5) -> fun (V6) -> fun (V7) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor__IO'('erased', 'erased', V5, V6, V7)) end end end end end, fun (V8) -> fun (V9) -> fun (V10) -> V9 end end end, fun (V11) -> fun (V12) -> fun (V13) -> fun (V14) -> fun (V15) -> begin (V16 = (V13(V15))), begin (V17 = (V14(V15))), (V16(V17)) end end end end end end end}, fun (V18) -> fun (V19) -> fun (V20) -> fun (V21) -> fun (V22) -> begin (V23 = (V20(V22))), ((V21(V23))(V22)) end end end end end end, fun (V24) -> fun (V25) -> fun (V26) -> begin (V27 = (V25(V26))), (V27(V26)) end end end end}, fun (V28) -> fun (V29) -> V29 end end}, V1))(V2))), {'Idris.Prelude.Types.Right', V30} end), case V31 of {'Idris.Prelude.Types.Left', E0} -> (fun (V32) -> {'Idris.Prelude.Types.Left', V32} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V33) -> (('case--findCG-3940'(V1, V0, V33, case case case V33 of {'Idris.Core.Context.MkDefs', E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50} -> (fun (V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59) -> V38 end(E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of {'Idris.Core.Options.MkOptions', E16, E17, E18, E19, E20, E21, E22, E23, E24} -> (fun (V60, V61, V62, V63, V64, V65, V66, V67, V68) -> V62 end(E16, E17, E18, E19, E20, E21, E22, E23, E24)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of {'Idris.Core.Options.MkSessionOpts', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15} -> (fun (V69, V70, V71, V72, V73, V74, V75, V76, V77, V78, V79, V80, V81, V82) -> V72 end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V2)) end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--execExp'(V0, V1, V2, V3, V4, V5, V6) -> begin (V7 = ('Idris.Idris2.Idris.Desugar':'un--desugar'(V2, V0, V3, V1, {'Idris.Idris.Desugar.AnyExpr'}, [], {'Idris.Idris.Syntax.PApp', ('Idris.Idris2.Idris.REPLOpts':'un--replFC'()), {'Idris.Idris.Syntax.PRef', ('Idris.Idris2.Idris.REPLOpts':'un--replFC'()), {'Idris.Core.Name.UN', <<"unsafePerformIO"/utf8>>}}, V5}, V6))), case V7 of {'Idris.Prelude.Types.Left', E0} -> (fun (V8) -> {'Idris.Prelude.Types.Left', V8} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V9) -> begin (V10 = (('Idris.Idris2.Core.Context':'un--resolveName'(V0, {'Idris.Core.Name.UN', <<"[input]"/utf8>>}))(V6))), case V10 of {'Idris.Prelude.Types.Left', E2} -> (fun (V11) -> {'Idris.Prelude.Types.Left', V11} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V12) -> begin (V13 = (('Idris.Idris2.TTImp.Elab':'un--elabTerm'([], V0, V3, V1, V12, {'Idris.TTImp.Elab.Check.InExpr'}, [], [], {'Idris.Core.Env.Nil'}, V9, {'Idris.Prelude.Types.Nothing'}))(V6))), case V13 of {'Idris.Prelude.Types.Left', E4} -> (fun (V14) -> {'Idris.Prelude.Types.Left', V14} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V15) -> case V15 of {'Idris.Builtin.MkPair', E6, E7} -> (fun (V16, V17) -> begin (V22 = ('Idris.Idris2.Core.LinearCheck':'un--linearCheck'([], V0, V1, ('Idris.Idris2.Idris.REPLOpts':'un--replFC'()), ('Idris.Idris2.Algebra.Semiring':'un--linear'('erased', {'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V18) -> fun (V19) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring__ZeroOneOmega'(V18, V19)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring__ZeroOneOmega'()), fun (V20) -> fun (V21) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring__ZeroOneOmega'(V20, V21)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring__ZeroOneOmega'())})), 0, {'Idris.Core.Env.Nil'}, V16, V6))), case V22 of {'Idris.Prelude.Types.Left', E8} -> (fun (V23) -> {'Idris.Prelude.Types.Left', V23} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V24) -> begin (V28 = begin (V25 = ('un--findCG'(V4, V0, V6))), case V25 of {'Idris.Prelude.Types.Left', E10} -> (fun (V26) -> {'Idris.Prelude.Types.Left', V26} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V27) -> ('Idris.Idris2.Compiler.Common':'un--cgExecuteExpr'(V0, V27, V24, V6)) end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V28 of {'Idris.Prelude.Types.Left', E12} -> (fun (V29) -> {'Idris.Prelude.Types.Left', V29} end(E12)); {'Idris.Prelude.Types.Right', E13} -> (fun (V30) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.REPL.Executed', V5}} end(E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E6, E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--execDecls'(V0, V1, V2, V3, V4, V5) -> begin (V8 = (('Idris.Idris2.Core.Core':'un--traverse_'('erased', 'erased', fun (V6) -> fun (V7) -> ('nested--30538-9169--in--un--execDecl'(V4, V3, V2, V1, V0, V6, V7)) end end, V4))(V5))), case V8 of {'Idris.Prelude.Types.Left', E0} -> (fun (V9) -> {'Idris.Prelude.Types.Left', V9} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V10) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.REPL.DefDeclared'}} end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--dropLamsTm'(V0, V1, V2, V3) -> case V1 of 0 -> {'Idris.Builtin.DPair.MkDPair', V0, {'Idris.Builtin.MkPair', V2, V3}}; _ -> begin (V4 = (V1 - 1)), case V3 of {'Idris.Core.TT.Bind', E0, E1, E2, E3} -> (fun (V5, V6, V7, V8) -> ('un--dropLamsTm'([V6 | V0], V4, {'Idris.Core.Env.::', V7, V2}, V8)) end(E0, E1, E2, E3)); _ -> {'Idris.Builtin.DPair.MkDPair', V0, {'Idris.Builtin.MkPair', V2, V3}} end end end.
'un--dropLams'(V0, V1) -> case V0 of 0 -> V1; _ -> begin (V2 = (V0 - 1)), case V1 of {'Idris.TTImp.TTImp.ILam', E0, E1, E2, E3, E4, E5} -> (fun (V3, V4, V5, V6, V7, V8) -> ('un--dropLams'(V2, V8)) end(E0, E1, E2, E3, E4, E5)); _ -> V1 end end end.
'un--displayType'(V0, V1, V2, V3) -> case V3 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V4, V5) -> case V5 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V6, V7) -> ('Idris.Idris2.Prelude.Types':'un--maybe'('erased', 'erased', fun () -> fun (V8) -> begin (V33 = begin (V30 = ('Idris.Idris2.Core.Normalise':'un--normaliseHoles'(V0, [], V2, {'Idris.Core.Env.Nil'}, case V7 of {'Idris.Core.Context.MkGlobalDef', E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24} -> (fun (V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29) -> V11 end(E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V8))), case V30 of {'Idris.Prelude.Types.Left', E25} -> (fun (V31) -> {'Idris.Prelude.Types.Left', V31} end(E25)); {'Idris.Prelude.Types.Right', E26} -> (fun (V32) -> ('Idris.Idris2.Idris.Resugar':'un--resugar'([], V0, V1, {'Idris.Core.Env.Nil'}, V32, V8)) end(E26)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V33 of {'Idris.Prelude.Types.Left', E27} -> (fun (V34) -> {'Idris.Prelude.Types.Left', V34} end(E27)); {'Idris.Prelude.Types.Right', E28} -> (fun (V35) -> begin (V57 = ('Idris.Idris2.Core.Context':'un--aliasName'(V0, case V7 of {'Idris.Core.Context.MkGlobalDef', E29, E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49} -> (fun (V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56) -> V37 end(E29, E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V8))), case V57 of {'Idris.Prelude.Types.Left', E50} -> (fun (V58) -> {'Idris.Prelude.Types.Left', V58} end(E50)); {'Idris.Prelude.Types.Right', E51} -> (fun (V59) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'('erased', ('Idris.Idris2.Core.Name':'dn--un--pretty_Pretty__Name'('erased', V59)), ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'('erased', ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Symbols':'un--colon'('erased')), ('Idris.Idris2.Idris.Pretty':'un--prettyTerm'(V35))))))} end(E51)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E28)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end, fun () -> fun (V60) -> fun (V61) -> ('Idris.Idris2.Idris.IDEMode.Holes':'un--prettyHole'([], V0, V1, V2, {'Idris.Core.Env.Nil'}, V4, V60, case V7 of {'Idris.Core.Context.MkGlobalDef', E52, E53, E54, E55, E56, E57, E58, E59, E60, E61, E62, E63, E64, E65, E66, E67, E68, E69, E70, E71, E72} -> (fun (V62, V63, V64, V65, V66, V67, V68, V69, V70, V71, V72, V73, V74, V75, V76, V77, V78, V79, V80, V81, V82) -> V64 end(E52, E53, E54, E55, E56, E57, E58, E59, E60, E61, E62, E63, E64, E65, E66, E67, E68, E69, E70, E71, E72)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V61)) end end end, ('Idris.Idris2.Idris.IDEMode.Holes':'un--isHole'(V7)))) end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--displayTerm'(V0, V1, V2, V3, V4) -> begin (V8 = begin (V5 = ('Idris.Idris2.Core.Normalise':'un--normaliseHoles'(V0, [], V2, {'Idris.Core.Env.Nil'}, V3, V4))), case V5 of {'Idris.Prelude.Types.Left', E0} -> (fun (V6) -> {'Idris.Prelude.Types.Left', V6} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V7) -> ('Idris.Idris2.Idris.Resugar':'un--resugar'([], V0, V1, {'Idris.Core.Env.Nil'}, V7, V4)) end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V8 of {'Idris.Prelude.Types.Left', E2} -> (fun (V9) -> {'Idris.Prelude.Types.Left', V9} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V10) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Idris.Pretty':'un--prettyTerm'(V10))} end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--displayResult'(V0, V1, V2, V3, V4, V5) -> case V5 of {'Idris.Idris.REPL.REPLError', E0} -> (fun (V6) -> fun (V7) -> ('Idris.Idris2.Idris.REPLCommon':'un--printError'(V4, V6, V7)) end end(E0)); {'Idris.Idris.REPL.Evaluated', E1, E2} -> (fun (V8, V9) -> case V9 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V10) -> ('Idris.Idris2.Idris.REPLCommon':'un--printResult'(V4, ('Idris.Idris2.Idris.Pretty':'un--prettyTerm'(V8)), V10)) end end()); {'Idris.Prelude.Types.Just', E3} -> (fun (V11) -> fun (V12) -> ('Idris.Idris2.Idris.REPLCommon':'un--printResult'(V4, ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'('erased', ('Idris.Idris2.Idris.Pretty':'un--prettyTerm'(V8)), ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'('erased', ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Symbols':'un--colon'('erased')), ('Idris.Idris2.Idris.Pretty':'un--code'(('Idris.Idris2.Idris.Pretty':'un--prettyTerm'(V11)))))))), V12)) end end(E3)); _ -> fun (V13) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end end end(E1, E2)); {'Idris.Idris.REPL.Printed', E4} -> (fun (V14) -> fun (V15) -> ('Idris.Idris2.Idris.REPLCommon':'un--printResult'(V4, V14, V15)) end end(E4)); {'Idris.Idris.REPL.TermChecked', E5, E6} -> (fun (V16, V17) -> fun (V18) -> ('Idris.Idris2.Idris.REPLCommon':'un--printResult'(V4, ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'('erased', ('Idris.Idris2.Idris.Pretty':'un--prettyTerm'(V16)), ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'('erased', ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Symbols':'un--colon'('erased')), ('Idris.Idris2.Idris.Pretty':'un--code'(('Idris.Idris2.Idris.Pretty':'un--prettyTerm'(V17)))))))), V18)) end end(E5, E6)); {'Idris.Idris.REPL.FileLoaded', E7} -> (fun (V19) -> fun (V20) -> ('Idris.Idris2.Idris.REPLCommon':'un--printResult'(V4, ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'('erased', ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Util':'un--reflow'('erased', <<"Loaded file"/utf8>>)), ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty__String'('erased', V19)))), V20)) end end(E7)); {'Idris.Idris.REPL.ModuleLoaded', E8} -> (fun (V21) -> fun (V22) -> ('Idris.Idris2.Idris.REPLCommon':'un--printResult'(V4, ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'('erased', ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Util':'un--reflow'('erased', <<"Imported module"/utf8>>)), ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty__String'('erased', V21)))), V22)) end end(E8)); {'Idris.Idris.REPL.ErrorLoadingModule', E9, E10} -> (fun (V23, V24) -> fun (V25) -> begin (V26 = (('Idris.Idris2.Idris.Error':'un--perror'(V0, V2, V4, V24))(V25))), case V26 of {'Idris.Prelude.Types.Left', E11} -> (fun (V27) -> {'Idris.Prelude.Types.Left', V27} end(E11)); {'Idris.Prelude.Types.Right', E12} -> (fun (V28) -> ('Idris.Idris2.Idris.REPLCommon':'un--printResult'(V4, ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'('erased', ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Util':'un--reflow'('erased', <<"Error loading module"/utf8>>)), ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'('erased', ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--<+>_Semigroup__(Doc $ann)'('erased', ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty__String'('erased', V23)), ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Symbols':'un--colon'('erased')))), V28)))), V25)) end(E12)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E9, E10)); {'Idris.Idris.REPL.ErrorLoadingFile', E13, E14} -> (fun (V29, V30) -> fun (V31) -> ('Idris.Idris2.Idris.REPLCommon':'un--printResult'(V4, ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'('erased', ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Util':'un--reflow'('erased', <<"Error loading file"/utf8>>)), ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'('erased', ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--<+>_Semigroup__(Doc $ann)'('erased', ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty__String'('erased', V29)), ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Symbols':'un--colon'('erased')))), ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty__String'('erased', ('Idris.Idris2.Erlang.System.File':'dn--un--show_Show__FileError'(V30)))))))), V31)) end end(E13, E14)); {'Idris.Idris.REPL.ErrorsBuildingFile', E15, E16} -> (fun (V32, V33) -> fun (V34) -> ('Idris.Idris2.Idris.REPLCommon':'un--printResult'(V4, ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'('erased', ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Util':'un--reflow'('erased', <<"Error(s) building file"/utf8>>)), ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty__String'('erased', V32)))), V34)) end end(E15, E16)); {'Idris.Idris.REPL.NoFileLoaded'} -> (fun () -> fun (V35) -> ('Idris.Idris2.Idris.REPLCommon':'un--printError'(V4, ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Util':'un--reflow'('erased', <<"No file can be reloaded"/utf8>>)), V35)) end end()); {'Idris.Idris.REPL.CurrentDirectory', E17} -> (fun (V36) -> fun (V37) -> ('Idris.Idris2.Idris.REPLCommon':'un--printResult'(V4, ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'('erased', ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Util':'un--reflow'('erased', <<"Current working directory is"/utf8>>)), ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Symbols':'un--squotes'('erased', ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty__String'('erased', V36)))))), V37)) end end(E17)); {'Idris.Idris.REPL.CompilationFailed'} -> (fun () -> fun (V38) -> ('Idris.Idris2.Idris.REPLCommon':'un--printError'(V4, ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Util':'un--reflow'('erased', <<"Compilation failed"/utf8>>)), V38)) end end()); {'Idris.Idris.REPL.Compiled', E18} -> (fun (V39) -> fun (V40) -> ('Idris.Idris2.Idris.REPLCommon':'un--printResult'(V4, ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'('erased', ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty__String'('erased', <<"File"/utf8>>)), ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'('erased', ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty__String'('erased', V39)), ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty__String'('erased', <<"written"/utf8>>)))))), V40)) end end(E18)); {'Idris.Idris.REPL.CompiledLibrary', E19} -> (fun (V41) -> case V41 of {'Idris.Builtin.MkPair', E20, E21} -> (fun (V42, V43) -> fun (V44) -> ('Idris.Idris2.Idris.REPLCommon':'un--printResult'(V4, ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'('erased', ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty__String'('erased', <<"Compiled"/utf8>>)), ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty__String'('erased', V42)))), V44)) end end(E20, E21)); _ -> fun (V45) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end end end(E19)); {'Idris.Idris.REPL.ProofFound', E22} -> (fun (V46) -> fun (V47) -> ('Idris.Idris2.Idris.REPLCommon':'un--printResult'(V4, ('Idris.Idris2.Idris.Pretty':'un--prettyTerm'(V46)), V47)) end end(E22)); {'Idris.Idris.REPL.Missed', E23} -> (fun (V48) -> fun (V49) -> ('Idris.Idris2.Idris.REPLCommon':'un--printResult'(V4, ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'un--vsep'('erased', ('Idris.Idris2.Prelude.Interfaces':'un--<$>'('erased', 'erased', 'erased', fun (V50) -> fun (V51) -> fun (V52) -> fun (V53) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', V52, V53)) end end end end, fun (V54) -> ('un--handleMissing'(V54)) end, V48)))), V49)) end end(E23)); {'Idris.Idris.REPL.CheckedTotal', E24} -> (fun (V55) -> fun (V56) -> ('Idris.Idris2.Idris.REPLCommon':'un--printResult'(V4, ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'un--vsep'('erased', ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', fun (V57) -> case V57 of {'Idris.Builtin.MkPair', E25, E26} -> (fun (V58, V59) -> ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'('erased', ('Idris.Idris2.Core.Name':'dn--un--pretty_Pretty__Name'('erased', V58)), ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'('erased', ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty__String'('erased', <<"is"/utf8>>)), ('Idris.Idris2.Core.TT':'dn--un--pretty_Pretty__Totality'('erased', V59)))))) end(E25, E26)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, V55)))), V56)) end end(E24)); {'Idris.Idris.REPL.FoundHoles', E27} -> (fun (V60) -> case V60 of [] -> fun (V61) -> ('Idris.Idris2.Idris.REPLCommon':'un--printResult'(V4, ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Util':'un--reflow'('erased', <<"No holes"/utf8>>)), V61)) end; [E31 | E32] -> (fun (V62, V63) -> case V63 of [] -> fun (V64) -> ('Idris.Idris2.Idris.REPLCommon':'un--printResult'(V4, ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'('erased', ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--<+>_Semigroup__(Doc $ann)'('erased', ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Util':'un--reflow'('erased', <<"1 hole"/utf8>>)), ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Symbols':'un--colon'('erased')))), ('Idris.Idris2.Core.Name':'dn--un--pretty_Pretty__Name'('erased', case V62 of {'Idris.Idris.IDEMode.Holes.MkHoleData', E36, E37, E38} -> (fun (V65, V66, V67) -> V65 end(E36, E37, E38)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)))), V64)) end; _ -> begin (V78 = ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'un--concatWith'('erased', fun (V68) -> fun (V69) -> ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'un--surround'('erased', ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty__String'('erased', <<", "/utf8>>)), V68, V69)) end end, ('Idris.Idris2.Prelude.Interfaces':'un--<$>'('erased', 'erased', 'erased', fun (V70) -> fun (V71) -> fun (V72) -> fun (V73) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', V72, V73)) end end end end, fun (V74) -> ('Idris.Idris2.Core.Name':'dn--un--pretty_Pretty__Name'('erased', case V74 of {'Idris.Idris.IDEMode.Holes.MkHoleData', E33, E34, E35} -> (fun (V75, V76, V77) -> V75 end(E33, E34, E35)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)) end, V60))))), fun (V79) -> ('Idris.Idris2.Idris.REPLCommon':'un--printResult'(V4, ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'('erased', ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty__Nat'('erased', ('Idris.Idris2.Prelude.Types.List':'un--length'('erased', V60)))), ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'('erased', ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--<+>_Semigroup__(Doc $ann)'('erased', ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty__String'('erased', <<"holes"/utf8>>)), ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Symbols':'un--colon'('erased')))), V78)))), V79)) end end end end(E31, E32)); _ -> begin (V90 = ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'un--concatWith'('erased', fun (V80) -> fun (V81) -> ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'un--surround'('erased', ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty__String'('erased', <<", "/utf8>>)), V80, V81)) end end, ('Idris.Idris2.Prelude.Interfaces':'un--<$>'('erased', 'erased', 'erased', fun (V82) -> fun (V83) -> fun (V84) -> fun (V85) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', V84, V85)) end end end end, fun (V86) -> ('Idris.Idris2.Core.Name':'dn--un--pretty_Pretty__Name'('erased', case V86 of {'Idris.Idris.IDEMode.Holes.MkHoleData', E28, E29, E30} -> (fun (V87, V88, V89) -> V87 end(E28, E29, E30)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)) end, V60))))), fun (V91) -> ('Idris.Idris2.Idris.REPLCommon':'un--printResult'(V4, ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'('erased', ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty__Nat'('erased', ('Idris.Idris2.Prelude.Types.List':'un--length'('erased', V60)))), ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'('erased', ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--<+>_Semigroup__(Doc $ann)'('erased', ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty__String'('erased', <<"holes"/utf8>>)), ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Symbols':'un--colon'('erased')))), V90)))), V91)) end end end end(E27)); {'Idris.Idris.REPL.LogLevelSet', E39} -> (fun (V92) -> fun (V93) -> ('Idris.Idris2.Idris.REPLCommon':'un--printResult'(V4, ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'('erased', ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Util':'un--reflow'('erased', <<"Set loglevel to"/utf8>>)), ('Idris.Idris2.Core.Options.Log':'dn--un--pretty_Pretty__LogLevel'('erased', V92)))), V93)) end end(E39)); {'Idris.Idris.REPL.ConsoleWidthSet', E40} -> (fun (V94) -> case V94 of {'Idris.Prelude.Types.Just', E41} -> (fun (V95) -> fun (V96) -> ('Idris.Idris2.Idris.REPLCommon':'un--printResult'(V4, ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'('erased', ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Util':'un--reflow'('erased', <<"Set consolewidth to"/utf8>>)), ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty__Nat'('erased', V95)))), V96)) end end(E41)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V97) -> ('Idris.Idris2.Idris.REPLCommon':'un--printResult'(V4, ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Util':'un--reflow'('erased', <<"Set consolewidth to auto"/utf8>>)), V97)) end end()); _ -> fun (V98) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end end end(E40)); {'Idris.Idris.REPL.ColorSet', E42} -> (fun (V99) -> fun (V100) -> ('Idris.Idris2.Idris.REPLCommon':'un--printResult'(V4, ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Util':'un--reflow'('erased', case V99 of 0 -> <<"Set color on"/utf8>>; 1 -> <<"Set color off"/utf8>>; _ -> ('erlang':'throw'("Error: Unreachable branch")) end)), V100)) end end(E42)); {'Idris.Idris.REPL.VersionIs', E43} -> (fun (V101) -> fun (V102) -> ('Idris.Idris2.Idris.REPLCommon':'un--printResult'(V4, ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty__String'('erased', ('Idris.Idris2.Idris.Version':'un--showVersion'(0, V101)))), V102)) end end(E43)); {'Idris.Idris.REPL.RequestedHelp'} -> (fun () -> fun (V103) -> ('Idris.Idris2.Idris.REPLCommon':'un--printResult'(V4, ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty__String'('erased', ('un--displayHelp'()))), V103)) end end()); {'Idris.Idris.REPL.Edited', E44} -> (fun (V104) -> case V104 of {'Idris.Idris.REPL.DisplayEdit', E45} -> (fun (V105) -> case V105 of {'Idris.Text.PrettyPrint.Prettyprinter.Doc.Empty'} -> (fun () -> fun (V106) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end end()); _ -> fun (V107) -> ('Idris.Idris2.Idris.REPLCommon':'un--printResult'(V4, V105, V107)) end end end(E45)); {'Idris.Idris.REPL.EditError', E46} -> (fun (V108) -> fun (V109) -> ('Idris.Idris2.Idris.REPLCommon':'un--printError'(V4, V108, V109)) end end(E46)); {'Idris.Idris.REPL.MadeLemma', E47, E48, E49, E50} -> (fun (V110, V111, V112, V113) -> fun (V114) -> ('Idris.Idris2.Idris.REPLCommon':'un--printResult'(V4, ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty__String'('erased', ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('Idris.Idris2.Parser.Unlit':'un--relit'(V110, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show__Name'(V111)), ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<" : "/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('Idris.Idris2.Idris.Syntax':'dn--un--show_Show__PTerm'(V112)), <<"\x{a}"/utf8>>)))))))), V113)))), V114)) end end(E47, E48, E49, E50)); {'Idris.Idris.REPL.MadeWith', E51, E52} -> (fun (V115, V116) -> fun (V117) -> ('Idris.Idris2.Idris.REPLCommon':'un--printResult'(V4, ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty__String'('erased', ('Idris.Idris2.Core.Name.Namespace':'un--showSep'(<<"\x{a}"/utf8>>, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', fun (V118) -> ('Idris.Idris2.Parser.Unlit':'un--relit'(V115, V118)) end, V116)))))), V117)) end end(E51, E52)); {'Idris.Idris.REPL.MadeCase', E53, E54} -> (fun (V119, V120) -> fun (V121) -> ('Idris.Idris2.Idris.REPLCommon':'un--printResult'(V4, ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty__String'('erased', ('Idris.Idris2.Core.Name.Namespace':'un--showSep'(<<"\x{a}"/utf8>>, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', fun (V122) -> ('Idris.Idris2.Parser.Unlit':'un--relit'(V119, V122)) end, V120)))))), V121)) end end(E53, E54)); _ -> fun (V123) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end end end(E44)); {'Idris.Idris.REPL.OptionsSet', E55} -> (fun (V124) -> fun (V125) -> ('Idris.Idris2.Idris.REPLCommon':'un--printResult'(V4, ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'un--vsep'('erased', ('Idris.Idris2.Prelude.Interfaces':'un--<$>'('erased', 'erased', 'erased', fun (V126) -> fun (V127) -> fun (V128) -> fun (V129) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', V128, V129)) end end end end, fun (V130) -> ('Idris.Idris2.Idris.Syntax':'dn--un--pretty_Pretty__REPLOpt'('erased', V130)) end, V124)))), V125)) end end(E55)); _ -> fun (V131) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end end.
'un--displayPats'(V0, V1, V2, V3) -> case V3 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V4, V5) -> case V5 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V6, V7) -> ('case--displayPats-3610'(V4, V6, V7, V2, V1, V0, case V7 of {'Idris.Core.Context.MkGlobalDef', E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24} -> (fun (V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28) -> V25 end(E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)) end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--displayPatTerm'(V0, V1, V2, V3, V4) -> begin (V8 = begin (V5 = ('Idris.Idris2.Core.Normalise':'un--normaliseHoles'(V0, [], V2, {'Idris.Core.Env.Nil'}, V3, V4))), case V5 of {'Idris.Prelude.Types.Left', E0} -> (fun (V6) -> {'Idris.Prelude.Types.Left', V6} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V7) -> ('Idris.Idris2.Idris.Resugar':'un--resugarNoPatvars'([], V0, V1, {'Idris.Core.Env.Nil'}, V7, V4)) end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V8 of {'Idris.Prelude.Types.Left', E2} -> (fun (V9) -> {'Idris.Prelude.Types.Left', V9} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V10) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Idris.Syntax':'dn--un--show_Show__PTerm'(V10))} end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--displayHelp'() -> ('Idris.Idris2.Core.Name.Namespace':'un--showSep'(<<"\x{a}"/utf8>>, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', fun (V0) -> ('nested--33039-12278--in--un--cmdInfo'(V0)) end, ('Idris.Idris2.Idris.Parser':'un--help'()))))).
'un--displayErrors'(V0, V1, V2, V3, V4, V5) -> case V5 of {'Idris.Idris.REPL.ErrorLoadingFile', E0, E1} -> (fun (V6, V7) -> fun (V8) -> ('Idris.Idris2.Idris.REPLCommon':'un--printError'(V4, ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'('erased', ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Util':'un--reflow'('erased', <<"File error in"/utf8>>)), ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'('erased', ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--<+>_Semigroup__(Doc $ann)'('erased', ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty__String'('erased', V6)), ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Symbols':'un--colon'('erased')))), ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty__String'('erased', ('Idris.Idris2.Erlang.System.File':'dn--un--show_Show__FileError'(V7)))))))), V8)) end end(E0, E1)); _ -> fun (V9) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end end.
'un--displayClause'(V0, V1, V2, V3) -> case V3 of {'Idris.Builtin.DPair.MkDPair', E0, E1} -> (fun (V4, V5) -> case V5 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V6, V7) -> case V7 of {'Idris.Builtin.MkPair', E4, E5} -> (fun (V8, V9) -> fun (V10) -> begin (V14 = begin (V11 = ('Idris.Idris2.Core.Normalise':'un--normaliseHoles'(V0, V4, V2, V6, V8, V10))), case V11 of {'Idris.Prelude.Types.Left', E6} -> (fun (V12) -> {'Idris.Prelude.Types.Left', V12} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V13) -> ('Idris.Idris2.Idris.Resugar':'un--resugar'(V4, V0, V1, V6, V13, V10)) end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V14 of {'Idris.Prelude.Types.Left', E8} -> (fun (V15) -> {'Idris.Prelude.Types.Left', V15} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V16) -> begin (V20 = begin (V17 = ('Idris.Idris2.Core.Normalise':'un--normaliseHoles'(V0, V4, V2, V6, V9, V10))), case V17 of {'Idris.Prelude.Types.Left', E10} -> (fun (V18) -> {'Idris.Prelude.Types.Left', V18} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V19) -> ('Idris.Idris2.Idris.Resugar':'un--resugar'(V4, V0, V1, V6, V19, V10)) end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V20 of {'Idris.Prelude.Types.Left', E12} -> (fun (V21) -> {'Idris.Prelude.Types.Left', V21} end(E12)); {'Idris.Prelude.Types.Right', E13} -> (fun (V22) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'('erased', ('Idris.Idris2.Idris.Pretty':'un--prettyTerm'(V16)), ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'('erased', ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Symbols':'un--equals'('erased')), ('Idris.Idris2.Idris.Pretty':'un--prettyTerm'(V22))))))} end(E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--compileLib'(V0, V1, V2, V3, V4) -> begin (V8 = begin (V5 = ('un--findCG'(V1, V0, V4))), case V5 of {'Idris.Prelude.Types.Left', E0} -> (fun (V6) -> {'Idris.Prelude.Types.Left', V6} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V7) -> ('Idris.Idris2.Compiler.Common':'un--cgCompileLibrary'(V0, V7, V2, V3, V4)) end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V8 of {'Idris.Prelude.Types.Left', E2} -> (fun (V9) -> {'Idris.Prelude.Types.Left', V9} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V10) -> (('Idris.Idris2.Prelude.Types':'un--maybe'('erased', 'erased', fun () -> fun (V11) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.REPL.CompilationFailed'}} end end, fun () -> fun (V12) -> fun (V13) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.REPL.CompiledLibrary', V12}} end end end, V10))(V4)) end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--compileExp'(V0, V1, V2, V3, V4, V5, V6, V7) -> begin (V8 = (('Idris.Idris2.Core.Context':'un--resolveName'(V0, {'Idris.Core.Name.UN', <<"[input]"/utf8>>}))(V7))), case V8 of {'Idris.Prelude.Types.Left', E0} -> (fun (V9) -> {'Idris.Prelude.Types.Left', V9} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V10) -> begin (V11 = ('Idris.Idris2.Idris.Desugar':'un--desugar'(V2, V0, V3, V1, {'Idris.Idris.Desugar.AnyExpr'}, [], {'Idris.Idris.Syntax.PApp', ('Idris.Idris2.Idris.REPLOpts':'un--replFC'()), {'Idris.Idris.Syntax.PRef', ('Idris.Idris2.Idris.REPLOpts':'un--replFC'()), {'Idris.Core.Name.UN', <<"unsafePerformIO"/utf8>>}}, V5}, V7))), case V11 of {'Idris.Prelude.Types.Left', E2} -> (fun (V12) -> {'Idris.Prelude.Types.Left', V12} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V13) -> begin (V14 = (('Idris.Idris2.TTImp.Elab':'un--elabTerm'([], V0, V3, V1, V10, {'Idris.TTImp.Elab.Check.InExpr'}, [], [], {'Idris.Core.Env.Nil'}, V13, {'Idris.Prelude.Types.Nothing'}))(V7))), case V14 of {'Idris.Prelude.Types.Left', E4} -> (fun (V15) -> {'Idris.Prelude.Types.Left', V15} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V16) -> case V16 of {'Idris.Builtin.MkPair', E6, E7} -> (fun (V17, V18) -> begin (V23 = ('Idris.Idris2.Core.LinearCheck':'un--linearCheck'([], V0, V1, ('Idris.Idris2.Idris.REPLOpts':'un--replFC'()), ('Idris.Idris2.Algebra.Semiring':'un--linear'('erased', {'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V19) -> fun (V20) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring__ZeroOneOmega'(V19, V20)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring__ZeroOneOmega'()), fun (V21) -> fun (V22) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring__ZeroOneOmega'(V21, V22)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring__ZeroOneOmega'())})), 0, {'Idris.Core.Env.Nil'}, V17, V7))), case V23 of {'Idris.Prelude.Types.Left', E8} -> (fun (V24) -> {'Idris.Prelude.Types.Left', V24} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V25) -> begin (V29 = begin (V26 = ('un--findCG'(V4, V0, V7))), case V26 of {'Idris.Prelude.Types.Left', E10} -> (fun (V27) -> {'Idris.Prelude.Types.Left', V27} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V28) -> ('Idris.Idris2.Compiler.Common':'un--cgCompileExpr'(V0, V28, V25, V6, V7)) end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V29 of {'Idris.Prelude.Types.Left', E12} -> (fun (V30) -> {'Idris.Prelude.Types.Left', V30} end(E12)); {'Idris.Prelude.Types.Right', E13} -> (fun (V31) -> (('Idris.Idris2.Prelude.Types':'un--maybe'('erased', 'erased', fun () -> fun (V32) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.REPL.CompilationFailed'}} end end, fun () -> fun (V33) -> fun (V34) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.REPL.Compiled', V33}} end end end, V31))(V7)) end(E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E6, E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--caseSplit'(V0, V1, V2) -> case V1 of 0 -> case V2 of [E2 | E3] -> (fun (V3, V4) -> [('un--rtrim'(V0)) | V4] end(E2, E3)); _ -> case V2 of [] -> [V0 | []]; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; _ -> begin (V5 = (V1 - 1)), case V2 of [E0 | E1] -> (fun (V6, V7) -> [V6 | ('un--caseSplit'(V0, V5, V7))] end(E0, E1)); _ -> case V2 of [] -> [V0 | []]; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end.
'un--anyAt'(V0, V1, V2, V3) -> (V1(V2)).
'un--addMadeLemma'(V0, V1, V2, V3, V4, V5) -> ('nested--25013-4447--in--un--addApp'(V5, V4, V3, V2, V1, V0, V0, V4, [], ('un--proofSearch'(V1, V3, V4, V5)))).
'un--addMadeCase'(V0, V1, V2, V3) -> ('nested--25144-4563--in--un--addW'(V3, V2, V1, V0, V2, [], V3)).
'un--addClause'(V0, V1, V2) -> case V1 of 0 -> case V2 of [] -> [('un--rtrim'(V0)) | []]; [E2 | E3] -> (fun (V3, V4) -> ('case--addClause-4308'(V3, V4, V0, (('Idris.Idris2.Prelude.Interfaces':'un--all'('erased', 'erased', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V5) -> fun (V6) -> fun (V7) -> fun (V8) -> fun (V9) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable__List'('erased', 'erased', V7, V8, V9)) end end end end end, fun (V10) -> fun (V11) -> fun (V12) -> fun (V13) -> fun (V14) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable__List'('erased', 'erased', V12, V13, V14)) end end end end end}, fun (V15) -> ('Idris.Idris2.Prelude.Types':'un--isSpace'(V15)) end))(('Idris.Idris2.Prelude.Types':'un--unpack'(V3)))))) end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end; _ -> begin (V16 = (V1 - 1)), case V2 of [E0 | E1] -> (fun (V17, V18) -> [V17 | ('un--addClause'(V0, V16, V18))] end(E0, E1)); [] -> [V0 | []]; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end.
