-module('Idris.Idris2.Erlang.Text.PrettyPrint.Prettyprinter.Render.Terminal').
-compile('no_auto_import').
-compile('inline').
-compile({'inline_size',24}).
-export([
  'case--renderString-7334'/6,
  'case--case block in renderString,go-7230'/7,
  'case--renderString,go-7205'/7,
  'case--renderString,go-7132'/7,
  'case--renderString,pop-7007'/4,
  'case--renderString,peek-6962'/4,
  'nested--2450-6933--in--un--writeOutput'/5,
  'nested--2450-6930--in--un--push'/5,
  'nested--2450-6932--in--un--pop'/4,
  'nested--2450-6931--in--un--peek'/4,
  'nested--2450-6934--in--un--go'/5,
  'un--underline'/0,
  'un--strike'/0,
  'un--renderString'/1,
  'un--renderIO'/1,
  'un--putDoc'/1,
  'un--italic'/0,
  'un--color'/1,
  'un--bold'/0,
  'un--bgColor'/1,
  'un--AnsiStyle'/0
]).
'case--renderString-7334'(V0, V1, V2, V3, V4, V5) -> case V5 of [] -> fun (V6) -> ('Idris.Idris2.Erlang.Control.Monad.ST':'dn--un--pure_Applicative__(ST $s)'('erased', 'erased', {'Idris.Prelude.Types.Nothing'}, V6)) end; [E0 | E1] -> (fun (V7, V8) -> case V8 of [] -> ('Idris.Idris2.Prelude.Interfaces':'un--<$>'('erased', 'erased', 'erased', fun (V9) -> fun (V10) -> fun (V11) -> fun (V12) -> fun (V13) -> ('Idris.Idris2.Erlang.Control.Monad.ST':'dn--un--map_Functor__(ST $s)'('erased', 'erased', 'erased', V11, V12, V13)) end end end end end, fun (V14) -> {'Idris.Prelude.Types.Just', V14} end, ('Idris.Idris2.Erlang.Data.IORef':'un--readIORef'('erased', 'erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V15) -> fun (V16) -> fun (V17) -> fun (V18) -> fun (V19) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor__IO'('erased', 'erased', V17, V18, V19)) end end end end end, fun (V20) -> fun (V21) -> fun (V22) -> V21 end end end, fun (V23) -> fun (V24) -> fun (V25) -> fun (V26) -> fun (V27) -> begin (V28 = (V25(V27))), begin (V29 = (V26(V27))), (V28(V29)) end end end end end end end}, fun (V30) -> fun (V31) -> fun (V32) -> fun (V33) -> fun (V34) -> begin (V35 = (V32(V34))), ((V33(V35))(V34)) end end end end end end, fun (V36) -> fun (V37) -> fun (V38) -> begin (V39 = (V37(V38))), (V39(V38)) end end end end}, fun (V40) -> fun (V41) -> V41 end end}, V3)))); _ -> fun (V42) -> ('Idris.Idris2.Erlang.Control.Monad.ST':'dn--un--pure_Applicative__(ST $s)'('erased', 'erased', {'Idris.Prelude.Types.Nothing'}, V42)) end end end(E0, E1)); _ -> fun (V43) -> ('Idris.Idris2.Erlang.Control.Monad.ST':'dn--un--pure_Applicative__(ST $s)'('erased', 'erased', {'Idris.Prelude.Types.Nothing'}, V43)) end end.
'case--case block in renderString,go-7230'(V0, V1, V2, V3, V4, V5, V6) -> case V6 of {'Idris.Prelude.Types.Just', E0} -> (fun (V7) -> fun (V8) -> ('Idris.Idris2.Erlang.Control.Monad.ST':'dn--un-->>=_Monad__(ST $s)'('erased', 'erased', 'erased', fun (V9) -> ('nested--2450-6933--in--un--writeOutput'(V0, 'erased', V3, ('Idris.Idris2.Control.ANSI.SGR':'un--escapeSGR'([{'Idris.Control.ANSI.SGR.Reset'} | V7])), V9)) end, fun (V10) -> ('nested--2450-6934--in--un--go'(V0, 'erased', V4, V3, V2)) end, V8)) end end(E0)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> ('Idris.Idris2.Erlang.Data.IORef':'un--writeIORef'('erased', 'erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V11) -> fun (V12) -> fun (V13) -> fun (V14) -> fun (V15) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor__IO'('erased', 'erased', V13, V14, V15)) end end end end end, fun (V16) -> fun (V17) -> fun (V18) -> V17 end end end, fun (V19) -> fun (V20) -> fun (V21) -> fun (V22) -> fun (V23) -> begin (V24 = (V21(V23))), begin (V25 = (V22(V23))), (V24(V25)) end end end end end end end}, fun (V26) -> fun (V27) -> fun (V28) -> fun (V29) -> fun (V30) -> begin (V31 = (V28(V30))), ((V29(V31))(V30)) end end end end end end, fun (V32) -> fun (V33) -> fun (V34) -> begin (V35 = (V33(V34))), (V35(V34)) end end end end}, fun (V36) -> fun (V37) -> V37 end end}, V4, [])) end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--renderString,go-7205'(V0, V1, V2, V3, V4, V5, V6) -> ('Idris.Idris2.Erlang.Control.Monad.ST':'dn--un-->>=_Monad__(ST $s)'('erased', 'erased', 'erased', fun (V7) -> ('nested--2450-6931--in--un--peek'(V0, 'erased', V4, V7)) end, fun (V8) -> case V8 of {'Idris.Prelude.Types.Just', E0} -> (fun (V9) -> fun (V10) -> ('Idris.Idris2.Erlang.Control.Monad.ST':'dn--un-->>=_Monad__(ST $s)'('erased', 'erased', 'erased', fun (V11) -> ('nested--2450-6933--in--un--writeOutput'(V0, 'erased', V3, ('Idris.Idris2.Control.ANSI.SGR':'un--escapeSGR'([{'Idris.Control.ANSI.SGR.Reset'} | V9])), V11)) end, fun (V12) -> ('nested--2450-6934--in--un--go'(V0, 'erased', V4, V3, V2)) end, V10)) end end(E0)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> ('Idris.Idris2.Erlang.Data.IORef':'un--writeIORef'('erased', 'erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V13) -> fun (V14) -> fun (V15) -> fun (V16) -> fun (V17) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor__IO'('erased', 'erased', V15, V16, V17)) end end end end end, fun (V18) -> fun (V19) -> fun (V20) -> V19 end end end, fun (V21) -> fun (V22) -> fun (V23) -> fun (V24) -> fun (V25) -> begin (V26 = (V23(V25))), begin (V27 = (V24(V25))), (V26(V27)) end end end end end end end}, fun (V28) -> fun (V29) -> fun (V30) -> fun (V31) -> fun (V32) -> begin (V33 = (V30(V32))), ((V31(V33))(V32)) end end end end end end, fun (V34) -> fun (V35) -> fun (V36) -> begin (V37 = (V35(V36))), (V37(V36)) end end end end}, fun (V38) -> fun (V39) -> V39 end end}, V4, [])) end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, V6)).
'case--renderString,go-7132'(V0, V1, V2, V3, V4, V5, V6) -> case V6 of {'Idris.Prelude.Types.Just', E0} -> (fun (V7) -> begin (V8 = ('Idris.Idris2.Prelude.Types':'dn--un--<+>_Semigroup__(List $a)'('erased', V2, V7))), fun (V9) -> ('Idris.Idris2.Erlang.Control.Monad.ST':'dn--un-->>=_Monad__(ST $s)'('erased', 'erased', 'erased', fun (V10) -> ('nested--2450-6930--in--un--push'(V0, 'erased', V5, V8, V10)) end, fun (V11) -> fun (V12) -> ('Idris.Idris2.Erlang.Control.Monad.ST':'dn--un-->>=_Monad__(ST $s)'('erased', 'erased', 'erased', fun (V13) -> ('nested--2450-6933--in--un--writeOutput'(V0, 'erased', V4, ('Idris.Idris2.Control.ANSI.SGR':'un--escapeSGR'(V8)), V13)) end, fun (V14) -> ('nested--2450-6934--in--un--go'(V0, 'erased', V5, V4, V3)) end, V12)) end end, V9)) end end end(E0)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> ('Idris.Idris2.Erlang.Data.IORef':'un--writeIORef'('erased', 'erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V15) -> fun (V16) -> fun (V17) -> fun (V18) -> fun (V19) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor__IO'('erased', 'erased', V17, V18, V19)) end end end end end, fun (V20) -> fun (V21) -> fun (V22) -> V21 end end end, fun (V23) -> fun (V24) -> fun (V25) -> fun (V26) -> fun (V27) -> begin (V28 = (V25(V27))), begin (V29 = (V26(V27))), (V28(V29)) end end end end end end end}, fun (V30) -> fun (V31) -> fun (V32) -> fun (V33) -> fun (V34) -> begin (V35 = (V32(V34))), ((V33(V35))(V34)) end end end end end end, fun (V36) -> fun (V37) -> fun (V38) -> begin (V39 = (V37(V38))), (V39(V38)) end end end end}, fun (V40) -> fun (V41) -> V41 end end}, V5, [])) end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--renderString,pop-7007'(V0, V1, V2, V3) -> case V3 of [E0 | E1] -> (fun (V4, V5) -> fun (V6) -> ('Idris.Idris2.Erlang.Control.Monad.ST':'dn--un-->>=_Monad__(ST $s)'('erased', 'erased', 'erased', ('Idris.Idris2.Erlang.Data.IORef':'un--writeIORef'('erased', 'erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V7) -> fun (V8) -> fun (V9) -> fun (V10) -> fun (V11) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor__IO'('erased', 'erased', V9, V10, V11)) end end end end end, fun (V12) -> fun (V13) -> fun (V14) -> V13 end end end, fun (V15) -> fun (V16) -> fun (V17) -> fun (V18) -> fun (V19) -> begin (V20 = (V17(V19))), begin (V21 = (V18(V19))), (V20(V21)) end end end end end end end}, fun (V22) -> fun (V23) -> fun (V24) -> fun (V25) -> fun (V26) -> begin (V27 = (V24(V26))), ((V25(V27))(V26)) end end end end end end, fun (V28) -> fun (V29) -> fun (V30) -> begin (V31 = (V29(V30))), (V31(V30)) end end end end}, fun (V32) -> fun (V33) -> V33 end end}, V2, V5)), fun (V34) -> fun (V35) -> ('Idris.Idris2.Erlang.Control.Monad.ST':'dn--un--pure_Applicative__(ST $s)'('erased', 'erased', {'Idris.Prelude.Types.Just', V4}, V35)) end end, V6)) end end(E0, E1)); [] -> fun (V36) -> ('Idris.Idris2.Erlang.Control.Monad.ST':'dn--un--pure_Applicative__(ST $s)'('erased', 'erased', {'Idris.Prelude.Types.Nothing'}, V36)) end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--renderString,peek-6962'(V0, V1, V2, V3) -> case V3 of [E0 | E1] -> (fun (V4, V5) -> fun (V6) -> ('Idris.Idris2.Erlang.Control.Monad.ST':'dn--un--pure_Applicative__(ST $s)'('erased', 'erased', {'Idris.Prelude.Types.Just', V4}, V6)) end end(E0, E1)); [] -> fun (V7) -> ('Idris.Idris2.Erlang.Control.Monad.ST':'dn--un--pure_Applicative__(ST $s)'('erased', 'erased', {'Idris.Prelude.Types.Nothing'}, V7)) end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--2450-6933--in--un--writeOutput'(V0, V1, V2, V3, V4) -> ('Idris.Idris2.Erlang.Control.Monad.ST':'un--modifySTRef'('erased', 'erased', V2, fun (V5) -> ('Idris.Idris2.Prelude.Types':'dn--un--<+>_Semigroup__String'(V5, V3)) end, V4)).
'nested--2450-6930--in--un--push'(V0, V1, V2, V3, V4) -> ('Idris.Idris2.Erlang.Control.Monad.ST':'un--modifySTRef'('erased', 'erased', V2, fun (V5) -> [V3 | V5] end, V4)).
'nested--2450-6932--in--un--pop'(V0, V1, V2, V3) -> ('Idris.Idris2.Erlang.Control.Monad.ST':'dn--un-->>=_Monad__(ST $s)'('erased', 'erased', 'erased', ('Idris.Idris2.Erlang.Data.IORef':'un--readIORef'('erased', 'erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V4) -> fun (V5) -> fun (V6) -> fun (V7) -> fun (V8) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor__IO'('erased', 'erased', V6, V7, V8)) end end end end end, fun (V9) -> fun (V10) -> fun (V11) -> V10 end end end, fun (V12) -> fun (V13) -> fun (V14) -> fun (V15) -> fun (V16) -> begin (V17 = (V14(V16))), begin (V18 = (V15(V16))), (V17(V18)) end end end end end end end}, fun (V19) -> fun (V20) -> fun (V21) -> fun (V22) -> fun (V23) -> begin (V24 = (V21(V23))), ((V22(V24))(V23)) end end end end end end, fun (V25) -> fun (V26) -> fun (V27) -> begin (V28 = (V26(V27))), (V28(V27)) end end end end}, fun (V29) -> fun (V30) -> V30 end end}, V2)), fun (V31) -> case V31 of [E0 | E1] -> (fun (V32, V33) -> fun (V34) -> ('Idris.Idris2.Erlang.Control.Monad.ST':'dn--un-->>=_Monad__(ST $s)'('erased', 'erased', 'erased', ('Idris.Idris2.Erlang.Data.IORef':'un--writeIORef'('erased', 'erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V35) -> fun (V36) -> fun (V37) -> fun (V38) -> fun (V39) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor__IO'('erased', 'erased', V37, V38, V39)) end end end end end, fun (V40) -> fun (V41) -> fun (V42) -> V41 end end end, fun (V43) -> fun (V44) -> fun (V45) -> fun (V46) -> fun (V47) -> begin (V48 = (V45(V47))), begin (V49 = (V46(V47))), (V48(V49)) end end end end end end end}, fun (V50) -> fun (V51) -> fun (V52) -> fun (V53) -> fun (V54) -> begin (V55 = (V52(V54))), ((V53(V55))(V54)) end end end end end end, fun (V56) -> fun (V57) -> fun (V58) -> begin (V59 = (V57(V58))), (V59(V58)) end end end end}, fun (V60) -> fun (V61) -> V61 end end}, V2, V33)), fun (V62) -> fun (V63) -> ('Idris.Idris2.Erlang.Control.Monad.ST':'dn--un--pure_Applicative__(ST $s)'('erased', 'erased', {'Idris.Prelude.Types.Just', V32}, V63)) end end, V34)) end end(E0, E1)); [] -> fun (V64) -> ('Idris.Idris2.Erlang.Control.Monad.ST':'dn--un--pure_Applicative__(ST $s)'('erased', 'erased', {'Idris.Prelude.Types.Nothing'}, V64)) end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, V3)).
'nested--2450-6931--in--un--peek'(V0, V1, V2, V3) -> ('Idris.Idris2.Erlang.Control.Monad.ST':'dn--un-->>=_Monad__(ST $s)'('erased', 'erased', 'erased', ('Idris.Idris2.Erlang.Data.IORef':'un--readIORef'('erased', 'erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V4) -> fun (V5) -> fun (V6) -> fun (V7) -> fun (V8) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor__IO'('erased', 'erased', V6, V7, V8)) end end end end end, fun (V9) -> fun (V10) -> fun (V11) -> V10 end end end, fun (V12) -> fun (V13) -> fun (V14) -> fun (V15) -> fun (V16) -> begin (V17 = (V14(V16))), begin (V18 = (V15(V16))), (V17(V18)) end end end end end end end}, fun (V19) -> fun (V20) -> fun (V21) -> fun (V22) -> fun (V23) -> begin (V24 = (V21(V23))), ((V22(V24))(V23)) end end end end end end, fun (V25) -> fun (V26) -> fun (V27) -> begin (V28 = (V26(V27))), (V28(V27)) end end end end}, fun (V29) -> fun (V30) -> V30 end end}, V2)), fun (V31) -> case V31 of [E0 | E1] -> (fun (V32, V33) -> fun (V34) -> ('Idris.Idris2.Erlang.Control.Monad.ST':'dn--un--pure_Applicative__(ST $s)'('erased', 'erased', {'Idris.Prelude.Types.Just', V32}, V34)) end end(E0, E1)); [] -> fun (V35) -> ('Idris.Idris2.Erlang.Control.Monad.ST':'dn--un--pure_Applicative__(ST $s)'('erased', 'erased', {'Idris.Prelude.Types.Nothing'}, V35)) end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, V3)).
'nested--2450-6934--in--un--go'(V0, V1, V2, V3, V4) -> case V4 of {'Idris.Text.PrettyPrint.Prettyprinter.Doc.SEmpty'} -> (fun () -> fun (V5) -> ('Idris.Idris2.Erlang.Control.Monad.ST':'dn--un--pure_Applicative__(ST $s)'('erased', 'erased', {'Idris.Builtin.MkUnit'}, V5)) end end()); {'Idris.Text.PrettyPrint.Prettyprinter.Doc.SChar', E0, E1} -> (fun (V6, V7) -> fun (V8) -> ('Idris.Idris2.Erlang.Control.Monad.ST':'dn--un-->>=_Monad__(ST $s)'('erased', 'erased', 'erased', fun (V9) -> ('nested--2450-6933--in--un--writeOutput'(V0, 'erased', V3, ('Idris.Idris2.Data.Strings':'un--singleton'(V6)), V9)) end, fun (V10) -> ('nested--2450-6934--in--un--go'(V0, 'erased', V2, V3, (V7()))) end, V8)) end end(E0, E1)); {'Idris.Text.PrettyPrint.Prettyprinter.Doc.SText', E2, E3, E4} -> (fun (V11, V12, V13) -> fun (V14) -> ('Idris.Idris2.Erlang.Control.Monad.ST':'dn--un-->>=_Monad__(ST $s)'('erased', 'erased', 'erased', fun (V15) -> ('nested--2450-6933--in--un--writeOutput'(V0, 'erased', V3, V12, V15)) end, fun (V16) -> ('nested--2450-6934--in--un--go'(V0, 'erased', V2, V3, (V13()))) end, V14)) end end(E2, E3, E4)); {'Idris.Text.PrettyPrint.Prettyprinter.Doc.SLine', E5, E6} -> (fun (V17, V18) -> fun (V19) -> ('Idris.Idris2.Erlang.Control.Monad.ST':'dn--un-->>=_Monad__(ST $s)'('erased', 'erased', 'erased', fun (V20) -> ('nested--2450-6933--in--un--writeOutput'(V0, 'erased', V3, ('Idris.Idris2.Prelude.Types':'dn--un--<+>_Semigroup__String'(('Idris.Idris2.Data.Strings':'un--singleton'($\x{a})), ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'un--textSpaces'(V17)))), V20)) end, fun (V21) -> ('nested--2450-6934--in--un--go'(V0, 'erased', V2, V3, V18)) end, V19)) end end(E5, E6)); {'Idris.Text.PrettyPrint.Prettyprinter.Doc.SAnnPush', E7, E8} -> (fun (V22, V23) -> fun (V24) -> ('Idris.Idris2.Erlang.Control.Monad.ST':'dn--un-->>=_Monad__(ST $s)'('erased', 'erased', 'erased', fun (V25) -> ('nested--2450-6931--in--un--peek'(V0, 'erased', V2, V25)) end, fun (V26) -> case V26 of {'Idris.Prelude.Types.Just', E9} -> (fun (V27) -> begin (V28 = ('Idris.Idris2.Prelude.Types':'dn--un--<+>_Semigroup__(List $a)'('erased', V22, V27))), fun (V29) -> ('Idris.Idris2.Erlang.Control.Monad.ST':'dn--un-->>=_Monad__(ST $s)'('erased', 'erased', 'erased', fun (V30) -> ('nested--2450-6930--in--un--push'(V0, 'erased', V2, V28, V30)) end, fun (V31) -> fun (V32) -> ('Idris.Idris2.Erlang.Control.Monad.ST':'dn--un-->>=_Monad__(ST $s)'('erased', 'erased', 'erased', fun (V33) -> ('nested--2450-6933--in--un--writeOutput'(V0, 'erased', V3, ('Idris.Idris2.Control.ANSI.SGR':'un--escapeSGR'(V28)), V33)) end, fun (V34) -> ('nested--2450-6934--in--un--go'(V0, 'erased', V2, V3, V23)) end, V32)) end end, V29)) end end end(E9)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> ('Idris.Idris2.Erlang.Data.IORef':'un--writeIORef'('erased', 'erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V35) -> fun (V36) -> fun (V37) -> fun (V38) -> fun (V39) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor__IO'('erased', 'erased', V37, V38, V39)) end end end end end, fun (V40) -> fun (V41) -> fun (V42) -> V41 end end end, fun (V43) -> fun (V44) -> fun (V45) -> fun (V46) -> fun (V47) -> begin (V48 = (V45(V47))), begin (V49 = (V46(V47))), (V48(V49)) end end end end end end end}, fun (V50) -> fun (V51) -> fun (V52) -> fun (V53) -> fun (V54) -> begin (V55 = (V52(V54))), ((V53(V55))(V54)) end end end end end end, fun (V56) -> fun (V57) -> fun (V58) -> begin (V59 = (V57(V58))), (V59(V58)) end end end end}, fun (V60) -> fun (V61) -> V61 end end}, V2, [])) end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, V24)) end end(E7, E8)); {'Idris.Text.PrettyPrint.Prettyprinter.Doc.SAnnPop', E10} -> (fun (V62) -> fun (V63) -> ('Idris.Idris2.Erlang.Control.Monad.ST':'dn--un-->>=_Monad__(ST $s)'('erased', 'erased', 'erased', fun (V64) -> ('nested--2450-6932--in--un--pop'(V0, 'erased', V2, V64)) end, fun (V65) -> fun (V66) -> ('Idris.Idris2.Erlang.Control.Monad.ST':'dn--un-->>=_Monad__(ST $s)'('erased', 'erased', 'erased', fun (V67) -> ('nested--2450-6931--in--un--peek'(V0, 'erased', V2, V67)) end, fun (V68) -> case V68 of {'Idris.Prelude.Types.Just', E11} -> (fun (V69) -> fun (V70) -> ('Idris.Idris2.Erlang.Control.Monad.ST':'dn--un-->>=_Monad__(ST $s)'('erased', 'erased', 'erased', fun (V71) -> ('nested--2450-6933--in--un--writeOutput'(V0, 'erased', V3, ('Idris.Idris2.Control.ANSI.SGR':'un--escapeSGR'([{'Idris.Control.ANSI.SGR.Reset'} | V69])), V71)) end, fun (V72) -> ('nested--2450-6934--in--un--go'(V0, 'erased', V2, V3, V62)) end, V70)) end end(E11)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> ('Idris.Idris2.Erlang.Data.IORef':'un--writeIORef'('erased', 'erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V73) -> fun (V74) -> fun (V75) -> fun (V76) -> fun (V77) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor__IO'('erased', 'erased', V75, V76, V77)) end end end end end, fun (V78) -> fun (V79) -> fun (V80) -> V79 end end end, fun (V81) -> fun (V82) -> fun (V83) -> fun (V84) -> fun (V85) -> begin (V86 = (V83(V85))), begin (V87 = (V84(V85))), (V86(V87)) end end end end end end end}, fun (V88) -> fun (V89) -> fun (V90) -> fun (V91) -> fun (V92) -> begin (V93 = (V90(V92))), ((V91(V93))(V92)) end end end end end end, fun (V94) -> fun (V95) -> fun (V96) -> begin (V97 = (V95(V96))), (V97(V96)) end end end end}, fun (V98) -> fun (V99) -> V99 end end}, V2, [])) end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, V66)) end end, V63)) end end(E10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--underline'() -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative__List'('erased', {'Idris.Control.ANSI.SGR.SetStyle', {'Idris.Control.ANSI.SGR.SingleUnderline'}})).
'un--strike'() -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative__List'('erased', {'Idris.Control.ANSI.SGR.SetStyle', {'Idris.Control.ANSI.SGR.Striked'}})).
'un--renderString'(V0) -> ('Idris.Idris2.Data.Maybe':'un--fromMaybe'('erased', fun () -> <<"<internal pretty printing error>"/utf8>> end, ('Idris.Idris2.Erlang.Control.Monad.ST':'un--runST'('erased', fun (V1) -> fun (V2) -> ('Idris.Idris2.Erlang.Control.Monad.ST':'dn--un-->>=_Monad__(ST $s)'('erased', 'erased', 'erased', fun (V3) -> ('Idris.Idris2.Erlang.Control.Monad.ST':'un--newSTRef'('erased', 'erased', [('Idris.Idris2.Prelude.Types':'dn--un--neutral_Monoid__(List $a)'('erased')) | []], V3)) end, fun (V4) -> fun (V5) -> ('Idris.Idris2.Erlang.Control.Monad.ST':'dn--un-->>=_Monad__(ST $s)'('erased', 'erased', 'erased', fun (V6) -> ('Idris.Idris2.Erlang.Control.Monad.ST':'un--newSTRef'('erased', 'erased', ('Idris.Idris2.Prelude.Types':'dn--un--neutral_Monoid__String'()), V6)) end, fun (V7) -> fun (V8) -> ('Idris.Idris2.Erlang.Control.Monad.ST':'dn--un-->>=_Monad__(ST $s)'('erased', 'erased', 'erased', ('nested--2450-6934--in--un--go'(V0, 'erased', V4, V7, V0)), fun (V9) -> fun (V10) -> ('Idris.Idris2.Erlang.Control.Monad.ST':'dn--un-->>=_Monad__(ST $s)'('erased', 'erased', 'erased', ('Idris.Idris2.Erlang.Data.IORef':'un--readIORef'('erased', 'erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V11) -> fun (V12) -> fun (V13) -> fun (V14) -> fun (V15) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor__IO'('erased', 'erased', V13, V14, V15)) end end end end end, fun (V16) -> fun (V17) -> fun (V18) -> V17 end end end, fun (V19) -> fun (V20) -> fun (V21) -> fun (V22) -> fun (V23) -> begin (V24 = (V21(V23))), begin (V25 = (V22(V23))), (V24(V25)) end end end end end end end}, fun (V26) -> fun (V27) -> fun (V28) -> fun (V29) -> fun (V30) -> begin (V31 = (V28(V30))), ((V29(V31))(V30)) end end end end end end, fun (V32) -> fun (V33) -> fun (V34) -> begin (V35 = (V33(V34))), (V35(V34)) end end end end}, fun (V36) -> fun (V37) -> V37 end end}, V4)), fun (V38) -> case V38 of [] -> fun (V39) -> ('Idris.Idris2.Erlang.Control.Monad.ST':'dn--un--pure_Applicative__(ST $s)'('erased', 'erased', {'Idris.Prelude.Types.Nothing'}, V39)) end; [E0 | E1] -> (fun (V40, V41) -> case V41 of [] -> ('Idris.Idris2.Prelude.Interfaces':'un--<$>'('erased', 'erased', 'erased', fun (V42) -> fun (V43) -> fun (V44) -> fun (V45) -> fun (V46) -> ('Idris.Idris2.Erlang.Control.Monad.ST':'dn--un--map_Functor__(ST $s)'('erased', 'erased', 'erased', V44, V45, V46)) end end end end end, fun (V47) -> {'Idris.Prelude.Types.Just', V47} end, ('Idris.Idris2.Erlang.Data.IORef':'un--readIORef'('erased', 'erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V48) -> fun (V49) -> fun (V50) -> fun (V51) -> fun (V52) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor__IO'('erased', 'erased', V50, V51, V52)) end end end end end, fun (V53) -> fun (V54) -> fun (V55) -> V54 end end end, fun (V56) -> fun (V57) -> fun (V58) -> fun (V59) -> fun (V60) -> begin (V61 = (V58(V60))), begin (V62 = (V59(V60))), (V61(V62)) end end end end end end end}, fun (V63) -> fun (V64) -> fun (V65) -> fun (V66) -> fun (V67) -> begin (V68 = (V65(V67))), ((V66(V68))(V67)) end end end end end end, fun (V69) -> fun (V70) -> fun (V71) -> begin (V72 = (V70(V71))), (V72(V71)) end end end end}, fun (V73) -> fun (V74) -> V74 end end}, V7)))); _ -> fun (V75) -> ('Idris.Idris2.Erlang.Control.Monad.ST':'dn--un--pure_Applicative__(ST $s)'('erased', 'erased', {'Idris.Prelude.Types.Nothing'}, V75)) end end end(E0, E1)); _ -> fun (V76) -> ('Idris.Idris2.Erlang.Control.Monad.ST':'dn--un--pure_Applicative__(ST $s)'('erased', 'erased', {'Idris.Prelude.Types.Nothing'}, V76)) end end end, V10)) end end, V8)) end end, V5)) end end, V2)) end end)))).
'un--renderIO'(V0) -> ('Idris.Idris2.Prelude.IO':'un--putStrLn'('erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V1) -> fun (V2) -> fun (V3) -> fun (V4) -> fun (V5) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor__IO'('erased', 'erased', V3, V4, V5)) end end end end end, fun (V6) -> fun (V7) -> fun (V8) -> V7 end end end, fun (V9) -> fun (V10) -> fun (V11) -> fun (V12) -> fun (V13) -> begin (V14 = (V11(V13))), begin (V15 = (V12(V13))), (V14(V15)) end end end end end end end}, fun (V16) -> fun (V17) -> fun (V18) -> fun (V19) -> fun (V20) -> begin (V21 = (V18(V20))), ((V19(V21))(V20)) end end end end end end, fun (V22) -> fun (V23) -> fun (V24) -> begin (V25 = (V23(V24))), (V25(V24)) end end end end}, fun (V26) -> fun (V27) -> V27 end end}, ('un--renderString'(V0)))).
'un--putDoc'(V0) -> ('un--renderIO'((('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'un--layoutPretty'('erased', ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'un--defaultLayoutOptions'())))(V0)))).
'un--italic'() -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative__List'('erased', {'Idris.Control.ANSI.SGR.SetStyle', {'Idris.Control.ANSI.SGR.Italic'}})).
'un--color'(V0) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative__List'('erased', {'Idris.Control.ANSI.SGR.SetForeground', V0})).
'un--bold'() -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative__List'('erased', {'Idris.Control.ANSI.SGR.SetStyle', {'Idris.Control.ANSI.SGR.Bold'}})).
'un--bgColor'(V0) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative__List'('erased', {'Idris.Control.ANSI.SGR.SetBackground', V0})).
'un--AnsiStyle'() -> {'Idris.Prelude.Types.List', {'Idris.Control.ANSI.SGR.SGR'}}.
