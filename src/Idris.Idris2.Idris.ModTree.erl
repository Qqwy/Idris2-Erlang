-module('Idris.Idris2.Idris.ModTree').
-compile('no_auto_import').
-compile('inline').
-compile({'inline_size',24}).
-export([
  'case--filterUsedByMods-1867'/4,
  'case--buildDeps-1623'/8,
  'case--buildMods-1550'/9,
  'case--case block in buildMod-1424'/19,
  'case--case block in case block in buildMod-1185'/25,
  'case--case block in buildMod-1089'/23,
  'case--buildMod-978'/15,
  'case--fnameModified-893'/2,
  'case--getBuildMods-791'/9,
  'case--mkBuildMods-668'/6,
  'case--case block in mkModTree-549'/7,
  'case--case block in mkModTree-498'/6,
  'case--mkModTree-456'/6,
  'nested--17111-1804--in--un--getMods'/7,
  'nested--17111-1805--in--un--dropLater'/5,
  'dn--un--show_Show__BuildMod'/1,
  'dn--un--showPrec_Show__BuildMod'/2,
  'dn--un--__Impl_Show_BuildMod'/0,
  'un--mkModTree'/5,
  'un--mkBuildMods'/3,
  'un--loadModules'/7,
  'un--getBuildMods'/6,
  'un--getAllBuildMods'/5,
  'un--fnameModified'/2,
  'un--filterUsedByMods'/2,
  'un--buildMods'/7,
  'un--buildMod'/8,
  'un--buildDeps'/7,
  'un--buildAll'/4
]).
'case--filterUsedByMods-1867'(V0, V1, V2, V3) -> case V3 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V4, V5) -> ('Idris.Idris2.Prelude.Types.List':'un--++'('erased', V4, ('un--filterUsedByMods'(('Idris.Idris2.Prelude.Types.List':'un--++'('erased', V1, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', fun (V6) -> case V6 of {'Idris.Idris.ModTree.MkBuildMod', E2, E3, E4} -> (fun (V7, V8, V9) -> V8 end(E2, E3, E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, V4)))), V5)))) end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--buildDeps-1623'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V7 of [] -> fun (V8) -> begin (V9 = ('Idris.Idris2.Core.Context':'un--clearCtxt'(V5, V8))), case V9 of {'Idris.Prelude.Types.Left', E0} -> (fun (V10) -> {'Idris.Prelude.Types.Left', V10} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V11) -> begin (V12 = (('Idris.Idris2.Core.InitPrimitives':'un--addPrimitives'(V5))(V8))), case V12 of {'Idris.Prelude.Types.Left', E2} -> (fun (V13) -> {'Idris.Prelude.Types.Left', V13} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V14) -> begin (V43 = begin (V42 = (('Idris.Idris2.Erlang.Data.IORef':'un--writeIORef'('erased', 'erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V15) -> fun (V16) -> fun (V17) -> fun (V18) -> fun (V19) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor__IO'('erased', 'erased', V17, V18, V19)) end end end end end, fun (V20) -> fun (V21) -> fun (V22) -> V21 end end end, fun (V23) -> fun (V24) -> fun (V25) -> fun (V26) -> fun (V27) -> begin (V28 = (V25(V27))), begin (V29 = (V26(V27))), (V28(V29)) end end end end end end end}, fun (V30) -> fun (V31) -> fun (V32) -> fun (V33) -> fun (V34) -> begin (V35 = (V32(V34))), ((V33(V35))(V34)) end end end end end end, fun (V36) -> fun (V37) -> fun (V38) -> begin (V39 = (V37(V38))), (V39(V38)) end end end end}, fun (V40) -> fun (V41) -> V41 end end}, V3, ('Idris.Idris2.Core.Metadata':'un--initMetadata'())))(V8))), {'Idris.Prelude.Types.Right', V42} end), case V43 of {'Idris.Prelude.Types.Left', E4} -> (fun (V44) -> {'Idris.Prelude.Types.Left', V44} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V45) -> begin (V46 = ('Idris.Idris2.Core.Directory':'un--getTTCFileName'(V5, V0, <<"ttc"/utf8>>, V8))), case V46 of {'Idris.Prelude.Types.Left', E6} -> (fun (V47) -> {'Idris.Prelude.Types.Left', V47} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V48) -> begin (V49 = (('Idris.Idris2.Core.Context.Log':'un--log'(V5, <<"import"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"Reloading "/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show__String'(V48)), ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<" from "/utf8>>, V0)))))) end))(V8))), case V49 of {'Idris.Prelude.Types.Left', E8} -> (fun (V50) -> {'Idris.Prelude.Types.Left', V50} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V51) -> begin (V52 = ('Idris.Idris2.Idris.ProcessIdr':'un--readAsMain'(V5, V2, V4, V48, V8))), case V52 of {'Idris.Prelude.Types.Left', E10} -> (fun (V53) -> {'Idris.Prelude.Types.Left', V53} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V54) -> begin (V55 = ('Idris.Idris2.Core.Directory':'un--getTTCFileName'(V5, V0, <<"ttm"/utf8>>, V8))), case V55 of {'Idris.Prelude.Types.Left', E12} -> (fun (V56) -> {'Idris.Prelude.Types.Left', V56} end(E12)); {'Idris.Prelude.Types.Right', E13} -> (fun (V57) -> begin (V58 = (('Idris.Idris2.Core.Context.Log':'un--log'(V5, <<"import"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"Reloading "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show__String'(V57)))) end))(V8))), case V58 of {'Idris.Prelude.Types.Left', E14} -> (fun (V59) -> {'Idris.Prelude.Types.Left', V59} end(E14)); {'Idris.Prelude.Types.Right', E15} -> (fun (V60) -> begin (V61 = ('Idris.Idris2.Core.Metadata':'un--readFromTTM'(V3, V57, V8))), case V61 of {'Idris.Prelude.Types.Left', E16} -> (fun (V62) -> {'Idris.Prelude.Types.Left', V62} end(E16)); {'Idris.Prelude.Types.Right', E17} -> (fun (V63) -> {'Idris.Prelude.Types.Right', []} end(E17)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end; _ -> fun (V64) -> {'Idris.Prelude.Types.Right', V7} end end.
'case--buildMods-1550'(V0, V1, V2, V3, V4, V5, V6, V7, V8) -> case V8 of [] -> ('un--buildMods'(V7, V6, V5, V4, ('Idris.Idris2.Prelude.Types':'dn--un--+_Num__Nat'(('Idris.Idris2.Prelude.Types':'dn--un--fromInteger_Num__Nat'(1)), V3)), V2, V1)); _ -> fun (V9) -> {'Idris.Prelude.Types.Right', V8} end end.
'case--case block in buildMod-1424'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18) -> case V16 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> 0 end()); {'Idris.Prelude.Types.Just', E0} -> (fun (V19) -> (('Idris.Idris2.Prelude.Interfaces':'un--any'('erased', 'erased', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V21) -> fun (V22) -> fun (V23) -> fun (V24) -> fun (V25) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable__List'('erased', 'erased', V23, V24, V25)) end end end end end, fun (V26) -> fun (V27) -> fun (V28) -> fun (V29) -> fun (V30) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable__List'('erased', 'erased', V28, V29, V30)) end end end end end}, fun (V31) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord__Integer'(V31, V19)) end))([V17 | ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', fun (V20) -> ('Idris.Idris2.Builtin':'un--snd'('erased', 'erased', V20)) end, V18))])) end(E0)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in case block in buildMod-1185'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24) -> case V24 of [] -> fun (V25) -> begin (V26 = ('Idris.Idris2.Idris.REPLCommon':'un--emitWarnings'(V6, V4, V5, V25))), case V26 of {'Idris.Prelude.Types.Left', E4} -> (fun (V27) -> {'Idris.Prelude.Types.Left', V27} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V28) -> begin (V31 = (('Idris.Idris2.Core.Core':'un--traverse_'('erased', 'erased', fun (V29) -> fun (V30) -> ('Idris.Idris2.Idris.REPLCommon':'un--emitError'(V6, V4, V5, V29, V30)) end end, V14))(V25))), case V31 of {'Idris.Prelude.Types.Left', E6} -> (fun (V32) -> {'Idris.Prelude.Types.Left', V32} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V33) -> {'Idris.Prelude.Types.Right', V14} end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end; _ -> fun (V34) -> begin (V35 = ('Idris.Idris2.Idris.REPLCommon':'un--emitWarnings'(V6, V4, V5, V34))), case V35 of {'Idris.Prelude.Types.Left', E0} -> (fun (V36) -> {'Idris.Prelude.Types.Left', V36} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V37) -> begin (V40 = (('Idris.Idris2.Core.Core':'un--traverse'('erased', 'erased', fun (V38) -> fun (V39) -> ('Idris.Idris2.Idris.REPLCommon':'un--emitError'(V6, V4, V5, V38, V39)) end end, V24))(V34))), case V40 of {'Idris.Prelude.Types.Left', E2} -> (fun (V41) -> {'Idris.Prelude.Types.Left', V41} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V42) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Prelude.Types.List':'un--++'('erased', V14, V24))} end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end.
'case--case block in buildMod-1089'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22) -> case V19 of 0 -> begin (V26 = ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'('erased', ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--<+>_Semigroup__(Doc $ann)'('erased', ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--<+>_Semigroup__(Doc $ann)'('erased', ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--<+>_Semigroup__(Doc $ann)'('erased', ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty__Nat'('erased', V2)), ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Symbols':'un--slash'('erased')))), ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty__Nat'('erased', V1)))), ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Symbols':'un--colon'('erased')))), ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'('erased', ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty__String'('erased', <<"Building"/utf8>>)), ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'('erased', ('Idris.Idris2.Core.Name.Namespace':'dn--un--pretty_Pretty__ModuleIdent'('erased', case V0 of {'Idris.Idris.ModTree.MkBuildMod', E0, E1, E2} -> (fun (V23, V24, V25) -> V24 end(E0, E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)), ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Symbols':'un--parens'('erased', ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty__String'('erased', V11))))))))))), fun (V27) -> begin (V28 = ('Idris.Idris2.Idris.ProcessIdr':'un--process'(V6, V21, V20, V5, V4, V26, V11, V27))), case V28 of {'Idris.Prelude.Types.Left', E3} -> (fun (V29) -> {'Idris.Prelude.Types.Left', V29} end(E3)); {'Idris.Prelude.Types.Right', E4} -> (fun (V30) -> case V30 of [] -> begin (V31 = ('Idris.Idris2.Idris.REPLCommon':'un--emitWarnings'(V6, V4, V5, V27))), case V31 of {'Idris.Prelude.Types.Left', E9} -> (fun (V32) -> {'Idris.Prelude.Types.Left', V32} end(E9)); {'Idris.Prelude.Types.Right', E10} -> (fun (V33) -> begin (V36 = (('Idris.Idris2.Core.Core':'un--traverse_'('erased', 'erased', fun (V34) -> fun (V35) -> ('Idris.Idris2.Idris.REPLCommon':'un--emitError'(V6, V4, V5, V34, V35)) end end, V14))(V27))), case V36 of {'Idris.Prelude.Types.Left', E11} -> (fun (V37) -> {'Idris.Prelude.Types.Left', V37} end(E11)); {'Idris.Prelude.Types.Right', E12} -> (fun (V38) -> {'Idris.Prelude.Types.Right', V14} end(E12)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; _ -> begin (V39 = ('Idris.Idris2.Idris.REPLCommon':'un--emitWarnings'(V6, V4, V5, V27))), case V39 of {'Idris.Prelude.Types.Left', E5} -> (fun (V40) -> {'Idris.Prelude.Types.Left', V40} end(E5)); {'Idris.Prelude.Types.Right', E6} -> (fun (V41) -> begin (V44 = (('Idris.Idris2.Core.Core':'un--traverse'('erased', 'erased', fun (V42) -> fun (V43) -> ('Idris.Idris2.Idris.REPLCommon':'un--emitError'(V6, V4, V5, V42, V43)) end end, V30))(V27))), case V44 of {'Idris.Prelude.Types.Left', E7} -> (fun (V45) -> {'Idris.Prelude.Types.Left', V45} end(E7)); {'Idris.Prelude.Types.Right', E8} -> (fun (V46) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Prelude.Types.List':'un--++'('erased', V14, V30))} end(E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end; 1 -> fun (V47) -> begin (V48 = ('Idris.Idris2.Idris.REPLCommon':'un--emitWarnings'(V6, V4, V5, V47))), case V48 of {'Idris.Prelude.Types.Left', E13} -> (fun (V49) -> {'Idris.Prelude.Types.Left', V49} end(E13)); {'Idris.Prelude.Types.Right', E14} -> (fun (V50) -> begin (V53 = (('Idris.Idris2.Core.Core':'un--traverse_'('erased', 'erased', fun (V51) -> fun (V52) -> ('Idris.Idris2.Idris.REPLCommon':'un--emitError'(V6, V4, V5, V51, V52)) end end, V14))(V47))), case V53 of {'Idris.Prelude.Types.Left', E15} -> (fun (V54) -> {'Idris.Prelude.Types.Left', V54} end(E15)); {'Idris.Prelude.Types.Right', E16} -> (fun (V55) -> {'Idris.Prelude.Types.Right', V14} end(E16)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E14)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--buildMod-978'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14) -> case V14 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V15, V16) -> fun (V17) -> begin (V24 = ('Idris.Idris2.Core.Core':'dn--un--catch_Catchable__Core_Error'('erased', fun (V18) -> begin (V19 = ('un--fnameModified'(V12, V18))), case V19 of {'Idris.Prelude.Types.Left', E2} -> (fun (V20) -> {'Idris.Prelude.Types.Left', V20} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V21) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Just', V21}} end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end, fun (V22) -> fun (V23) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}} end end, V17))), case V24 of {'Idris.Prelude.Types.Left', E4} -> (fun (V25) -> {'Idris.Prelude.Types.Left', V25} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V26) -> begin (V27 = ('un--fnameModified'(V11, V17))), case V27 of {'Idris.Prelude.Types.Left', E6} -> (fun (V28) -> {'Idris.Prelude.Types.Left', V28} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V29) -> begin (V36 = (('Idris.Idris2.Core.Core':'un--traverse'('erased', 'erased', fun (V30) -> fun (V31) -> begin (V32 = ('un--fnameModified'(V30, V31))), case V32 of {'Idris.Prelude.Types.Left', E8} -> (fun (V33) -> {'Idris.Prelude.Types.Left', V33} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V34) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V30, V34}} end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end, ('Idris.Idris2.Data.List':'un--mapMaybe'('erased', 'erased', fun (V35) -> ('Idris.Idris2.Core.Directory':'un--toLocalFile'(V35)) end, V16))))(V17))), case V36 of {'Idris.Prelude.Types.Left', E10} -> (fun (V37) -> {'Idris.Prelude.Types.Left', V37} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V38) -> begin (V52 = case V26 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> 0 end()); {'Idris.Prelude.Types.Just', E12} -> (fun (V39) -> (('Idris.Idris2.Prelude.Interfaces':'un--any'('erased', 'erased', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V41) -> fun (V42) -> fun (V43) -> fun (V44) -> fun (V45) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable__List'('erased', 'erased', V43, V44, V45)) end end end end end, fun (V46) -> fun (V47) -> fun (V48) -> fun (V49) -> fun (V50) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable__List'('erased', 'erased', V48, V49, V50)) end end end end end}, fun (V51) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord__Integer'(V51, V39)) end))([V29 | ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', fun (V40) -> ('Idris.Idris2.Builtin':'un--snd'('erased', 'erased', V40)) end, V38))])) end(E12)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), begin (V53 = ('Idris.Idris2.Core.Core':'un--newRef'('erased', 'erased', {'Idris.Core.UnifyState.UST'}, ('Idris.Idris2.Core.UnifyState':'un--initUState'()), V17))), case V53 of {'Idris.Prelude.Types.Left', E13} -> (fun (V54) -> {'Idris.Prelude.Types.Left', V54} end(E13)); {'Idris.Prelude.Types.Right', E14} -> (fun (V55) -> begin (V56 = ('Idris.Idris2.Core.Core':'un--newRef'('erased', 'erased', {'Idris.Core.Metadata.MD'}, ('Idris.Idris2.Core.Metadata':'un--initMetadata'()), V17))), case V56 of {'Idris.Prelude.Types.Left', E15} -> (fun (V57) -> {'Idris.Prelude.Types.Left', V57} end(E15)); {'Idris.Prelude.Types.Right', E16} -> (fun (V58) -> begin (V87 = begin (V86 = (('Idris.Idris2.Erlang.Data.IORef':'un--writeIORef'('erased', 'erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V59) -> fun (V60) -> fun (V61) -> fun (V62) -> fun (V63) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor__IO'('erased', 'erased', V61, V62, V63)) end end end end end, fun (V64) -> fun (V65) -> fun (V66) -> V65 end end end, fun (V67) -> fun (V68) -> fun (V69) -> fun (V70) -> fun (V71) -> begin (V72 = (V69(V71))), begin (V73 = (V70(V71))), (V72(V73)) end end end end end end end}, fun (V74) -> fun (V75) -> fun (V76) -> fun (V77) -> fun (V78) -> begin (V79 = (V76(V78))), ((V77(V79))(V78)) end end end end end end, fun (V80) -> fun (V81) -> fun (V82) -> begin (V83 = (V81(V82))), (V83(V82)) end end end end}, fun (V84) -> fun (V85) -> V85 end end}, V5, ('Idris.Idris2.Idris.Syntax':'un--initSyntax'())))(V17))), {'Idris.Prelude.Types.Right', V86} end), case V87 of {'Idris.Prelude.Types.Left', E17} -> (fun (V88) -> {'Idris.Prelude.Types.Left', V88} end(E17)); {'Idris.Prelude.Types.Right', E18} -> (fun (V89) -> case V52 of 0 -> begin (V93 = ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'('erased', ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--<+>_Semigroup__(Doc $ann)'('erased', ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--<+>_Semigroup__(Doc $ann)'('erased', ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--<+>_Semigroup__(Doc $ann)'('erased', ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty__Nat'('erased', V2)), ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Symbols':'un--slash'('erased')))), ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty__Nat'('erased', V1)))), ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Symbols':'un--colon'('erased')))), ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'('erased', ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty__String'('erased', <<"Building"/utf8>>)), ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'('erased', ('Idris.Idris2.Core.Name.Namespace':'dn--un--pretty_Pretty__ModuleIdent'('erased', case V0 of {'Idris.Idris.ModTree.MkBuildMod', E19, E20, E21} -> (fun (V90, V91, V92) -> V91 end(E19, E20, E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)), ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Symbols':'un--parens'('erased', ('Idris.Idris2.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty__String'('erased', V11))))))))))), begin (V94 = ('Idris.Idris2.Idris.ProcessIdr':'un--process'(V6, V58, V55, V5, V4, V93, V11, V17))), case V94 of {'Idris.Prelude.Types.Left', E22} -> (fun (V95) -> {'Idris.Prelude.Types.Left', V95} end(E22)); {'Idris.Prelude.Types.Right', E23} -> (fun (V96) -> case V96 of [] -> begin (V97 = ('Idris.Idris2.Idris.REPLCommon':'un--emitWarnings'(V6, V4, V5, V17))), case V97 of {'Idris.Prelude.Types.Left', E28} -> (fun (V98) -> {'Idris.Prelude.Types.Left', V98} end(E28)); {'Idris.Prelude.Types.Right', E29} -> (fun (V99) -> begin (V102 = (('Idris.Idris2.Core.Core':'un--traverse_'('erased', 'erased', fun (V100) -> fun (V101) -> ('Idris.Idris2.Idris.REPLCommon':'un--emitError'(V6, V4, V5, V100, V101)) end end, V15))(V17))), case V102 of {'Idris.Prelude.Types.Left', E30} -> (fun (V103) -> {'Idris.Prelude.Types.Left', V103} end(E30)); {'Idris.Prelude.Types.Right', E31} -> (fun (V104) -> {'Idris.Prelude.Types.Right', V15} end(E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; _ -> begin (V105 = ('Idris.Idris2.Idris.REPLCommon':'un--emitWarnings'(V6, V4, V5, V17))), case V105 of {'Idris.Prelude.Types.Left', E24} -> (fun (V106) -> {'Idris.Prelude.Types.Left', V106} end(E24)); {'Idris.Prelude.Types.Right', E25} -> (fun (V107) -> begin (V110 = (('Idris.Idris2.Core.Core':'un--traverse'('erased', 'erased', fun (V108) -> fun (V109) -> ('Idris.Idris2.Idris.REPLCommon':'un--emitError'(V6, V4, V5, V108, V109)) end end, V96))(V17))), case V110 of {'Idris.Prelude.Types.Left', E26} -> (fun (V111) -> {'Idris.Prelude.Types.Left', V111} end(E26)); {'Idris.Prelude.Types.Right', E27} -> (fun (V112) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Prelude.Types.List':'un--++'('erased', V15, V96))} end(E27)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E25)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E23)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end; 1 -> begin (V113 = ('Idris.Idris2.Idris.REPLCommon':'un--emitWarnings'(V6, V4, V5, V17))), case V113 of {'Idris.Prelude.Types.Left', E32} -> (fun (V114) -> {'Idris.Prelude.Types.Left', V114} end(E32)); {'Idris.Prelude.Types.Right', E33} -> (fun (V115) -> begin (V118 = (('Idris.Idris2.Core.Core':'un--traverse_'('erased', 'erased', fun (V116) -> fun (V117) -> ('Idris.Idris2.Idris.REPLCommon':'un--emitError'(V6, V4, V5, V116, V117)) end end, V15))(V17))), case V118 of {'Idris.Prelude.Types.Left', E34} -> (fun (V119) -> {'Idris.Prelude.Types.Left', V119} end(E34)); {'Idris.Prelude.Types.Right', E35} -> (fun (V120) -> {'Idris.Prelude.Types.Right', V15} end(E35)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E33)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E18)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E16)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E14)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--fnameModified-893'(V0, V1) -> case V1 of {'Idris.Prelude.Types.Right', E0} -> (fun (V2) -> fun (V3) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Prelude.Types':'dn--un--cast_Cast__Int_Integer'(V2))} end end(E0)); {'Idris.Prelude.Types.Left', E1} -> (fun (V4) -> fun (V5) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable__Core_Error'('erased', {'Idris.Core.Core.FileErr', V0, V4}, V5)) end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--getBuildMods-791'(V0, V1, V2, V3, V4, V5, V6, V7, V8) -> case V8 of 0 -> fun (V9) -> {'Idris.Prelude.Types.Right', []} end; 1 -> fun (V10) -> begin (V11 = (('un--mkModTree'(V4, V5, V2, [], V7))(V10))), case V11 of {'Idris.Prelude.Types.Left', E0} -> (fun (V12) -> {'Idris.Prelude.Types.Left', V12} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V13) -> begin (V14 = ('Idris.Idris2.Core.Core':'un--newRef'('erased', 'erased', {'Idris.Idris.ModTree.DoneMod'}, ('Idris.Idris2.Data.StringMap':'un--empty'('erased')), V10))), case V14 of {'Idris.Prelude.Types.Left', E2} -> (fun (V15) -> {'Idris.Prelude.Types.Left', V15} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V16) -> begin (V17 = ('Idris.Idris2.Core.Core':'un--newRef'('erased', 'erased', {'Idris.Idris.ModTree.BuildOrder'}, [], V10))), case V17 of {'Idris.Prelude.Types.Left', E4} -> (fun (V18) -> {'Idris.Prelude.Types.Left', V18} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V19) -> begin (V20 = (('un--mkBuildMods'(V16, V19, V13))(V10))), case V20 of {'Idris.Prelude.Types.Left', E6} -> (fun (V21) -> {'Idris.Prelude.Types.Left', V21} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V22) -> begin (V51 = begin (V50 = (('Idris.Idris2.Erlang.Data.IORef':'un--readIORef'('erased', 'erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V23) -> fun (V24) -> fun (V25) -> fun (V26) -> fun (V27) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor__IO'('erased', 'erased', V25, V26, V27)) end end end end end, fun (V28) -> fun (V29) -> fun (V30) -> V29 end end end, fun (V31) -> fun (V32) -> fun (V33) -> fun (V34) -> fun (V35) -> begin (V36 = (V33(V35))), begin (V37 = (V34(V35))), (V36(V37)) end end end end end end end}, fun (V38) -> fun (V39) -> fun (V40) -> fun (V41) -> fun (V42) -> begin (V43 = (V40(V42))), ((V41(V43))(V42)) end end end end end end, fun (V44) -> fun (V45) -> fun (V46) -> begin (V47 = (V45(V46))), (V47(V46)) end end end end}, fun (V48) -> fun (V49) -> V49 end end}, V19))(V10))), {'Idris.Prelude.Types.Right', V50} end), case V51 of {'Idris.Prelude.Types.Left', E8} -> (fun (V52) -> {'Idris.Prelude.Types.Left', V52} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V53) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Data.List':'un--reverse'('erased', V53))} end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--mkBuildMods-668'(V0, V1, V2, V3, V4, V5) -> case V5 of {'Idris.Prelude.Types.Just', E0} -> (fun (V6) -> fun (V7) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end end(E0)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V8) -> begin (V13 = (('Idris.Idris2.Core.Core':'un--traverse_'('erased', 'erased', fun (V9) -> ('un--mkBuildMods'(V2, V1, V9)) end, case V0 of {'Idris.Idris.ModTree.MkModTree', E1, E2, E3} -> (fun (V10, V11, V12) -> V12 end(E1, E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V8))), case V13 of {'Idris.Prelude.Types.Left', E4} -> (fun (V14) -> {'Idris.Prelude.Types.Left', V14} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V15) -> begin (V44 = begin (V43 = (('Idris.Idris2.Erlang.Data.IORef':'un--readIORef'('erased', 'erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V16) -> fun (V17) -> fun (V18) -> fun (V19) -> fun (V20) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor__IO'('erased', 'erased', V18, V19, V20)) end end end end end, fun (V21) -> fun (V22) -> fun (V23) -> V22 end end end, fun (V24) -> fun (V25) -> fun (V26) -> fun (V27) -> fun (V28) -> begin (V29 = (V26(V28))), begin (V30 = (V27(V28))), (V29(V30)) end end end end end end end}, fun (V31) -> fun (V32) -> fun (V33) -> fun (V34) -> fun (V35) -> begin (V36 = (V33(V35))), ((V34(V36))(V35)) end end end end end end, fun (V37) -> fun (V38) -> fun (V39) -> begin (V40 = (V38(V39))), (V40(V39)) end end end end}, fun (V41) -> fun (V42) -> V42 end end}, V1))(V8))), {'Idris.Prelude.Types.Right', V43} end), case V44 of {'Idris.Prelude.Types.Left', E6} -> (fun (V45) -> {'Idris.Prelude.Types.Left', V45} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V46) -> begin (V85 = begin (V84 = (('Idris.Idris2.Erlang.Data.IORef':'un--writeIORef'('erased', 'erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V47) -> fun (V48) -> fun (V49) -> fun (V50) -> fun (V51) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor__IO'('erased', 'erased', V49, V50, V51)) end end end end end, fun (V52) -> fun (V53) -> fun (V54) -> V53 end end end, fun (V55) -> fun (V56) -> fun (V57) -> fun (V58) -> fun (V59) -> begin (V60 = (V57(V59))), begin (V61 = (V58(V59))), (V60(V61)) end end end end end end end}, fun (V62) -> fun (V63) -> fun (V64) -> fun (V65) -> fun (V66) -> begin (V67 = (V64(V66))), ((V65(V67))(V66)) end end end end end end, fun (V68) -> fun (V69) -> fun (V70) -> begin (V71 = (V69(V70))), (V71(V70)) end end end end}, fun (V72) -> fun (V73) -> V73 end end}, V1, [{'Idris.Idris.ModTree.MkBuildMod', V3, case V0 of {'Idris.Idris.ModTree.MkModTree', E8, E9, E10} -> (fun (V74, V75, V76) -> V74 end(E8, E9, E10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', fun (V77) -> case V77 of {'Idris.Idris.ModTree.MkModTree', E11, E12, E13} -> (fun (V78, V79, V80) -> V78 end(E11, E12, E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, case V0 of {'Idris.Idris.ModTree.MkModTree', E14, E15, E16} -> (fun (V81, V82, V83) -> V83 end(E14, E15, E16)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))} | V46]))(V8))), {'Idris.Prelude.Types.Right', V84} end), case V85 of {'Idris.Prelude.Types.Left', E17} -> (fun (V86) -> {'Idris.Prelude.Types.Left', V86} end(E17)); {'Idris.Prelude.Types.Right', E18} -> (fun (V87) -> begin (V116 = begin (V115 = (('Idris.Idris2.Erlang.Data.IORef':'un--readIORef'('erased', 'erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V88) -> fun (V89) -> fun (V90) -> fun (V91) -> fun (V92) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor__IO'('erased', 'erased', V90, V91, V92)) end end end end end, fun (V93) -> fun (V94) -> fun (V95) -> V94 end end end, fun (V96) -> fun (V97) -> fun (V98) -> fun (V99) -> fun (V100) -> begin (V101 = (V98(V100))), begin (V102 = (V99(V100))), (V101(V102)) end end end end end end end}, fun (V103) -> fun (V104) -> fun (V105) -> fun (V106) -> fun (V107) -> begin (V108 = (V105(V107))), ((V106(V108))(V107)) end end end end end end, fun (V109) -> fun (V110) -> fun (V111) -> begin (V112 = (V110(V111))), (V112(V111)) end end end end}, fun (V113) -> fun (V114) -> V114 end end}, V2))(V8))), {'Idris.Prelude.Types.Right', V115} end), case V116 of {'Idris.Prelude.Types.Left', E19} -> (fun (V117) -> {'Idris.Prelude.Types.Left', V117} end(E19)); {'Idris.Prelude.Types.Right', E20} -> (fun (V118) -> begin (V146 = (('Idris.Idris2.Erlang.Data.IORef':'un--writeIORef'('erased', 'erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V119) -> fun (V120) -> fun (V121) -> fun (V122) -> fun (V123) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor__IO'('erased', 'erased', V121, V122, V123)) end end end end end, fun (V124) -> fun (V125) -> fun (V126) -> V125 end end end, fun (V127) -> fun (V128) -> fun (V129) -> fun (V130) -> fun (V131) -> begin (V132 = (V129(V131))), begin (V133 = (V130(V131))), (V132(V133)) end end end end end end end}, fun (V134) -> fun (V135) -> fun (V136) -> fun (V137) -> fun (V138) -> begin (V139 = (V136(V138))), ((V137(V139))(V138)) end end end end end end, fun (V140) -> fun (V141) -> fun (V142) -> begin (V143 = (V141(V142))), (V143(V142)) end end end end}, fun (V144) -> fun (V145) -> V145 end end}, V2, ('Idris.Idris2.Data.StringMap':'un--insert'('erased', V3, {'Idris.Builtin.MkUnit'}, V118))))(V8))), {'Idris.Prelude.Types.Right', V146} end end(E20)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E18)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in mkModTree-549'(V0, V1, V2, V3, V4, V5, V6) -> case V6 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V7) -> begin (V8 = ('Idris.Idris2.Core.Directory':'un--nsToSource'(V4, V2, V0, V7))), case V8 of {'Idris.Prelude.Types.Left', E0} -> (fun (V9) -> {'Idris.Prelude.Types.Left', V9} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V10) -> begin (V11 = ('Idris.Idris2.Idris.ProcessIdr':'un--readHeader'(V4, V10, V7))), case V11 of {'Idris.Prelude.Types.Left', E2} -> (fun (V12) -> {'Idris.Prelude.Types.Left', V12} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V13) -> begin (V24 = ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', fun (V14) -> case V14 of {'Idris.Idris.Syntax.MkImport', E4, E5, E6, E7} -> (fun (V15, V16, V17, V18) -> V17 end(E4, E5, E6, E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, case V13 of {'Idris.Idris.Syntax.MkModule', E8, E9, E10, E11, E12} -> (fun (V19, V20, V21, V22, V23) -> V21 end(E8, E9, E10, E11, E12)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), begin (V26 = (('Idris.Idris2.Core.Core':'un--traverse'('erased', 'erased', fun (V25) -> ('un--mkModTree'(V4, V3, V2, [V0 | V1], V25)) end, V24))(V7))), case V26 of {'Idris.Prelude.Types.Left', E13} -> (fun (V27) -> {'Idris.Prelude.Types.Left', V27} end(E13)); {'Idris.Prelude.Types.Right', E14} -> (fun (V28) -> begin (V29 = {'Idris.Idris.ModTree.MkModTree', V0, {'Idris.Prelude.Types.Just', V10}, V28}), begin (V58 = begin (V57 = (('Idris.Idris2.Erlang.Data.IORef':'un--readIORef'('erased', 'erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V30) -> fun (V31) -> fun (V32) -> fun (V33) -> fun (V34) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor__IO'('erased', 'erased', V32, V33, V34)) end end end end end, fun (V35) -> fun (V36) -> fun (V37) -> V36 end end end, fun (V38) -> fun (V39) -> fun (V40) -> fun (V41) -> fun (V42) -> begin (V43 = (V40(V42))), begin (V44 = (V41(V42))), (V43(V44)) end end end end end end end}, fun (V45) -> fun (V46) -> fun (V47) -> fun (V48) -> fun (V49) -> begin (V50 = (V47(V49))), ((V48(V50))(V49)) end end end end end end, fun (V51) -> fun (V52) -> fun (V53) -> begin (V54 = (V52(V53))), (V54(V53)) end end end end}, fun (V55) -> fun (V56) -> V56 end end}, V3))(V7))), {'Idris.Prelude.Types.Right', V57} end), case V58 of {'Idris.Prelude.Types.Left', E15} -> (fun (V59) -> {'Idris.Prelude.Types.Left', V59} end(E15)); {'Idris.Prelude.Types.Right', E16} -> (fun (V60) -> begin (V89 = begin (V88 = (('Idris.Idris2.Erlang.Data.IORef':'un--writeIORef'('erased', 'erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V61) -> fun (V62) -> fun (V63) -> fun (V64) -> fun (V65) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor__IO'('erased', 'erased', V63, V64, V65)) end end end end end, fun (V66) -> fun (V67) -> fun (V68) -> V67 end end end, fun (V69) -> fun (V70) -> fun (V71) -> fun (V72) -> fun (V73) -> begin (V74 = (V71(V73))), begin (V75 = (V72(V73))), (V74(V75)) end end end end end end end}, fun (V76) -> fun (V77) -> fun (V78) -> fun (V79) -> fun (V80) -> begin (V81 = (V78(V80))), ((V79(V81))(V80)) end end end end end end, fun (V82) -> fun (V83) -> fun (V84) -> begin (V85 = (V83(V84))), (V85(V84)) end end end end}, fun (V86) -> fun (V87) -> V87 end end}, V3, [{'Idris.Builtin.MkPair', V0, V29} | V60]))(V7))), {'Idris.Prelude.Types.Right', V88} end), case V89 of {'Idris.Prelude.Types.Left', E17} -> (fun (V90) -> {'Idris.Prelude.Types.Left', V90} end(E17)); {'Idris.Prelude.Types.Right', E18} -> (fun (V91) -> {'Idris.Prelude.Types.Right', V29} end(E18)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E16)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E14)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end()); {'Idris.Prelude.Types.Just', E19} -> (fun (V92) -> fun (V93) -> {'Idris.Prelude.Types.Right', V92} end end(E19)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in mkModTree-498'(V0, V1, V2, V3, V4, V5) -> case V5 of {'Idris.Core.Core.CyclicImports', E0} -> (fun (V6) -> fun (V7) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable__Core_Error'('erased', V5, V7)) end end(E0)); _ -> fun (V8) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.ModTree.MkModTree', V0, {'Idris.Prelude.Types.Nothing'}, []}} end end.
'case--mkModTree-456'(V0, V1, V2, V3, V4, V5) -> case V5 of 0 -> fun (V6) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable__Core_Error'('erased', {'Idris.Core.Core.CyclicImports', ('Idris.Idris2.Prelude.Types.List':'un--++'('erased', V1, [V0 | []]))}, V6)) end; 1 -> fun (V7) -> ('Idris.Idris2.Core.Core':'dn--un--catch_Catchable__Core_Error'('erased', fun (V8) -> begin (V37 = begin (V36 = (('Idris.Idris2.Erlang.Data.IORef':'un--readIORef'('erased', 'erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V9) -> fun (V10) -> fun (V11) -> fun (V12) -> fun (V13) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor__IO'('erased', 'erased', V11, V12, V13)) end end end end end, fun (V14) -> fun (V15) -> fun (V16) -> V15 end end end, fun (V17) -> fun (V18) -> fun (V19) -> fun (V20) -> fun (V21) -> begin (V22 = (V19(V21))), begin (V23 = (V20(V21))), (V22(V23)) end end end end end end end}, fun (V24) -> fun (V25) -> fun (V26) -> fun (V27) -> fun (V28) -> begin (V29 = (V26(V28))), ((V27(V29))(V28)) end end end end end end, fun (V30) -> fun (V31) -> fun (V32) -> begin (V33 = (V31(V32))), (V33(V32)) end end end end}, fun (V34) -> fun (V35) -> V35 end end}, V3))(V8))), {'Idris.Prelude.Types.Right', V36} end), case V37 of {'Idris.Prelude.Types.Left', E0} -> (fun (V38) -> {'Idris.Prelude.Types.Left', V38} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V39) -> (('case--case block in mkModTree-549'(V0, V1, V2, V3, V4, V39, ('Idris.Idris2.Data.List':'un--lookup'('erased', 'erased', {'Idris.Prelude.EqOrd.dn--un--__mkEq', fun (V40) -> fun (V41) -> ('Idris.Idris2.Core.Name.Namespace':'dn--un--==_Eq__ModuleIdent'(V40, V41)) end end, fun (V42) -> fun (V43) -> ('Idris.Idris2.Core.Name.Namespace':'dn--un--/=_Eq__ModuleIdent'(V42, V43)) end end}, V0, V39))))(V8)) end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end, fun (V44) -> case V44 of {'Idris.Core.Core.CyclicImports', E2} -> (fun (V45) -> fun (V46) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable__Core_Error'('erased', V44, V46)) end end(E2)); _ -> fun (V47) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.ModTree.MkModTree', V0, {'Idris.Prelude.Types.Nothing'}, []}} end end end, V7)) end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--17111-1804--in--un--getMods'(V0, V1, V2, V3, V4, V5, V6) -> case V6 of [] -> fun (V7) -> {'Idris.Prelude.Types.Right', V5} end; [E0 | E1] -> (fun (V8, V9) -> fun (V10) -> begin (V11 = ('un--getBuildMods'(V3, V1, V4, V5, V8, V10))), case V11 of {'Idris.Prelude.Types.Left', E2} -> (fun (V12) -> {'Idris.Prelude.Types.Left', V12} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V13) -> (('nested--17111-1804--in--un--getMods'(V0, V1, V2, V3, V4, ('Idris.Idris2.Prelude.Types.List':'un--++'('erased', V13, V5)), V9))(V10)) end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--17111-1805--in--un--dropLater'(V0, V1, V2, V3, V4) -> case V4 of [] -> []; [E0 | E1] -> (fun (V5, V6) -> [V5 | ('nested--17111-1805--in--un--dropLater'(V0, V1, V2, V3, ('Idris.Idris2.Data.List':'un--filter'('erased', fun (V7) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq__String'(case V7 of {'Idris.Idris.ModTree.MkBuildMod', E2, E3, E4} -> (fun (V8, V9, V10) -> V8 end(E2, E3, E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, case V5 of {'Idris.Idris.ModTree.MkBuildMod', E5, E6, E7} -> (fun (V11, V12, V13) -> V11 end(E5, E6, E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)) end, V6))))] end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--show_Show__BuildMod'(V0) -> ('Idris.Idris2.Prelude.Types.Strings':'un--++'(case V0 of {'Idris.Idris.ModTree.MkBuildMod', E0, E1, E2} -> (fun (V1, V2, V3) -> V1 end(E0, E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<" ["/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('Idris.Idris2.Core.Name.Namespace':'un--showSep'(<<", "/utf8>>, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', fun (V4) -> ('Idris.Idris2.Core.Name.Namespace':'dn--un--show_Show__ModuleIdent'(V4)) end, case V0 of {'Idris.Idris.ModTree.MkBuildMod', E3, E4, E5} -> (fun (V5, V6, V7) -> V7 end(E3, E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)))), <<"]"/utf8>>)))))).
'dn--un--showPrec_Show__BuildMod'(V0, V1) -> ('dn--un--show_Show__BuildMod'(V1)).
'dn--un--__Impl_Show_BuildMod'() -> {'Idris.Prelude.Show.dn--un--__mkShow', fun (V0) -> ('dn--un--show_Show__BuildMod'(V0)) end, fun (V1) -> fun (V2) -> ('dn--un--showPrec_Show__BuildMod'(V1, V2)) end end}.
'un--mkModTree'(V0, V1, V2, V3, V4) -> ('case--mkModTree-456'(V4, V3, V2, V1, V0, ('Idris.Idris2.Prelude.Types':'un--elem'('erased', {'Idris.Prelude.EqOrd.dn--un--__mkEq', fun (V5) -> fun (V6) -> ('Idris.Idris2.Core.Name.Namespace':'dn--un--==_Eq__ModuleIdent'(V5, V6)) end end, fun (V7) -> fun (V8) -> ('Idris.Idris2.Core.Name.Namespace':'dn--un--/=_Eq__ModuleIdent'(V7, V8)) end end}, V4, V3)))).
'un--mkBuildMods'(V0, V1, V2) -> ('Idris.Idris2.Prelude.Types':'un--maybe'('erased', 'erased', fun () -> fun (V3) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end end, fun () -> fun (V4) -> fun (V5) -> begin (V34 = begin (V33 = (('Idris.Idris2.Erlang.Data.IORef':'un--readIORef'('erased', 'erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V6) -> fun (V7) -> fun (V8) -> fun (V9) -> fun (V10) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor__IO'('erased', 'erased', V8, V9, V10)) end end end end end, fun (V11) -> fun (V12) -> fun (V13) -> V12 end end end, fun (V14) -> fun (V15) -> fun (V16) -> fun (V17) -> fun (V18) -> begin (V19 = (V16(V18))), begin (V20 = (V17(V18))), (V19(V20)) end end end end end end end}, fun (V21) -> fun (V22) -> fun (V23) -> fun (V24) -> fun (V25) -> begin (V26 = (V23(V25))), ((V24(V26))(V25)) end end end end end end, fun (V27) -> fun (V28) -> fun (V29) -> begin (V30 = (V28(V29))), (V30(V29)) end end end end}, fun (V31) -> fun (V32) -> V32 end end}, V0))(V5))), {'Idris.Prelude.Types.Right', V33} end), case V34 of {'Idris.Prelude.Types.Left', E0} -> (fun (V35) -> {'Idris.Prelude.Types.Left', V35} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V36) -> (('case--mkBuildMods-668'(V2, V1, V0, V4, V36, ('Idris.Idris2.Data.StringMap':'un--lookup'('erased', V4, V36))))(V5)) end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end, case V2 of {'Idris.Idris.ModTree.MkModTree', E2, E3, E4} -> (fun (V37, V38, V39) -> V38 end(E2, E3, E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)).
'un--loadModules'(V0, V1, V2, V3, V4, V5, V6) -> begin (V7 = ('Idris.Idris2.Core.Context':'un--clearCtxt'(V0, V6))), case V7 of {'Idris.Prelude.Types.Left', E0} -> (fun (V8) -> {'Idris.Prelude.Types.Left', V8} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V9) -> begin (V10 = (('Idris.Idris2.Core.InitPrimitives':'un--addPrimitives'(V0))(V6))), case V10 of {'Idris.Prelude.Types.Left', E2} -> (fun (V11) -> {'Idris.Prelude.Types.Left', V11} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V12) -> begin (V41 = begin (V40 = (('Idris.Idris2.Erlang.Data.IORef':'un--writeIORef'('erased', 'erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V13) -> fun (V14) -> fun (V15) -> fun (V16) -> fun (V17) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor__IO'('erased', 'erased', V15, V16, V17)) end end end end end, fun (V18) -> fun (V19) -> fun (V20) -> V19 end end end, fun (V21) -> fun (V22) -> fun (V23) -> fun (V24) -> fun (V25) -> begin (V26 = (V23(V25))), begin (V27 = (V24(V25))), (V26(V27)) end end end end end end end}, fun (V28) -> fun (V29) -> fun (V30) -> fun (V31) -> fun (V32) -> begin (V33 = (V30(V32))), ((V31(V33))(V32)) end end end end end end, fun (V34) -> fun (V35) -> fun (V36) -> begin (V37 = (V35(V36))), (V37(V36)) end end end end}, fun (V38) -> fun (V39) -> V39 end end}, V2, ('Idris.Idris2.Core.Metadata':'un--initMetadata'())))(V6))), {'Idris.Prelude.Types.Right', V40} end), case V41 of {'Idris.Prelude.Types.Left', E4} -> (fun (V42) -> {'Idris.Prelude.Types.Left', V42} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V43) -> begin (V46 = (('Idris.Idris2.Core.Core':'un--traverse'('erased', 'erased', fun (V44) -> fun (V45) -> ('Idris.Idris2.Idris.ProcessIdr':'un--readModule'(V0, V3, V1, 0, ('Idris.Idris2.Core.FC':'un--emptyFC'()), 0, V44, ('Idris.Idris2.Core.Name.Namespace':'un--miAsNamespace'(V44)), V45)) end end, V5))(V6))), case V46 of {'Idris.Prelude.Types.Left', E6} -> (fun (V47) -> {'Idris.Prelude.Types.Left', V47} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V48) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--getBuildMods'(V0, V1, V2, V3, V4, V5) -> begin (V6 = ('Idris.Idris2.Core.Core':'un--newRef'('erased', 'erased', {'Idris.Idris.ModTree.AllMods'}, [], V5))), case V6 of {'Idris.Prelude.Types.Left', E0} -> (fun (V7) -> {'Idris.Prelude.Types.Left', V7} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V8) -> begin (V9 = ('Idris.Idris2.Core.Context':'un--getDirs'(V0, V5))), case V9 of {'Idris.Prelude.Types.Left', E2} -> (fun (V10) -> {'Idris.Prelude.Types.Left', V10} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V11) -> begin (V30 = (('Idris.Idris2.Core.Directory':'un--pathToNS'(case V11 of {'Idris.Core.Options.MkDirs', E4, E5, E6, E7, E8, E9, E10, E11, E12} -> (fun (V12, V13, V14, V15, V16, V17, V18, V19, V20) -> V12 end(E4, E5, E6, E7, E8, E9, E10, E11, E12)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, case V11 of {'Idris.Core.Options.MkDirs', E13, E14, E15, E16, E17, E18, E19, E20, E21} -> (fun (V21, V22, V23, V24, V25, V26, V27, V28, V29) -> V22 end(E13, E14, E15, E16, E17, E18, E19, E20, E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V4))(V5))), case V30 of {'Idris.Prelude.Types.Left', E22} -> (fun (V31) -> {'Idris.Prelude.Types.Left', V31} end(E22)); {'Idris.Prelude.Types.Right', E23} -> (fun (V32) -> (('case--getBuildMods-791'(V4, V3, V2, V1, V0, V8, V11, V32, ('Idris.Idris2.Prelude.Types':'un--elem'('erased', {'Idris.Prelude.EqOrd.dn--un--__mkEq', fun (V33) -> fun (V34) -> ('Idris.Idris2.Core.Name.Namespace':'dn--un--==_Eq__ModuleIdent'(V33, V34)) end end, fun (V35) -> fun (V36) -> ('Idris.Idris2.Core.Name.Namespace':'dn--un--/=_Eq__ModuleIdent'(V35, V36)) end end}, V32, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor__List'('erased', 'erased', fun (V37) -> case V37 of {'Idris.Idris.ModTree.MkBuildMod', E24, E25, E26} -> (fun (V38, V39, V40) -> V39 end(E24, E25, E26)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, V3))))))(V5)) end(E23)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--getAllBuildMods'(V0, V1, V2, V3, V4) -> begin (V5 = (('nested--17111-1804--in--un--getMods'(V3, V2, V1, V0, ('Idris.Idris2.Core.FC':'un--toplevelFC'()), [], V3))(V4))), case V5 of {'Idris.Prelude.Types.Left', E0} -> (fun (V6) -> {'Idris.Prelude.Types.Left', V6} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V7) -> {'Idris.Prelude.Types.Right', ('nested--17111-1805--in--un--dropLater'(V3, V2, V1, V0, V7))} end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--fnameModified'(V0, V1) -> begin (V30 = begin (V29 = (('Idris.Idris2.Erlang.System.File':'un--fileModifiedTime'('erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V2) -> fun (V3) -> fun (V4) -> fun (V5) -> fun (V6) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor__IO'('erased', 'erased', V4, V5, V6)) end end end end end, fun (V7) -> fun (V8) -> fun (V9) -> V8 end end end, fun (V10) -> fun (V11) -> fun (V12) -> fun (V13) -> fun (V14) -> begin (V15 = (V12(V14))), begin (V16 = (V13(V14))), (V15(V16)) end end end end end end end}, fun (V17) -> fun (V18) -> fun (V19) -> fun (V20) -> fun (V21) -> begin (V22 = (V19(V21))), ((V20(V22))(V21)) end end end end end end, fun (V23) -> fun (V24) -> fun (V25) -> begin (V26 = (V24(V25))), (V26(V25)) end end end end}, fun (V27) -> fun (V28) -> V28 end end}, V0))(V1))), {'Idris.Prelude.Types.Right', V29} end), case V30 of {'Idris.Prelude.Types.Left', E0} -> (fun (V31) -> {'Idris.Prelude.Types.Left', V31} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V32) -> case V32 of {'Idris.Prelude.Types.Right', E2} -> (fun (V33) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Prelude.Types':'dn--un--cast_Cast__Int_Integer'(V33))} end(E2)); {'Idris.Prelude.Types.Left', E3} -> (fun (V34) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable__Core_Error'('erased', {'Idris.Core.Core.FileErr', V0, V34}, V1)) end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--filterUsedByMods'(V0, V1) -> case V0 of [] -> []; [E0 | E1] -> (fun (V2, V3) -> ('case--filterUsedByMods-1867'(V2, V3, V1, ('Idris.Idris2.Data.List':'un--partition'('erased', fun (V4) -> ('Idris.Idris2.Prelude.Types':'un--elem'('erased', {'Idris.Prelude.EqOrd.dn--un--__mkEq', fun (V5) -> fun (V6) -> ('Idris.Idris2.Core.Name.Namespace':'dn--un--==_Eq__ModuleIdent'(V5, V6)) end end, fun (V7) -> fun (V8) -> ('Idris.Idris2.Core.Name.Namespace':'dn--un--/=_Eq__ModuleIdent'(V7, V8)) end end}, V2, case V4 of {'Idris.Idris.ModTree.MkBuildMod', E2, E3, E4} -> (fun (V9, V10, V11) -> V11 end(E2, E3, E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)) end, V1)))) end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--buildMods'(V0, V1, V2, V3, V4, V5, V6) -> case V6 of [] -> fun (V7) -> {'Idris.Prelude.Types.Right', []} end; [E0 | E1] -> (fun (V8, V9) -> fun (V10) -> begin (V11 = ('un--buildMod'(V0, V1, V2, V3, V4, V5, V8, V10))), case V11 of {'Idris.Prelude.Types.Left', E2} -> (fun (V12) -> {'Idris.Prelude.Types.Left', V12} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V13) -> case V13 of [] -> (('un--buildMods'(V0, V1, V2, V3, ('Idris.Idris2.Prelude.Types':'dn--un--+_Num__Nat'(('Idris.Idris2.Prelude.Types':'dn--un--fromInteger_Num__Nat'(1)), V4)), V5, V9))(V10)); _ -> {'Idris.Prelude.Types.Right', V13} end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--buildMod'(V0, V1, V2, V3, V4, V5, V6, V7) -> begin (V8 = ('Idris.Idris2.Core.Context':'un--clearCtxt'(V0, V7))), case V8 of {'Idris.Prelude.Types.Left', E0} -> (fun (V9) -> {'Idris.Prelude.Types.Left', V9} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V10) -> begin (V11 = (('Idris.Idris2.Core.InitPrimitives':'un--addPrimitives'(V0))(V7))), case V11 of {'Idris.Prelude.Types.Left', E2} -> (fun (V12) -> {'Idris.Prelude.Types.Left', V12} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V13) -> begin (V14 = ('Idris.Idris2.Core.Context':'un--lazyActive'(V0, 0, V7))), case V14 of {'Idris.Prelude.Types.Left', E4} -> (fun (V15) -> {'Idris.Prelude.Types.Left', V15} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V16) -> begin (V17 = ('Idris.Idris2.Core.Context':'un--setUnboundImplicits'(V0, 0, V7))), case V17 of {'Idris.Prelude.Types.Left', E6} -> (fun (V18) -> {'Idris.Prelude.Types.Left', V18} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V19) -> begin (V23 = case V6 of {'Idris.Idris.ModTree.MkBuildMod', E8, E9, E10} -> (fun (V20, V21, V22) -> V20 end(E8, E9, E10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), begin (V24 = ('Idris.Idris2.Core.Directory':'un--getTTCFileName'(V0, V23, <<"ttc"/utf8>>, V7))), case V24 of {'Idris.Prelude.Types.Left', E11} -> (fun (V25) -> {'Idris.Prelude.Types.Left', V25} end(E11)); {'Idris.Prelude.Types.Right', E12} -> (fun (V26) -> begin (V32 = (('Idris.Idris2.Core.Core':'un--traverse'('erased', 'erased', fun (V27) -> fun (V28) -> ('Idris.Idris2.Core.Directory':'un--nsToPath'(V0, V3, V27, V28)) end end, case V6 of {'Idris.Idris.ModTree.MkBuildMod', E13, E14, E15} -> (fun (V29, V30, V31) -> V31 end(E13, E14, E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V7))), case V32 of {'Idris.Prelude.Types.Left', E16} -> (fun (V33) -> {'Idris.Prelude.Types.Left', V33} end(E16)); {'Idris.Prelude.Types.Right', E17} -> (fun (V34) -> (('case--buildMod-978'(V6, V5, V4, V3, V2, V1, V0, V10, V13, V16, V19, V23, V26, V34, ('Idris.Idris2.Utils.Either':'un--partitionEithers'('erased', 'erased', V34))))(V7)) end(E17)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E12)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--buildDeps'(V0, V1, V2, V3, V4, V5, V6) -> begin (V7 = ('un--getBuildMods'(V0, V4, ('Idris.Idris2.Core.FC':'un--toplevelFC'()), [], V5, V6))), case V7 of {'Idris.Prelude.Types.Left', E0} -> (fun (V8) -> {'Idris.Prelude.Types.Left', V8} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V9) -> begin (V10 = (('un--buildMods'(V0, V1, V4, ('Idris.Idris2.Core.FC':'un--toplevelFC'()), (1 + 0), ('Idris.Idris2.Prelude.Types.List':'un--length'('erased', V9)), V9))(V6))), case V10 of {'Idris.Prelude.Types.Left', E2} -> (fun (V11) -> {'Idris.Prelude.Types.Left', V11} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V12) -> case V12 of [] -> begin (V13 = ('Idris.Idris2.Core.Context':'un--clearCtxt'(V0, V6))), case V13 of {'Idris.Prelude.Types.Left', E4} -> (fun (V14) -> {'Idris.Prelude.Types.Left', V14} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V15) -> begin (V16 = (('Idris.Idris2.Core.InitPrimitives':'un--addPrimitives'(V0))(V6))), case V16 of {'Idris.Prelude.Types.Left', E6} -> (fun (V17) -> {'Idris.Prelude.Types.Left', V17} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V18) -> begin (V47 = begin (V46 = (('Idris.Idris2.Erlang.Data.IORef':'un--writeIORef'('erased', 'erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V19) -> fun (V20) -> fun (V21) -> fun (V22) -> fun (V23) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor__IO'('erased', 'erased', V21, V22, V23)) end end end end end, fun (V24) -> fun (V25) -> fun (V26) -> V25 end end end, fun (V27) -> fun (V28) -> fun (V29) -> fun (V30) -> fun (V31) -> begin (V32 = (V29(V31))), begin (V33 = (V30(V31))), (V32(V33)) end end end end end end end}, fun (V34) -> fun (V35) -> fun (V36) -> fun (V37) -> fun (V38) -> begin (V39 = (V36(V38))), ((V37(V39))(V38)) end end end end end end, fun (V40) -> fun (V41) -> fun (V42) -> begin (V43 = (V41(V42))), (V43(V42)) end end end end}, fun (V44) -> fun (V45) -> V45 end end}, V2, ('Idris.Idris2.Core.Metadata':'un--initMetadata'())))(V6))), {'Idris.Prelude.Types.Right', V46} end), case V47 of {'Idris.Prelude.Types.Left', E8} -> (fun (V48) -> {'Idris.Prelude.Types.Left', V48} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V49) -> begin (V50 = ('Idris.Idris2.Core.Directory':'un--getTTCFileName'(V0, V5, <<"ttc"/utf8>>, V6))), case V50 of {'Idris.Prelude.Types.Left', E10} -> (fun (V51) -> {'Idris.Prelude.Types.Left', V51} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V52) -> begin (V53 = (('Idris.Idris2.Core.Context.Log':'un--log'(V0, <<"import"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"Reloading "/utf8>>, ('Idris.Idris2.Prelude.Types.Strings':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show__String'(V52)), ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<" from "/utf8>>, V5)))))) end))(V6))), case V53 of {'Idris.Prelude.Types.Left', E12} -> (fun (V54) -> {'Idris.Prelude.Types.Left', V54} end(E12)); {'Idris.Prelude.Types.Right', E13} -> (fun (V55) -> begin (V56 = ('Idris.Idris2.Idris.ProcessIdr':'un--readAsMain'(V0, V3, V1, V52, V6))), case V56 of {'Idris.Prelude.Types.Left', E14} -> (fun (V57) -> {'Idris.Prelude.Types.Left', V57} end(E14)); {'Idris.Prelude.Types.Right', E15} -> (fun (V58) -> begin (V59 = ('Idris.Idris2.Core.Directory':'un--getTTCFileName'(V0, V5, <<"ttm"/utf8>>, V6))), case V59 of {'Idris.Prelude.Types.Left', E16} -> (fun (V60) -> {'Idris.Prelude.Types.Left', V60} end(E16)); {'Idris.Prelude.Types.Right', E17} -> (fun (V61) -> begin (V62 = (('Idris.Idris2.Core.Context.Log':'un--log'(V0, <<"import"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> ('Idris.Idris2.Prelude.Types.Strings':'un--++'(<<"Reloading "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show__String'(V61)))) end))(V6))), case V62 of {'Idris.Prelude.Types.Left', E18} -> (fun (V63) -> {'Idris.Prelude.Types.Left', V63} end(E18)); {'Idris.Prelude.Types.Right', E19} -> (fun (V64) -> begin (V65 = ('Idris.Idris2.Core.Metadata':'un--readFromTTM'(V2, V61, V6))), case V65 of {'Idris.Prelude.Types.Left', E20} -> (fun (V66) -> {'Idris.Prelude.Types.Left', V66} end(E20)); {'Idris.Prelude.Types.Right', E21} -> (fun (V67) -> {'Idris.Prelude.Types.Right', []} end(E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E19)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E17)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; _ -> {'Idris.Prelude.Types.Right', V12} end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--buildAll'(V0, V1, V2, V3) -> ('un--buildMods'(V0, V1, V2, ('Idris.Idris2.Core.FC':'un--toplevelFC'()), (1 + 0), ('Idris.Idris2.Prelude.Types.List':'un--length'('erased', V3)), V3)).
